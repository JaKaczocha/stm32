
project9vrefint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08007c18  08007c18  00017c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fe4  08007fe4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007fe4  08007fe4  00017fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fec  08007fec  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fec  08007fec  00017fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ff0  08007ff0  00017ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001d4  080081c8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  080081c8  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ecf8  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fd8  00000000  00000000  0002ef3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  00030f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a34  00000000  00000000  00031c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002844c  00000000  00000000  00032694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f2fa  00000000  00000000  0005aae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc6e4  00000000  00000000  00069dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047d4  00000000  00000000  001664c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0016ac94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007bfc 	.word	0x08007bfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007bfc 	.word	0x08007bfc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b0a      	cmp	r3, #10
 8000eb0:	d102      	bne.n	8000eb8 <__io_putchar+0x14>
    __io_putchar('\r');
 8000eb2:	200d      	movs	r0, #13
 8000eb4:	f7ff fff6 	bl	8000ea4 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000eb8:	1d39      	adds	r1, r7, #4
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <__io_putchar+0x2c>)
 8000ec2:	f003 fc71 	bl	80047a8 <HAL_UART_Transmit>

  return 1;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000254 	.word	0x20000254

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eda:	f000 fb8d 	bl	80015f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ede:	f000 f837 	bl	8000f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee2:	f000 f92d 	bl	8001140 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ee6:	f000 f8fb 	bl	80010e0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000eea:	f000 f883 	bl	8000ff4 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000eee:	4814      	ldr	r0, [pc, #80]	; (8000f40 <main+0x6c>)
 8000ef0:	f000 ff56 	bl	8001da0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef8:	4811      	ldr	r0, [pc, #68]	; (8000f40 <main+0x6c>)
 8000efa:	f001 f80b 	bl	8001f14 <HAL_ADC_PollForConversion>

	  uint32_t value = HAL_ADC_GetValue(&hadc1);
 8000efe:	4810      	ldr	r0, [pc, #64]	; (8000f40 <main+0x6c>)
 8000f00:	f001 f8e0 	bl	80020c4 <HAL_ADC_GetValue>
 8000f04:	6078      	str	r0, [r7, #4]
	  float voltage = 3.3f * value / 4096.0f;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	ee07 3a90 	vmov	s15, r3
 8000f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f10:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000f44 <main+0x70>
 8000f14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f18:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000f48 <main+0x74>
 8000f1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f20:	edc7 7a00 	vstr	s15, [r7]

	  printf("ADC = %lu (%.3f V)\n", value, voltage);
 8000f24:	6838      	ldr	r0, [r7, #0]
 8000f26:	f7ff fb0f 	bl	8000548 <__aeabi_f2d>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	4806      	ldr	r0, [pc, #24]	; (8000f4c <main+0x78>)
 8000f32:	f004 feb9 	bl	8005ca8 <iprintf>
	  HAL_Delay(250);
 8000f36:	20fa      	movs	r0, #250	; 0xfa
 8000f38:	f000 fbda 	bl	80016f0 <HAL_Delay>
  {
 8000f3c:	e7d7      	b.n	8000eee <main+0x1a>
 8000f3e:	bf00      	nop
 8000f40:	200001f0 	.word	0x200001f0
 8000f44:	40533333 	.word	0x40533333
 8000f48:	45800000 	.word	0x45800000
 8000f4c:	08007c18 	.word	0x08007c18

08000f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b096      	sub	sp, #88	; 0x58
 8000f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	2244      	movs	r2, #68	; 0x44
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f004 fef7 	bl	8005d52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	463b      	mov	r3, r7
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f76:	f002 f8b7 	bl	80030e8 <HAL_PWREx_ControlVoltageScaling>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f80:	f000 f944 	bl	800120c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f84:	2302      	movs	r3, #2
 8000f86:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8e:	2310      	movs	r3, #16
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f92:	2302      	movs	r3, #2
 8000f94:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f96:	2302      	movs	r3, #2
 8000f98:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f9e:	230a      	movs	r3, #10
 8000fa0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 f8ee 	bl	8003194 <HAL_RCC_OscConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fbe:	f000 f925 	bl	800120c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	2104      	movs	r1, #4
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f002 fcb6 	bl	800394c <HAL_RCC_ClockConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fe6:	f000 f911 	bl	800120c <Error_Handler>
  }
}
 8000fea:	bf00      	nop
 8000fec:	3758      	adds	r7, #88	; 0x58
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
 8001014:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001016:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <MX_ADC1_Init+0xe0>)
 8001018:	4a2f      	ldr	r2, [pc, #188]	; (80010d8 <MX_ADC1_Init+0xe4>)
 800101a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800101c:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <MX_ADC1_Init+0xe0>)
 800101e:	2200      	movs	r2, #0
 8001020:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001022:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <MX_ADC1_Init+0xe0>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <MX_ADC1_Init+0xe0>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800102e:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <MX_ADC1_Init+0xe0>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <MX_ADC1_Init+0xe0>)
 8001036:	2204      	movs	r2, #4
 8001038:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <MX_ADC1_Init+0xe0>)
 800103c:	2200      	movs	r2, #0
 800103e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001040:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <MX_ADC1_Init+0xe0>)
 8001042:	2200      	movs	r2, #0
 8001044:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001046:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <MX_ADC1_Init+0xe0>)
 8001048:	2201      	movs	r2, #1
 800104a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <MX_ADC1_Init+0xe0>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_ADC1_Init+0xe0>)
 8001056:	2200      	movs	r2, #0
 8001058:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_ADC1_Init+0xe0>)
 800105c:	2200      	movs	r2, #0
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_ADC1_Init+0xe0>)
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_ADC1_Init+0xe0>)
 800106a:	2200      	movs	r2, #0
 800106c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <MX_ADC1_Init+0xe0>)
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001076:	4817      	ldr	r0, [pc, #92]	; (80010d4 <MX_ADC1_Init+0xe0>)
 8001078:	f000 fd42 	bl	8001b00 <HAL_ADC_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001082:	f000 f8c3 	bl	800120c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	4810      	ldr	r0, [pc, #64]	; (80010d4 <MX_ADC1_Init+0xe0>)
 8001092:	f001 fcc3 	bl	8002a1c <HAL_ADCEx_MultiModeConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800109c:	f000 f8b6 	bl	800120c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_ADC1_Init+0xe8>)
 80010a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a4:	2306      	movs	r3, #6
 80010a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ac:	237f      	movs	r3, #127	; 0x7f
 80010ae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010b0:	2304      	movs	r3, #4
 80010b2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_ADC1_Init+0xe0>)
 80010be:	f001 f80f 	bl	80020e0 <HAL_ADC_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80010c8:	f000 f8a0 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	3728      	adds	r7, #40	; 0x28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200001f0 	.word	0x200001f0
 80010d8:	50040000 	.word	0x50040000
 80010dc:	80000001 	.word	0x80000001

080010e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_USART2_UART_Init+0x58>)
 80010e6:	4a15      	ldr	r2, [pc, #84]	; (800113c <MX_USART2_UART_Init+0x5c>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <MX_USART2_UART_Init+0x58>)
 80010ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_USART2_UART_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_USART2_UART_Init+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_USART2_UART_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_USART2_UART_Init+0x58>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_USART2_UART_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_USART2_UART_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_USART2_UART_Init+0x58>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_USART2_UART_Init+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_USART2_UART_Init+0x58>)
 8001124:	f003 faf2 	bl	800470c <HAL_UART_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800112e:	f000 f86d 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000254 	.word	0x20000254
 800113c:	40004400 	.word	0x40004400

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <MX_GPIO_Init+0xc4>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a2a      	ldr	r2, [pc, #168]	; (8001204 <MX_GPIO_Init+0xc4>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <MX_GPIO_Init+0xc4>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <MX_GPIO_Init+0xc4>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4a24      	ldr	r2, [pc, #144]	; (8001204 <MX_GPIO_Init+0xc4>)
 8001174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <MX_GPIO_Init+0xc4>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_GPIO_Init+0xc4>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <MX_GPIO_Init+0xc4>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_GPIO_Init+0xc4>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <MX_GPIO_Init+0xc4>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	4a18      	ldr	r2, [pc, #96]	; (8001204 <MX_GPIO_Init+0xc4>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <MX_GPIO_Init+0xc4>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2120      	movs	r1, #32
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011be:	f001 ff6d 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	480b      	ldr	r0, [pc, #44]	; (8001208 <MX_GPIO_Init+0xc8>)
 80011da:	f001 fdb5 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011de:	2320      	movs	r3, #32
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f8:	f001 fda6 	bl	8002d48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000
 8001208:	48000800 	.word	0x48000800

0800120c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001214:	e7fe      	b.n	8001214 <Error_Handler+0x8>
	...

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_MspInit+0x44>)
 8001220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001222:	4a0e      	ldr	r2, [pc, #56]	; (800125c <HAL_MspInit+0x44>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6613      	str	r3, [r2, #96]	; 0x60
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <HAL_MspInit+0x44>)
 800122c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_MspInit+0x44>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	4a08      	ldr	r2, [pc, #32]	; (800125c <HAL_MspInit+0x44>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	6593      	str	r3, [r2, #88]	; 0x58
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_MspInit+0x44>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000

08001260 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b0a6      	sub	sp, #152	; 0x98
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	2288      	movs	r2, #136	; 0x88
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f004 fd6e 	bl	8005d52 <memset>
  if(hadc->Instance==ADC1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a19      	ldr	r2, [pc, #100]	; (80012e0 <HAL_ADC_MspInit+0x80>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d12b      	bne.n	80012d8 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001280:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001284:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001286:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800128a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800128e:	2302      	movs	r3, #2
 8001290:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001292:	2301      	movs	r3, #1
 8001294:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001296:	2308      	movs	r3, #8
 8001298:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800129a:	2307      	movs	r3, #7
 800129c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800129e:	2302      	movs	r3, #2
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 80012a2:	2304      	movs	r3, #4
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80012a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 fd6f 	bl	8003d94 <HAL_RCCEx_PeriphCLKConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 80012bc:	f7ff ffa6 	bl	800120c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_ADC_MspInit+0x84>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_ADC_MspInit+0x84>)
 80012c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_ADC_MspInit+0x84>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012d8:	bf00      	nop
 80012da:	3798      	adds	r7, #152	; 0x98
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	50040000 	.word	0x50040000
 80012e4:	40021000 	.word	0x40021000

080012e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b0ac      	sub	sp, #176	; 0xb0
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2288      	movs	r2, #136	; 0x88
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f004 fd22 	bl	8005d52 <memset>
  if(huart->Instance==USART2)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a21      	ldr	r2, [pc, #132]	; (8001398 <HAL_UART_MspInit+0xb0>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d13b      	bne.n	8001390 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001318:	2302      	movs	r3, #2
 800131a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800131c:	2300      	movs	r3, #0
 800131e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4618      	mov	r0, r3
 8001326:	f002 fd35 	bl	8003d94 <HAL_RCCEx_PeriphCLKConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001330:	f7ff ff6c 	bl	800120c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <HAL_UART_MspInit+0xb4>)
 8001336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001338:	4a18      	ldr	r2, [pc, #96]	; (800139c <HAL_UART_MspInit+0xb4>)
 800133a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133e:	6593      	str	r3, [r2, #88]	; 0x58
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <HAL_UART_MspInit+0xb4>)
 8001342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_UART_MspInit+0xb4>)
 800134e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001350:	4a12      	ldr	r2, [pc, #72]	; (800139c <HAL_UART_MspInit+0xb4>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001358:	4b10      	ldr	r3, [pc, #64]	; (800139c <HAL_UART_MspInit+0xb4>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001364:	230c      	movs	r3, #12
 8001366:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800137c:	2307      	movs	r3, #7
 800137e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001386:	4619      	mov	r1, r3
 8001388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138c:	f001 fcdc 	bl	8002d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001390:	bf00      	nop
 8001392:	37b0      	adds	r7, #176	; 0xb0
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40004400 	.word	0x40004400
 800139c:	40021000 	.word	0x40021000

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a4:	e7fe      	b.n	80013a4 <NMI_Handler+0x4>

080013a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <MemManage_Handler+0x4>

080013b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler+0x4>

080013be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ec:	f000 f960 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return 1;
 80013f8:	2301      	movs	r3, #1
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <_kill>:

int _kill(int pid, int sig)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800140e:	f004 fcf3 	bl	8005df8 <__errno>
 8001412:	4603      	mov	r3, r0
 8001414:	2216      	movs	r2, #22
 8001416:	601a      	str	r2, [r3, #0]
  return -1;
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <_exit>:

void _exit (int status)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800142c:	f04f 31ff 	mov.w	r1, #4294967295
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ffe7 	bl	8001404 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001436:	e7fe      	b.n	8001436 <_exit+0x12>

08001438 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	e00a      	b.n	8001460 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800144a:	f3af 8000 	nop.w
 800144e:	4601      	mov	r1, r0
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	60ba      	str	r2, [r7, #8]
 8001456:	b2ca      	uxtb	r2, r1
 8001458:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3301      	adds	r3, #1
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	429a      	cmp	r2, r3
 8001466:	dbf0      	blt.n	800144a <_read+0x12>
  }

  return len;
 8001468:	687b      	ldr	r3, [r7, #4]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	e009      	b.n	8001498 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	60ba      	str	r2, [r7, #8]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fd09 	bl	8000ea4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	dbf1      	blt.n	8001484 <_write+0x12>
  }
  return len;
 80014a0:	687b      	ldr	r3, [r7, #4]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_close>:

int _close(int file)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d2:	605a      	str	r2, [r3, #4]
  return 0;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <_isatty>:

int _isatty(int file)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800151c:	4a14      	ldr	r2, [pc, #80]	; (8001570 <_sbrk+0x5c>)
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <_sbrk+0x60>)
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d102      	bne.n	8001536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <_sbrk+0x64>)
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <_sbrk+0x68>)
 8001534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	429a      	cmp	r2, r3
 8001542:	d207      	bcs.n	8001554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001544:	f004 fc58 	bl	8005df8 <__errno>
 8001548:	4603      	mov	r3, r0
 800154a:	220c      	movs	r2, #12
 800154c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	e009      	b.n	8001568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <_sbrk+0x64>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <_sbrk+0x64>)
 8001564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20018000 	.word	0x20018000
 8001574:	00000400 	.word	0x00000400
 8001578:	200002dc 	.word	0x200002dc
 800157c:	20000430 	.word	0x20000430

08001580 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <SystemInit+0x20>)
 8001586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <SystemInit+0x20>)
 800158c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015a8:	f7ff ffea 	bl	8001580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ac:	480c      	ldr	r0, [pc, #48]	; (80015e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ae:	490d      	ldr	r1, [pc, #52]	; (80015e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <LoopForever+0xe>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b4:	e002      	b.n	80015bc <LoopCopyDataInit>

080015b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ba:	3304      	adds	r3, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c0:	d3f9      	bcc.n	80015b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c2:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80015c4:	4c0a      	ldr	r4, [pc, #40]	; (80015f0 <LoopForever+0x16>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c8:	e001      	b.n	80015ce <LoopFillZerobss>

080015ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015cc:	3204      	adds	r2, #4

080015ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d0:	d3fb      	bcc.n	80015ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015d2:	f004 fc17 	bl	8005e04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015d6:	f7ff fc7d 	bl	8000ed4 <main>

080015da <LoopForever>:

LoopForever:
    b LoopForever
 80015da:	e7fe      	b.n	80015da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80015e8:	08007ff4 	.word	0x08007ff4
  ldr r2, =_sbss
 80015ec:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80015f0:	20000430 	.word	0x20000430

080015f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015f4:	e7fe      	b.n	80015f4 <ADC1_2_IRQHandler>
	...

080015f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_Init+0x3c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <HAL_Init+0x3c>)
 8001608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160e:	2003      	movs	r0, #3
 8001610:	f001 fb66 	bl	8002ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001614:	2000      	movs	r0, #0
 8001616:	f000 f80f 	bl	8001638 <HAL_InitTick>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	71fb      	strb	r3, [r7, #7]
 8001624:	e001      	b.n	800162a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001626:	f7ff fdf7 	bl	8001218 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800162a:	79fb      	ldrb	r3, [r7, #7]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40022000 	.word	0x40022000

08001638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <HAL_InitTick+0x6c>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d023      	beq.n	8001694 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <HAL_InitTick+0x70>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_InitTick+0x6c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165a:	fbb3 f3f1 	udiv	r3, r3, r1
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f001 fb63 	bl	8002d2e <HAL_SYSTICK_Config>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10f      	bne.n	800168e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d809      	bhi.n	8001688 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f001 fb3b 	bl	8002cf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001680:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <HAL_InitTick+0x74>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e007      	b.n	8001698 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	e004      	b.n	8001698 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	73fb      	strb	r3, [r7, #15]
 8001692:	e001      	b.n	8001698 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000004 	.word	0x20000004

080016b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_IncTick+0x20>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_IncTick+0x24>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <HAL_IncTick+0x24>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000008 	.word	0x20000008
 80016d4:	200002e0 	.word	0x200002e0

080016d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTick;
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <HAL_GetTick+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	200002e0 	.word	0x200002e0

080016f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff ffee 	bl	80016d8 <HAL_GetTick>
 80016fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001708:	d005      	beq.n	8001716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <HAL_Delay+0x44>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001716:	bf00      	nop
 8001718:	f7ff ffde 	bl	80016d8 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	429a      	cmp	r2, r3
 8001726:	d8f7      	bhi.n	8001718 <HAL_Delay+0x28>
  {
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000008 	.word	0x20000008

08001738 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	609a      	str	r2, [r3, #8]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	609a      	str	r2, [r3, #8]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	3360      	adds	r3, #96	; 0x60
 80017b2:	461a      	mov	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <LL_ADC_SetOffset+0x44>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	4313      	orrs	r3, r2
 80017d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017d8:	bf00      	nop
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	03fff000 	.word	0x03fff000

080017e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3360      	adds	r3, #96	; 0x60
 80017f6:	461a      	mov	r2, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3360      	adds	r3, #96	; 0x60
 8001824:	461a      	mov	r2, r3
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	431a      	orrs	r2, r3
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800183e:	bf00      	nop
 8001840:	371c      	adds	r7, #28
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001870:	b480      	push	{r7}
 8001872:	b087      	sub	sp, #28
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	3330      	adds	r3, #48	; 0x30
 8001880:	461a      	mov	r2, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	4413      	add	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	f003 031f 	and.w	r3, r3, #31
 800189a:	211f      	movs	r1, #31
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	401a      	ands	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	0e9b      	lsrs	r3, r3, #26
 80018a8:	f003 011f 	and.w	r1, r3, #31
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	431a      	orrs	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018bc:	bf00      	nop
 80018be:	371c      	adds	r7, #28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	3314      	adds	r3, #20
 80018d8:	461a      	mov	r2, r3
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	0e5b      	lsrs	r3, r3, #25
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	4413      	add	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	0d1b      	lsrs	r3, r3, #20
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	2107      	movs	r1, #7
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	401a      	ands	r2, r3
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	0d1b      	lsrs	r3, r3, #20
 8001902:	f003 031f 	and.w	r3, r3, #31
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	431a      	orrs	r2, r3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001912:	bf00      	nop
 8001914:	371c      	adds	r7, #28
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001938:	43db      	mvns	r3, r3
 800193a:	401a      	ands	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0318 	and.w	r3, r3, #24
 8001942:	4908      	ldr	r1, [pc, #32]	; (8001964 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001944:	40d9      	lsrs	r1, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	400b      	ands	r3, r1
 800194a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194e:	431a      	orrs	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	0007ffff 	.word	0x0007ffff

08001968 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 031f 	and.w	r3, r3, #31
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80019b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6093      	str	r3, [r2, #8]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019d8:	d101      	bne.n	80019de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80019fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a28:	d101      	bne.n	8001a2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a50:	f043 0201 	orr.w	r2, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <LL_ADC_IsEnabled+0x18>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <LL_ADC_IsEnabled+0x1a>
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a9a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a9e:	f043 0204 	orr.w	r2, r3, #4
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d101      	bne.n	8001aca <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d101      	bne.n	8001af0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b089      	sub	sp, #36	; 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e130      	b.n	8001d7c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d109      	bne.n	8001b3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff fb99 	bl	8001260 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff3f 	bl	80019c4 <LL_ADC_IsDeepPowerDownEnabled>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff25 	bl	80019a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff5a 	bl	8001a14 <LL_ADC_IsInternalRegulatorEnabled>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d115      	bne.n	8001b92 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff3e 	bl	80019ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b70:	4b84      	ldr	r3, [pc, #528]	; (8001d84 <HAL_ADC_Init+0x284>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	099b      	lsrs	r3, r3, #6
 8001b76:	4a84      	ldr	r2, [pc, #528]	; (8001d88 <HAL_ADC_Init+0x288>)
 8001b78:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7c:	099b      	lsrs	r3, r3, #6
 8001b7e:	3301      	adds	r3, #1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b84:	e002      	b.n	8001b8c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f9      	bne.n	8001b86 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff3c 	bl	8001a14 <LL_ADC_IsInternalRegulatorEnabled>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10d      	bne.n	8001bbe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba6:	f043 0210 	orr.w	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb2:	f043 0201 	orr.w	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ff75 	bl	8001ab2 <LL_ADC_REG_IsConversionOngoing>
 8001bc8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f040 80c9 	bne.w	8001d6a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f040 80c5 	bne.w	8001d6a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001be8:	f043 0202 	orr.w	r2, r3, #2
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff35 	bl	8001a64 <LL_ADC_IsEnabled>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d115      	bne.n	8001c2c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c00:	4862      	ldr	r0, [pc, #392]	; (8001d8c <HAL_ADC_Init+0x28c>)
 8001c02:	f7ff ff2f 	bl	8001a64 <LL_ADC_IsEnabled>
 8001c06:	4604      	mov	r4, r0
 8001c08:	4861      	ldr	r0, [pc, #388]	; (8001d90 <HAL_ADC_Init+0x290>)
 8001c0a:	f7ff ff2b 	bl	8001a64 <LL_ADC_IsEnabled>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	431c      	orrs	r4, r3
 8001c12:	4860      	ldr	r0, [pc, #384]	; (8001d94 <HAL_ADC_Init+0x294>)
 8001c14:	f7ff ff26 	bl	8001a64 <LL_ADC_IsEnabled>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4323      	orrs	r3, r4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4619      	mov	r1, r3
 8001c26:	485c      	ldr	r0, [pc, #368]	; (8001d98 <HAL_ADC_Init+0x298>)
 8001c28:	f7ff fd86 	bl	8001738 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7e5b      	ldrb	r3, [r3, #25]
 8001c30:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c36:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c3c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c42:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c4a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d106      	bne.n	8001c68 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	045b      	lsls	r3, r3, #17
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d009      	beq.n	8001c84 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <HAL_ADC_Init+0x29c>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	69b9      	ldr	r1, [r7, #24]
 8001c94:	430b      	orrs	r3, r1
 8001c96:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff1b 	bl	8001ad8 <LL_ADC_INJ_IsConversionOngoing>
 8001ca2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d13d      	bne.n	8001d26 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d13a      	bne.n	8001d26 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cb4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cbc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ccc:	f023 0302 	bic.w	r3, r3, #2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	69b9      	ldr	r1, [r7, #24]
 8001cd6:	430b      	orrs	r3, r1
 8001cd8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d118      	bne.n	8001d16 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001cee:	f023 0304 	bic.w	r3, r3, #4
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d00:	4311      	orrs	r1, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d06:	430a      	orrs	r2, r1
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	611a      	str	r2, [r3, #16]
 8001d14:	e007      	b.n	8001d26 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0201 	bic.w	r2, r2, #1
 8001d24:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d10c      	bne.n	8001d48 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	f023 010f 	bic.w	r1, r3, #15
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	1e5a      	subs	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	631a      	str	r2, [r3, #48]	; 0x30
 8001d46:	e007      	b.n	8001d58 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 020f 	bic.w	r2, r2, #15
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5c:	f023 0303 	bic.w	r3, r3, #3
 8001d60:	f043 0201 	orr.w	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54
 8001d68:	e007      	b.n	8001d7a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6e:	f043 0210 	orr.w	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3724      	adds	r7, #36	; 0x24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd90      	pop	{r4, r7, pc}
 8001d84:	20000000 	.word	0x20000000
 8001d88:	053e2d63 	.word	0x053e2d63
 8001d8c:	50040000 	.word	0x50040000
 8001d90:	50040100 	.word	0x50040100
 8001d94:	50040200 	.word	0x50040200
 8001d98:	50040300 	.word	0x50040300
 8001d9c:	fff0c007 	.word	0xfff0c007

08001da0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001da8:	4857      	ldr	r0, [pc, #348]	; (8001f08 <HAL_ADC_Start+0x168>)
 8001daa:	f7ff fddd 	bl	8001968 <LL_ADC_GetMultimode>
 8001dae:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fe7c 	bl	8001ab2 <LL_ADC_REG_IsConversionOngoing>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f040 809c 	bne.w	8001efa <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_ADC_Start+0x30>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e097      	b.n	8001f00 <HAL_ADC_Start+0x160>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 fd73 	bl	80028c4 <ADC_Enable>
 8001dde:	4603      	mov	r3, r0
 8001de0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001de2:	7dfb      	ldrb	r3, [r7, #23]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f040 8083 	bne.w	8001ef0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a42      	ldr	r2, [pc, #264]	; (8001f0c <HAL_ADC_Start+0x16c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d002      	beq.n	8001e0e <HAL_ADC_Start+0x6e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	e000      	b.n	8001e10 <HAL_ADC_Start+0x70>
 8001e0e:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <HAL_ADC_Start+0x170>)
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d002      	beq.n	8001e1e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e36:	d106      	bne.n	8001e46 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3c:	f023 0206 	bic.w	r2, r3, #6
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	659a      	str	r2, [r3, #88]	; 0x58
 8001e44:	e002      	b.n	8001e4c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	221c      	movs	r2, #28
 8001e52:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a2a      	ldr	r2, [pc, #168]	; (8001f0c <HAL_ADC_Start+0x16c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d002      	beq.n	8001e6c <HAL_ADC_Start+0xcc>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	e000      	b.n	8001e6e <HAL_ADC_Start+0xce>
 8001e6c:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <HAL_ADC_Start+0x170>)
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d008      	beq.n	8001e88 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	2b05      	cmp	r3, #5
 8001e80:	d002      	beq.n	8001e88 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	2b09      	cmp	r3, #9
 8001e86:	d114      	bne.n	8001eb2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d007      	beq.n	8001ea6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fded 	bl	8001a8a <LL_ADC_REG_StartConversion>
 8001eb0:	e025      	b.n	8001efe <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a12      	ldr	r2, [pc, #72]	; (8001f0c <HAL_ADC_Start+0x16c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d002      	beq.n	8001ece <HAL_ADC_Start+0x12e>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	e000      	b.n	8001ed0 <HAL_ADC_Start+0x130>
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_ADC_Start+0x170>)
 8001ed0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00f      	beq.n	8001efe <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ee6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54
 8001eee:	e006      	b.n	8001efe <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001ef8:	e001      	b.n	8001efe <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001efa:	2302      	movs	r3, #2
 8001efc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	50040300 	.word	0x50040300
 8001f0c:	50040100 	.word	0x50040100
 8001f10:	50040000 	.word	0x50040000

08001f14 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f1e:	4866      	ldr	r0, [pc, #408]	; (80020b8 <HAL_ADC_PollForConversion+0x1a4>)
 8001f20:	f7ff fd22 	bl	8001968 <LL_ADC_GetMultimode>
 8001f24:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d102      	bne.n	8001f34 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f2e:	2308      	movs	r3, #8
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	e02a      	b.n	8001f8a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d005      	beq.n	8001f46 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d002      	beq.n	8001f46 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2b09      	cmp	r3, #9
 8001f44:	d111      	bne.n	8001f6a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f58:	f043 0220 	orr.w	r2, r3, #32
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0a4      	b.n	80020ae <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f64:	2304      	movs	r3, #4
 8001f66:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f68:	e00f      	b.n	8001f8a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f6a:	4853      	ldr	r0, [pc, #332]	; (80020b8 <HAL_ADC_PollForConversion+0x1a4>)
 8001f6c:	f7ff fd0a 	bl	8001984 <LL_ADC_GetMultiDMATransfer>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7a:	f043 0220 	orr.w	r2, r3, #32
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e093      	b.n	80020ae <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f86:	2304      	movs	r3, #4
 8001f88:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f8a:	f7ff fba5 	bl	80016d8 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f90:	e021      	b.n	8001fd6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f98:	d01d      	beq.n	8001fd6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f9a:	f7ff fb9d 	bl	80016d8 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d302      	bcc.n	8001fb0 <HAL_ADC_PollForConversion+0x9c>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d112      	bne.n	8001fd6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10b      	bne.n	8001fd6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc2:	f043 0204 	orr.w	r2, r3, #4
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e06b      	b.n	80020ae <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0d6      	beq.n	8001f92 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fc28 	bl	800184a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01c      	beq.n	800203a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7e5b      	ldrb	r3, [r3, #25]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d118      	bne.n	800203a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b08      	cmp	r3, #8
 8002014:	d111      	bne.n	800203a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d105      	bne.n	800203a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <HAL_ADC_PollForConversion+0x1a8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d002      	beq.n	800204a <HAL_ADC_PollForConversion+0x136>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	e000      	b.n	800204c <HAL_ADC_PollForConversion+0x138>
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <HAL_ADC_PollForConversion+0x1ac>)
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	4293      	cmp	r3, r2
 8002052:	d008      	beq.n	8002066 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b05      	cmp	r3, #5
 800205e:	d002      	beq.n	8002066 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2b09      	cmp	r3, #9
 8002064:	d104      	bne.n	8002070 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	e00c      	b.n	800208a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a11      	ldr	r2, [pc, #68]	; (80020bc <HAL_ADC_PollForConversion+0x1a8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d002      	beq.n	8002080 <HAL_ADC_PollForConversion+0x16c>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	e000      	b.n	8002082 <HAL_ADC_PollForConversion+0x16e>
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_ADC_PollForConversion+0x1ac>)
 8002082:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	2b08      	cmp	r3, #8
 800208e:	d104      	bne.n	800209a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2208      	movs	r2, #8
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	e008      	b.n	80020ac <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d103      	bne.n	80020ac <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	220c      	movs	r2, #12
 80020aa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3720      	adds	r7, #32
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	50040300 	.word	0x50040300
 80020bc:	50040100 	.word	0x50040100
 80020c0:	50040000 	.word	0x50040000

080020c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b0b6      	sub	sp, #216	; 0xd8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x22>
 80020fe:	2302      	movs	r3, #2
 8002100:	e3c9      	b.n	8002896 <HAL_ADC_ConfigChannel+0x7b6>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fccf 	bl	8001ab2 <LL_ADC_REG_IsConversionOngoing>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 83aa 	bne.w	8002870 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b05      	cmp	r3, #5
 800212a:	d824      	bhi.n	8002176 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	3b02      	subs	r3, #2
 8002132:	2b03      	cmp	r3, #3
 8002134:	d81b      	bhi.n	800216e <HAL_ADC_ConfigChannel+0x8e>
 8002136:	a201      	add	r2, pc, #4	; (adr r2, 800213c <HAL_ADC_ConfigChannel+0x5c>)
 8002138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213c:	0800214d 	.word	0x0800214d
 8002140:	08002155 	.word	0x08002155
 8002144:	0800215d 	.word	0x0800215d
 8002148:	08002165 	.word	0x08002165
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800214c:	230c      	movs	r3, #12
 800214e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002152:	e010      	b.n	8002176 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002154:	2312      	movs	r3, #18
 8002156:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800215a:	e00c      	b.n	8002176 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800215c:	2318      	movs	r3, #24
 800215e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002162:	e008      	b.n	8002176 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800216c:	e003      	b.n	8002176 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800216e:	2306      	movs	r3, #6
 8002170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002174:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002184:	f7ff fb74 	bl	8001870 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fc90 	bl	8001ab2 <LL_ADC_REG_IsConversionOngoing>
 8002192:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fc9c 	bl	8001ad8 <LL_ADC_INJ_IsConversionOngoing>
 80021a0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f040 81a4 	bne.w	80024f6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f040 819f 	bne.w	80024f6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	6819      	ldr	r1, [r3, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	461a      	mov	r2, r3
 80021c6:	f7ff fb7f 	bl	80018c8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	695a      	ldr	r2, [r3, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	08db      	lsrs	r3, r3, #3
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d00a      	beq.n	8002202 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6919      	ldr	r1, [r3, #16]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021fc:	f7ff fad0 	bl	80017a0 <LL_ADC_SetOffset>
 8002200:	e179      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff faed 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 800220e:	4603      	mov	r3, r0
 8002210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10a      	bne.n	800222e <HAL_ADC_ConfigChannel+0x14e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fae2 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 8002224:	4603      	mov	r3, r0
 8002226:	0e9b      	lsrs	r3, r3, #26
 8002228:	f003 021f 	and.w	r2, r3, #31
 800222c:	e01e      	b.n	800226c <HAL_ADC_ConfigChannel+0x18c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2100      	movs	r1, #0
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fad7 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 800223a:	4603      	mov	r3, r0
 800223c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800224c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002250:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002254:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800225c:	2320      	movs	r3, #32
 800225e:	e004      	b.n	800226a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002260:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x1a4>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	0e9b      	lsrs	r3, r3, #26
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	e018      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x1d6>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002290:	fa93 f3a3 	rbit	r3, r3
 8002294:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002298:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800229c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80022a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80022a8:	2320      	movs	r3, #32
 80022aa:	e004      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80022ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022b0:	fab3 f383 	clz	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d106      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2200      	movs	r2, #0
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff faa6 	bl	8001814 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2101      	movs	r1, #1
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fa8a 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10a      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x214>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2101      	movs	r1, #1
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fa7f 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 80022ea:	4603      	mov	r3, r0
 80022ec:	0e9b      	lsrs	r3, r3, #26
 80022ee:	f003 021f 	and.w	r2, r3, #31
 80022f2:	e01e      	b.n	8002332 <HAL_ADC_ConfigChannel+0x252>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2101      	movs	r1, #1
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fa74 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 8002300:	4603      	mov	r3, r0
 8002302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002312:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002316:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800231a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002322:	2320      	movs	r3, #32
 8002324:	e004      	b.n	8002330 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002326:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233a:	2b00      	cmp	r3, #0
 800233c:	d105      	bne.n	800234a <HAL_ADC_ConfigChannel+0x26a>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	0e9b      	lsrs	r3, r3, #26
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	e018      	b.n	800237c <HAL_ADC_ConfigChannel+0x29c>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800235e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002362:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002366:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800236e:	2320      	movs	r3, #32
 8002370:	e004      	b.n	800237c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002372:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800237c:	429a      	cmp	r2, r3
 800237e:	d106      	bne.n	800238e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2200      	movs	r2, #0
 8002386:	2101      	movs	r1, #1
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fa43 	bl	8001814 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2102      	movs	r1, #2
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fa27 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 800239a:	4603      	mov	r3, r0
 800239c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10a      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x2da>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2102      	movs	r1, #2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fa1c 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 80023b0:	4603      	mov	r3, r0
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	e01e      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x318>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2102      	movs	r1, #2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fa11 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80023d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80023e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80023e8:	2320      	movs	r3, #32
 80023ea:	e004      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80023ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x330>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0e9b      	lsrs	r3, r3, #26
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	e014      	b.n	800243a <HAL_ADC_ConfigChannel+0x35a>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800241e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002424:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800242c:	2320      	movs	r3, #32
 800242e:	e004      	b.n	800243a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002430:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800243a:	429a      	cmp	r2, r3
 800243c:	d106      	bne.n	800244c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2200      	movs	r2, #0
 8002444:	2102      	movs	r1, #2
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff f9e4 	bl	8001814 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2103      	movs	r1, #3
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff f9c8 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 8002458:	4603      	mov	r3, r0
 800245a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10a      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x398>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2103      	movs	r1, #3
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff f9bd 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	0e9b      	lsrs	r3, r3, #26
 8002472:	f003 021f 	and.w	r2, r3, #31
 8002476:	e017      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x3c8>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2103      	movs	r1, #3
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff f9b2 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 8002484:	4603      	mov	r3, r0
 8002486:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002492:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800249a:	2320      	movs	r3, #32
 800249c:	e003      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800249e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d105      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x3e0>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0e9b      	lsrs	r3, r3, #26
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	e011      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x404>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80024ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024d0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80024d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80024d8:	2320      	movs	r3, #32
 80024da:	e003      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80024dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d106      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2200      	movs	r2, #0
 80024ee:	2103      	movs	r1, #3
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff f98f 	bl	8001814 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fab2 	bl	8001a64 <LL_ADC_IsEnabled>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	f040 8140 	bne.w	8002788 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	461a      	mov	r2, r3
 8002516:	f7ff fa03 	bl	8001920 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	4a8f      	ldr	r2, [pc, #572]	; (800275c <HAL_ADC_ConfigChannel+0x67c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	f040 8131 	bne.w	8002788 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10b      	bne.n	800254e <HAL_ADC_ConfigChannel+0x46e>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	0e9b      	lsrs	r3, r3, #26
 800253c:	3301      	adds	r3, #1
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	2b09      	cmp	r3, #9
 8002544:	bf94      	ite	ls
 8002546:	2301      	movls	r3, #1
 8002548:	2300      	movhi	r3, #0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	e019      	b.n	8002582 <HAL_ADC_ConfigChannel+0x4a2>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002556:	fa93 f3a3 	rbit	r3, r3
 800255a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800255c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800255e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002566:	2320      	movs	r3, #32
 8002568:	e003      	b.n	8002572 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800256a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	b2db      	uxtb	r3, r3
 8002572:	3301      	adds	r3, #1
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	2b09      	cmp	r3, #9
 800257a:	bf94      	ite	ls
 800257c:	2301      	movls	r3, #1
 800257e:	2300      	movhi	r3, #0
 8002580:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002582:	2b00      	cmp	r3, #0
 8002584:	d079      	beq.n	800267a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258e:	2b00      	cmp	r3, #0
 8002590:	d107      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x4c2>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	0e9b      	lsrs	r3, r3, #26
 8002598:	3301      	adds	r3, #1
 800259a:	069b      	lsls	r3, r3, #26
 800259c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025a0:	e015      	b.n	80025ce <HAL_ADC_ConfigChannel+0x4ee>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80025b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80025b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80025ba:	2320      	movs	r3, #32
 80025bc:	e003      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80025be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	3301      	adds	r3, #1
 80025c8:	069b      	lsls	r3, r3, #26
 80025ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x50e>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	0e9b      	lsrs	r3, r3, #26
 80025e0:	3301      	adds	r3, #1
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	e017      	b.n	800261e <HAL_ADC_ConfigChannel+0x53e>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80025fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002606:	2320      	movs	r3, #32
 8002608:	e003      	b.n	8002612 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800260a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	3301      	adds	r3, #1
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	ea42 0103 	orr.w	r1, r2, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10a      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x564>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	0e9b      	lsrs	r3, r3, #26
 8002634:	3301      	adds	r3, #1
 8002636:	f003 021f 	and.w	r2, r3, #31
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	051b      	lsls	r3, r3, #20
 8002642:	e018      	b.n	8002676 <HAL_ADC_ConfigChannel+0x596>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264c:	fa93 f3a3 	rbit	r3, r3
 8002650:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002654:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800265c:	2320      	movs	r3, #32
 800265e:	e003      	b.n	8002668 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	3301      	adds	r3, #1
 800266a:	f003 021f 	and.w	r2, r3, #31
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002676:	430b      	orrs	r3, r1
 8002678:	e081      	b.n	800277e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002682:	2b00      	cmp	r3, #0
 8002684:	d107      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x5b6>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0e9b      	lsrs	r3, r3, #26
 800268c:	3301      	adds	r3, #1
 800268e:	069b      	lsls	r3, r3, #26
 8002690:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002694:	e015      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x5e2>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80026a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80026ae:	2320      	movs	r3, #32
 80026b0:	e003      	b.n	80026ba <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80026b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	069b      	lsls	r3, r3, #26
 80026be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x602>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	0e9b      	lsrs	r3, r3, #26
 80026d4:	3301      	adds	r3, #1
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	2101      	movs	r1, #1
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	e017      	b.n	8002712 <HAL_ADC_ConfigChannel+0x632>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	61bb      	str	r3, [r7, #24]
  return result;
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80026fa:	2320      	movs	r3, #32
 80026fc:	e003      	b.n	8002706 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	3301      	adds	r3, #1
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	ea42 0103 	orr.w	r1, r2, r3
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10d      	bne.n	800273e <HAL_ADC_ConfigChannel+0x65e>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	0e9b      	lsrs	r3, r3, #26
 8002728:	3301      	adds	r3, #1
 800272a:	f003 021f 	and.w	r2, r3, #31
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	3b1e      	subs	r3, #30
 8002736:	051b      	lsls	r3, r3, #20
 8002738:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800273c:	e01e      	b.n	800277c <HAL_ADC_ConfigChannel+0x69c>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	60fb      	str	r3, [r7, #12]
  return result;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d104      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002756:	2320      	movs	r3, #32
 8002758:	e006      	b.n	8002768 <HAL_ADC_ConfigChannel+0x688>
 800275a:	bf00      	nop
 800275c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	3301      	adds	r3, #1
 800276a:	f003 021f 	and.w	r2, r3, #31
 800276e:	4613      	mov	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4413      	add	r3, r2
 8002774:	3b1e      	subs	r3, #30
 8002776:	051b      	lsls	r3, r3, #20
 8002778:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800277c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002782:	4619      	mov	r1, r3
 8002784:	f7ff f8a0 	bl	80018c8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b44      	ldr	r3, [pc, #272]	; (80028a0 <HAL_ADC_ConfigChannel+0x7c0>)
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d07a      	beq.n	800288a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002794:	4843      	ldr	r0, [pc, #268]	; (80028a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002796:	f7fe fff5 	bl	8001784 <LL_ADC_GetCommonPathInternalCh>
 800279a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a41      	ldr	r2, [pc, #260]	; (80028a8 <HAL_ADC_ConfigChannel+0x7c8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d12c      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d126      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a3c      	ldr	r2, [pc, #240]	; (80028ac <HAL_ADC_ConfigChannel+0x7cc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d004      	beq.n	80027c8 <HAL_ADC_ConfigChannel+0x6e8>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a3b      	ldr	r2, [pc, #236]	; (80028b0 <HAL_ADC_ConfigChannel+0x7d0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d15d      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027d0:	4619      	mov	r1, r3
 80027d2:	4834      	ldr	r0, [pc, #208]	; (80028a4 <HAL_ADC_ConfigChannel+0x7c4>)
 80027d4:	f7fe ffc3 	bl	800175e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027d8:	4b36      	ldr	r3, [pc, #216]	; (80028b4 <HAL_ADC_ConfigChannel+0x7d4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	099b      	lsrs	r3, r3, #6
 80027de:	4a36      	ldr	r2, [pc, #216]	; (80028b8 <HAL_ADC_ConfigChannel+0x7d8>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	099b      	lsrs	r3, r3, #6
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	4613      	mov	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027f2:	e002      	b.n	80027fa <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f9      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002800:	e040      	b.n	8002884 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a2d      	ldr	r2, [pc, #180]	; (80028bc <HAL_ADC_ConfigChannel+0x7dc>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d118      	bne.n	800283e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800280c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d112      	bne.n	800283e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a23      	ldr	r2, [pc, #140]	; (80028ac <HAL_ADC_ConfigChannel+0x7cc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d004      	beq.n	800282c <HAL_ADC_ConfigChannel+0x74c>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a22      	ldr	r2, [pc, #136]	; (80028b0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d12d      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800282c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002830:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002834:	4619      	mov	r1, r3
 8002836:	481b      	ldr	r0, [pc, #108]	; (80028a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002838:	f7fe ff91 	bl	800175e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800283c:	e024      	b.n	8002888 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d120      	bne.n	800288a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002848:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800284c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d11a      	bne.n	800288a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a14      	ldr	r2, [pc, #80]	; (80028ac <HAL_ADC_ConfigChannel+0x7cc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d115      	bne.n	800288a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800285e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002862:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002866:	4619      	mov	r1, r3
 8002868:	480e      	ldr	r0, [pc, #56]	; (80028a4 <HAL_ADC_ConfigChannel+0x7c4>)
 800286a:	f7fe ff78 	bl	800175e <LL_ADC_SetCommonPathInternalCh>
 800286e:	e00c      	b.n	800288a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002874:	f043 0220 	orr.w	r2, r3, #32
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002882:	e002      	b.n	800288a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002884:	bf00      	nop
 8002886:	e000      	b.n	800288a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002888:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002892:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002896:	4618      	mov	r0, r3
 8002898:	37d8      	adds	r7, #216	; 0xd8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	80080000 	.word	0x80080000
 80028a4:	50040300 	.word	0x50040300
 80028a8:	c7520000 	.word	0xc7520000
 80028ac:	50040000 	.word	0x50040000
 80028b0:	50040200 	.word	0x50040200
 80028b4:	20000000 	.word	0x20000000
 80028b8:	053e2d63 	.word	0x053e2d63
 80028bc:	cb840000 	.word	0xcb840000
 80028c0:	80000001 	.word	0x80000001

080028c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff f8c5 	bl	8001a64 <LL_ADC_IsEnabled>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d169      	bne.n	80029b4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	4b36      	ldr	r3, [pc, #216]	; (80029c0 <ADC_Enable+0xfc>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00d      	beq.n	800290a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f2:	f043 0210 	orr.w	r2, r3, #16
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fe:	f043 0201 	orr.w	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e055      	b.n	80029b6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff f894 	bl	8001a3c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002914:	482b      	ldr	r0, [pc, #172]	; (80029c4 <ADC_Enable+0x100>)
 8002916:	f7fe ff35 	bl	8001784 <LL_ADC_GetCommonPathInternalCh>
 800291a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800291c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002920:	2b00      	cmp	r3, #0
 8002922:	d013      	beq.n	800294c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002924:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <ADC_Enable+0x104>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	099b      	lsrs	r3, r3, #6
 800292a:	4a28      	ldr	r2, [pc, #160]	; (80029cc <ADC_Enable+0x108>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	099b      	lsrs	r3, r3, #6
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800293e:	e002      	b.n	8002946 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	3b01      	subs	r3, #1
 8002944:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1f9      	bne.n	8002940 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800294c:	f7fe fec4 	bl	80016d8 <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002952:	e028      	b.n	80029a6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff f883 	bl	8001a64 <LL_ADC_IsEnabled>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d104      	bne.n	800296e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff f867 	bl	8001a3c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800296e:	f7fe feb3 	bl	80016d8 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d914      	bls.n	80029a6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b01      	cmp	r3, #1
 8002988:	d00d      	beq.n	80029a6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298e:	f043 0210 	orr.w	r2, r3, #16
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299a:	f043 0201 	orr.w	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e007      	b.n	80029b6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d1cf      	bne.n	8002954 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	8000003f 	.word	0x8000003f
 80029c4:	50040300 	.word	0x50040300
 80029c8:	20000000 	.word	0x20000000
 80029cc:	053e2d63 	.word	0x053e2d63

080029d0 <LL_ADC_IsEnabled>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <LL_ADC_IsEnabled+0x18>
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <LL_ADC_IsEnabled+0x1a>
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d101      	bne.n	8002a0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002a1c:	b590      	push	{r4, r7, lr}
 8002a1e:	b09f      	sub	sp, #124	; 0x7c
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e093      	b.n	8002b62 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002a42:	2300      	movs	r3, #0
 8002a44:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002a46:	2300      	movs	r3, #0
 8002a48:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a47      	ldr	r2, [pc, #284]	; (8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d102      	bne.n	8002a5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a54:	4b46      	ldr	r3, [pc, #280]	; (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	e001      	b.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10b      	bne.n	8002a7c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a68:	f043 0220 	orr.w	r2, r3, #32
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e072      	b.n	8002b62 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff ffb9 	bl	80029f6 <LL_ADC_REG_IsConversionOngoing>
 8002a84:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff ffb3 	bl	80029f6 <LL_ADC_REG_IsConversionOngoing>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d154      	bne.n	8002b40 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002a96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d151      	bne.n	8002b40 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a9c:	4b35      	ldr	r3, [pc, #212]	; (8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002a9e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d02c      	beq.n	8002b02 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aba:	035b      	lsls	r3, r3, #13
 8002abc:	430b      	orrs	r3, r1
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ac4:	4829      	ldr	r0, [pc, #164]	; (8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ac6:	f7ff ff83 	bl	80029d0 <LL_ADC_IsEnabled>
 8002aca:	4604      	mov	r4, r0
 8002acc:	4828      	ldr	r0, [pc, #160]	; (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ace:	f7ff ff7f 	bl	80029d0 <LL_ADC_IsEnabled>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	431c      	orrs	r4, r3
 8002ad6:	4828      	ldr	r0, [pc, #160]	; (8002b78 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002ad8:	f7ff ff7a 	bl	80029d0 <LL_ADC_IsEnabled>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4323      	orrs	r3, r4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d137      	bne.n	8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002aec:	f023 030f 	bic.w	r3, r3, #15
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	6811      	ldr	r1, [r2, #0]
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	6892      	ldr	r2, [r2, #8]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	431a      	orrs	r2, r3
 8002afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002afe:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b00:	e028      	b.n	8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b0c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b0e:	4817      	ldr	r0, [pc, #92]	; (8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b10:	f7ff ff5e 	bl	80029d0 <LL_ADC_IsEnabled>
 8002b14:	4604      	mov	r4, r0
 8002b16:	4816      	ldr	r0, [pc, #88]	; (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b18:	f7ff ff5a 	bl	80029d0 <LL_ADC_IsEnabled>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	431c      	orrs	r4, r3
 8002b20:	4815      	ldr	r0, [pc, #84]	; (8002b78 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002b22:	f7ff ff55 	bl	80029d0 <LL_ADC_IsEnabled>
 8002b26:	4603      	mov	r3, r0
 8002b28:	4323      	orrs	r3, r4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d112      	bne.n	8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b36:	f023 030f 	bic.w	r3, r3, #15
 8002b3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b3c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b3e:	e009      	b.n	8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	f043 0220 	orr.w	r2, r3, #32
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002b52:	e000      	b.n	8002b56 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b5e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	377c      	adds	r7, #124	; 0x7c
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd90      	pop	{r4, r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	50040000 	.word	0x50040000
 8002b70:	50040100 	.word	0x50040100
 8002b74:	50040300 	.word	0x50040300
 8002b78:	50040200 	.word	0x50040200

08002b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bae:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	60d3      	str	r3, [r2, #12]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <__NVIC_GetPriorityGrouping+0x18>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	f003 0307 	and.w	r3, r3, #7
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	6039      	str	r1, [r7, #0]
 8002bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	db0a      	blt.n	8002c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	490c      	ldr	r1, [pc, #48]	; (8002c2c <__NVIC_SetPriority+0x4c>)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	0112      	lsls	r2, r2, #4
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	440b      	add	r3, r1
 8002c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c08:	e00a      	b.n	8002c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	4908      	ldr	r1, [pc, #32]	; (8002c30 <__NVIC_SetPriority+0x50>)
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	3b04      	subs	r3, #4
 8002c18:	0112      	lsls	r2, r2, #4
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	761a      	strb	r2, [r3, #24]
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000e100 	.word	0xe000e100
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b089      	sub	sp, #36	; 0x24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f1c3 0307 	rsb	r3, r3, #7
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	bf28      	it	cs
 8002c52:	2304      	movcs	r3, #4
 8002c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	d902      	bls.n	8002c64 <NVIC_EncodePriority+0x30>
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3b03      	subs	r3, #3
 8002c62:	e000      	b.n	8002c66 <NVIC_EncodePriority+0x32>
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c68:	f04f 32ff 	mov.w	r2, #4294967295
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43da      	mvns	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	401a      	ands	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	fa01 f303 	lsl.w	r3, r1, r3
 8002c86:	43d9      	mvns	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c8c:	4313      	orrs	r3, r2
         );
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3724      	adds	r7, #36	; 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cac:	d301      	bcc.n	8002cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e00f      	b.n	8002cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <SysTick_Config+0x40>)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cba:	210f      	movs	r1, #15
 8002cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc0:	f7ff ff8e 	bl	8002be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <SysTick_Config+0x40>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cca:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <SysTick_Config+0x40>)
 8002ccc:	2207      	movs	r2, #7
 8002cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	e000e010 	.word	0xe000e010

08002ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ff47 	bl	8002b7c <__NVIC_SetPriorityGrouping>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d08:	f7ff ff5c 	bl	8002bc4 <__NVIC_GetPriorityGrouping>
 8002d0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	6978      	ldr	r0, [r7, #20]
 8002d14:	f7ff ff8e 	bl	8002c34 <NVIC_EncodePriority>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff5d 	bl	8002be0 <__NVIC_SetPriority>
}
 8002d26:	bf00      	nop
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff ffb0 	bl	8002c9c <SysTick_Config>
 8002d3c:	4603      	mov	r3, r0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d56:	e17f      	b.n	8003058 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	fa01 f303 	lsl.w	r3, r1, r3
 8002d64:	4013      	ands	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 8171 	beq.w	8003052 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d005      	beq.n	8002d88 <HAL_GPIO_Init+0x40>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d130      	bne.n	8002dea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	2203      	movs	r2, #3
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	091b      	lsrs	r3, r3, #4
 8002dd4:	f003 0201 	and.w	r2, r3, #1
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d118      	bne.n	8002e28 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	08db      	lsrs	r3, r3, #3
 8002e12:	f003 0201 	and.w	r2, r3, #1
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d017      	beq.n	8002e64 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d123      	bne.n	8002eb8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	08da      	lsrs	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3208      	adds	r2, #8
 8002e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	220f      	movs	r2, #15
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3208      	adds	r2, #8
 8002eb2:	6939      	ldr	r1, [r7, #16]
 8002eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0203 	and.w	r2, r3, #3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80ac 	beq.w	8003052 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	4b5f      	ldr	r3, [pc, #380]	; (8003078 <HAL_GPIO_Init+0x330>)
 8002efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efe:	4a5e      	ldr	r2, [pc, #376]	; (8003078 <HAL_GPIO_Init+0x330>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6613      	str	r3, [r2, #96]	; 0x60
 8002f06:	4b5c      	ldr	r3, [pc, #368]	; (8003078 <HAL_GPIO_Init+0x330>)
 8002f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f12:	4a5a      	ldr	r2, [pc, #360]	; (800307c <HAL_GPIO_Init+0x334>)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	3302      	adds	r3, #2
 8002f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	220f      	movs	r2, #15
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4013      	ands	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f3c:	d025      	beq.n	8002f8a <HAL_GPIO_Init+0x242>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4f      	ldr	r2, [pc, #316]	; (8003080 <HAL_GPIO_Init+0x338>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d01f      	beq.n	8002f86 <HAL_GPIO_Init+0x23e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4e      	ldr	r2, [pc, #312]	; (8003084 <HAL_GPIO_Init+0x33c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d019      	beq.n	8002f82 <HAL_GPIO_Init+0x23a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a4d      	ldr	r2, [pc, #308]	; (8003088 <HAL_GPIO_Init+0x340>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d013      	beq.n	8002f7e <HAL_GPIO_Init+0x236>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4c      	ldr	r2, [pc, #304]	; (800308c <HAL_GPIO_Init+0x344>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00d      	beq.n	8002f7a <HAL_GPIO_Init+0x232>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a4b      	ldr	r2, [pc, #300]	; (8003090 <HAL_GPIO_Init+0x348>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d007      	beq.n	8002f76 <HAL_GPIO_Init+0x22e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a4a      	ldr	r2, [pc, #296]	; (8003094 <HAL_GPIO_Init+0x34c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d101      	bne.n	8002f72 <HAL_GPIO_Init+0x22a>
 8002f6e:	2306      	movs	r3, #6
 8002f70:	e00c      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f72:	2307      	movs	r3, #7
 8002f74:	e00a      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f76:	2305      	movs	r3, #5
 8002f78:	e008      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	e006      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e004      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e002      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	f002 0203 	and.w	r2, r2, #3
 8002f92:	0092      	lsls	r2, r2, #2
 8002f94:	4093      	lsls	r3, r2
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f9c:	4937      	ldr	r1, [pc, #220]	; (800307c <HAL_GPIO_Init+0x334>)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	089b      	lsrs	r3, r3, #2
 8002fa2:	3302      	adds	r3, #2
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002faa:	4b3b      	ldr	r3, [pc, #236]	; (8003098 <HAL_GPIO_Init+0x350>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fce:	4a32      	ldr	r2, [pc, #200]	; (8003098 <HAL_GPIO_Init+0x350>)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fd4:	4b30      	ldr	r3, [pc, #192]	; (8003098 <HAL_GPIO_Init+0x350>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ff8:	4a27      	ldr	r2, [pc, #156]	; (8003098 <HAL_GPIO_Init+0x350>)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ffe:	4b26      	ldr	r3, [pc, #152]	; (8003098 <HAL_GPIO_Init+0x350>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	43db      	mvns	r3, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003022:	4a1d      	ldr	r2, [pc, #116]	; (8003098 <HAL_GPIO_Init+0x350>)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_GPIO_Init+0x350>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	43db      	mvns	r3, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800304c:	4a12      	ldr	r2, [pc, #72]	; (8003098 <HAL_GPIO_Init+0x350>)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	3301      	adds	r3, #1
 8003056:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	fa22 f303 	lsr.w	r3, r2, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	f47f ae78 	bne.w	8002d58 <HAL_GPIO_Init+0x10>
  }
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000
 800307c:	40010000 	.word	0x40010000
 8003080:	48000400 	.word	0x48000400
 8003084:	48000800 	.word	0x48000800
 8003088:	48000c00 	.word	0x48000c00
 800308c:	48001000 	.word	0x48001000
 8003090:	48001400 	.word	0x48001400
 8003094:	48001800 	.word	0x48001800
 8003098:	40010400 	.word	0x40010400

0800309c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
 80030a8:	4613      	mov	r3, r2
 80030aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030ac:	787b      	ldrb	r3, [r7, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030b8:	e002      	b.n	80030c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030ba:	887a      	ldrh	r2, [r7, #2]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030d0:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80030d8:	4618      	mov	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40007000 	.word	0x40007000

080030e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f6:	d130      	bne.n	800315a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030f8:	4b23      	ldr	r3, [pc, #140]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003104:	d038      	beq.n	8003178 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003106:	4b20      	ldr	r3, [pc, #128]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800310e:	4a1e      	ldr	r2, [pc, #120]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003110:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003114:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003116:	4b1d      	ldr	r3, [pc, #116]	; (800318c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2232      	movs	r2, #50	; 0x32
 800311c:	fb02 f303 	mul.w	r3, r2, r3
 8003120:	4a1b      	ldr	r2, [pc, #108]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	0c9b      	lsrs	r3, r3, #18
 8003128:	3301      	adds	r3, #1
 800312a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800312c:	e002      	b.n	8003134 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	3b01      	subs	r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003134:	4b14      	ldr	r3, [pc, #80]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003140:	d102      	bne.n	8003148 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f2      	bne.n	800312e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003148:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003154:	d110      	bne.n	8003178 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e00f      	b.n	800317a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800315a:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003166:	d007      	beq.n	8003178 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003168:	4b07      	ldr	r3, [pc, #28]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003170:	4a05      	ldr	r2, [pc, #20]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003176:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40007000 	.word	0x40007000
 800318c:	20000000 	.word	0x20000000
 8003190:	431bde83 	.word	0x431bde83

08003194 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e3ca      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031a6:	4b97      	ldr	r3, [pc, #604]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031b0:	4b94      	ldr	r3, [pc, #592]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0303 	and.w	r3, r3, #3
 80031b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80e4 	beq.w	8003390 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <HAL_RCC_OscConfig+0x4a>
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	2b0c      	cmp	r3, #12
 80031d2:	f040 808b 	bne.w	80032ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	f040 8087 	bne.w	80032ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031de:	4b89      	ldr	r3, [pc, #548]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_RCC_OscConfig+0x62>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e3a2      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1a      	ldr	r2, [r3, #32]
 80031fa:	4b82      	ldr	r3, [pc, #520]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d004      	beq.n	8003210 <HAL_RCC_OscConfig+0x7c>
 8003206:	4b7f      	ldr	r3, [pc, #508]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800320e:	e005      	b.n	800321c <HAL_RCC_OscConfig+0x88>
 8003210:	4b7c      	ldr	r3, [pc, #496]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800321c:	4293      	cmp	r3, r2
 800321e:	d223      	bcs.n	8003268 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fd55 	bl	8003cd4 <RCC_SetFlashLatencyFromMSIRange>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e383      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003234:	4b73      	ldr	r3, [pc, #460]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a72      	ldr	r2, [pc, #456]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800323a:	f043 0308 	orr.w	r3, r3, #8
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	4b70      	ldr	r3, [pc, #448]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	496d      	ldr	r1, [pc, #436]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003252:	4b6c      	ldr	r3, [pc, #432]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	4968      	ldr	r1, [pc, #416]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003262:	4313      	orrs	r3, r2
 8003264:	604b      	str	r3, [r1, #4]
 8003266:	e025      	b.n	80032b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003268:	4b66      	ldr	r3, [pc, #408]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a65      	ldr	r2, [pc, #404]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800326e:	f043 0308 	orr.w	r3, r3, #8
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b63      	ldr	r3, [pc, #396]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	4960      	ldr	r1, [pc, #384]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003286:	4b5f      	ldr	r3, [pc, #380]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	495b      	ldr	r1, [pc, #364]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003296:	4313      	orrs	r3, r2
 8003298:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d109      	bne.n	80032b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fd15 	bl	8003cd4 <RCC_SetFlashLatencyFromMSIRange>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e343      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032b4:	f000 fc4a 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b52      	ldr	r3, [pc, #328]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	4950      	ldr	r1, [pc, #320]	; (8003408 <HAL_RCC_OscConfig+0x274>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
 80032d0:	4a4e      	ldr	r2, [pc, #312]	; (800340c <HAL_RCC_OscConfig+0x278>)
 80032d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032d4:	4b4e      	ldr	r3, [pc, #312]	; (8003410 <HAL_RCC_OscConfig+0x27c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fe f9ad 	bl	8001638 <HAL_InitTick>
 80032de:	4603      	mov	r3, r0
 80032e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d052      	beq.n	800338e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	e327      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d032      	beq.n	800335a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032f4:	4b43      	ldr	r3, [pc, #268]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a42      	ldr	r2, [pc, #264]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003300:	f7fe f9ea 	bl	80016d8 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003308:	f7fe f9e6 	bl	80016d8 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e310      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800331a:	4b3a      	ldr	r3, [pc, #232]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003326:	4b37      	ldr	r3, [pc, #220]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a36      	ldr	r2, [pc, #216]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800332c:	f043 0308 	orr.w	r3, r3, #8
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	4b34      	ldr	r3, [pc, #208]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	4931      	ldr	r1, [pc, #196]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003340:	4313      	orrs	r3, r2
 8003342:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003344:	4b2f      	ldr	r3, [pc, #188]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	492c      	ldr	r1, [pc, #176]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
 8003358:	e01a      	b.n	8003390 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800335a:	4b2a      	ldr	r3, [pc, #168]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a29      	ldr	r2, [pc, #164]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003366:	f7fe f9b7 	bl	80016d8 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800336e:	f7fe f9b3 	bl	80016d8 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e2dd      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003380:	4b20      	ldr	r3, [pc, #128]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f0      	bne.n	800336e <HAL_RCC_OscConfig+0x1da>
 800338c:	e000      	b.n	8003390 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800338e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d074      	beq.n	8003486 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d005      	beq.n	80033ae <HAL_RCC_OscConfig+0x21a>
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	2b0c      	cmp	r3, #12
 80033a6:	d10e      	bne.n	80033c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	d10b      	bne.n	80033c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ae:	4b15      	ldr	r3, [pc, #84]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d064      	beq.n	8003484 <HAL_RCC_OscConfig+0x2f0>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d160      	bne.n	8003484 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e2ba      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ce:	d106      	bne.n	80033de <HAL_RCC_OscConfig+0x24a>
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a0b      	ldr	r2, [pc, #44]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80033d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	e026      	b.n	800342c <HAL_RCC_OscConfig+0x298>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033e6:	d115      	bne.n	8003414 <HAL_RCC_OscConfig+0x280>
 80033e8:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a05      	ldr	r2, [pc, #20]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80033ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4b03      	ldr	r3, [pc, #12]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a02      	ldr	r2, [pc, #8]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80033fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	e014      	b.n	800342c <HAL_RCC_OscConfig+0x298>
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
 8003408:	08007c2c 	.word	0x08007c2c
 800340c:	20000000 	.word	0x20000000
 8003410:	20000004 	.word	0x20000004
 8003414:	4ba0      	ldr	r3, [pc, #640]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a9f      	ldr	r2, [pc, #636]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 800341a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	4b9d      	ldr	r3, [pc, #628]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a9c      	ldr	r2, [pc, #624]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 8003426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d013      	beq.n	800345c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fe f950 	bl	80016d8 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343c:	f7fe f94c 	bl	80016d8 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	; 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e276      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800344e:	4b92      	ldr	r3, [pc, #584]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x2a8>
 800345a:	e014      	b.n	8003486 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe f93c 	bl	80016d8 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003464:	f7fe f938 	bl	80016d8 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	; 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e262      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003476:	4b88      	ldr	r3, [pc, #544]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x2d0>
 8003482:	e000      	b.n	8003486 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d060      	beq.n	8003554 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	2b04      	cmp	r3, #4
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_OscConfig+0x310>
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2b0c      	cmp	r3, #12
 800349c:	d119      	bne.n	80034d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d116      	bne.n	80034d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034a4:	4b7c      	ldr	r3, [pc, #496]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_OscConfig+0x328>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e23f      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034bc:	4b76      	ldr	r3, [pc, #472]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	061b      	lsls	r3, r3, #24
 80034ca:	4973      	ldr	r1, [pc, #460]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034d0:	e040      	b.n	8003554 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d023      	beq.n	8003522 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034da:	4b6f      	ldr	r3, [pc, #444]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a6e      	ldr	r2, [pc, #440]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 80034e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7fe f8f7 	bl	80016d8 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ee:	f7fe f8f3 	bl	80016d8 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e21d      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003500:	4b65      	ldr	r3, [pc, #404]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350c:	4b62      	ldr	r3, [pc, #392]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	061b      	lsls	r3, r3, #24
 800351a:	495f      	ldr	r1, [pc, #380]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
 8003520:	e018      	b.n	8003554 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003522:	4b5d      	ldr	r3, [pc, #372]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a5c      	ldr	r2, [pc, #368]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 8003528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800352c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352e:	f7fe f8d3 	bl	80016d8 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003536:	f7fe f8cf 	bl	80016d8 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e1f9      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003548:	4b53      	ldr	r3, [pc, #332]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f0      	bne.n	8003536 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b00      	cmp	r3, #0
 800355e:	d03c      	beq.n	80035da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d01c      	beq.n	80035a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003568:	4b4b      	ldr	r3, [pc, #300]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 800356a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800356e:	4a4a      	ldr	r2, [pc, #296]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003578:	f7fe f8ae 	bl	80016d8 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003580:	f7fe f8aa 	bl	80016d8 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e1d4      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003592:	4b41      	ldr	r3, [pc, #260]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 8003594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0ef      	beq.n	8003580 <HAL_RCC_OscConfig+0x3ec>
 80035a0:	e01b      	b.n	80035da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a2:	4b3d      	ldr	r3, [pc, #244]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 80035a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a8:	4a3b      	ldr	r2, [pc, #236]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 80035aa:	f023 0301 	bic.w	r3, r3, #1
 80035ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b2:	f7fe f891 	bl	80016d8 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ba:	f7fe f88d 	bl	80016d8 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e1b7      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035cc:	4b32      	ldr	r3, [pc, #200]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 80035ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1ef      	bne.n	80035ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 80a6 	beq.w	8003734 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e8:	2300      	movs	r3, #0
 80035ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035ec:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 80035ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10d      	bne.n	8003614 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f8:	4b27      	ldr	r3, [pc, #156]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 80035fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fc:	4a26      	ldr	r2, [pc, #152]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 80035fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003602:	6593      	str	r3, [r2, #88]	; 0x58
 8003604:	4b24      	ldr	r3, [pc, #144]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 8003606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003610:	2301      	movs	r3, #1
 8003612:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003614:	4b21      	ldr	r3, [pc, #132]	; (800369c <HAL_RCC_OscConfig+0x508>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361c:	2b00      	cmp	r3, #0
 800361e:	d118      	bne.n	8003652 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003620:	4b1e      	ldr	r3, [pc, #120]	; (800369c <HAL_RCC_OscConfig+0x508>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1d      	ldr	r2, [pc, #116]	; (800369c <HAL_RCC_OscConfig+0x508>)
 8003626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362c:	f7fe f854 	bl	80016d8 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003634:	f7fe f850 	bl	80016d8 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e17a      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003646:	4b15      	ldr	r3, [pc, #84]	; (800369c <HAL_RCC_OscConfig+0x508>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d108      	bne.n	800366c <HAL_RCC_OscConfig+0x4d8>
 800365a:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 800365c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003660:	4a0d      	ldr	r2, [pc, #52]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800366a:	e029      	b.n	80036c0 <HAL_RCC_OscConfig+0x52c>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b05      	cmp	r3, #5
 8003672:	d115      	bne.n	80036a0 <HAL_RCC_OscConfig+0x50c>
 8003674:	4b08      	ldr	r3, [pc, #32]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	4a07      	ldr	r2, [pc, #28]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 800367c:	f043 0304 	orr.w	r3, r3, #4
 8003680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003684:	4b04      	ldr	r3, [pc, #16]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368a:	4a03      	ldr	r2, [pc, #12]	; (8003698 <HAL_RCC_OscConfig+0x504>)
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003694:	e014      	b.n	80036c0 <HAL_RCC_OscConfig+0x52c>
 8003696:	bf00      	nop
 8003698:	40021000 	.word	0x40021000
 800369c:	40007000 	.word	0x40007000
 80036a0:	4b9c      	ldr	r3, [pc, #624]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 80036a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a6:	4a9b      	ldr	r2, [pc, #620]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036b0:	4b98      	ldr	r3, [pc, #608]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	4a97      	ldr	r2, [pc, #604]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 80036b8:	f023 0304 	bic.w	r3, r3, #4
 80036bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d016      	beq.n	80036f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c8:	f7fe f806 	bl	80016d8 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ce:	e00a      	b.n	80036e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d0:	f7fe f802 	bl	80016d8 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	; 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e12a      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e6:	4b8b      	ldr	r3, [pc, #556]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ed      	beq.n	80036d0 <HAL_RCC_OscConfig+0x53c>
 80036f4:	e015      	b.n	8003722 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f6:	f7fd ffef 	bl	80016d8 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036fc:	e00a      	b.n	8003714 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fe:	f7fd ffeb 	bl	80016d8 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	f241 3288 	movw	r2, #5000	; 0x1388
 800370c:	4293      	cmp	r3, r2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e113      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003714:	4b7f      	ldr	r3, [pc, #508]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1ed      	bne.n	80036fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003722:	7ffb      	ldrb	r3, [r7, #31]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d105      	bne.n	8003734 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003728:	4b7a      	ldr	r3, [pc, #488]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 800372a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372c:	4a79      	ldr	r2, [pc, #484]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 800372e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003732:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80fe 	beq.w	800393a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	2b02      	cmp	r3, #2
 8003744:	f040 80d0 	bne.w	80038e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003748:	4b72      	ldr	r3, [pc, #456]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f003 0203 	and.w	r2, r3, #3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	429a      	cmp	r2, r3
 800375a:	d130      	bne.n	80037be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	3b01      	subs	r3, #1
 8003768:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800376a:	429a      	cmp	r2, r3
 800376c:	d127      	bne.n	80037be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003778:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800377a:	429a      	cmp	r2, r3
 800377c:	d11f      	bne.n	80037be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003788:	2a07      	cmp	r2, #7
 800378a:	bf14      	ite	ne
 800378c:	2201      	movne	r2, #1
 800378e:	2200      	moveq	r2, #0
 8003790:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003792:	4293      	cmp	r3, r2
 8003794:	d113      	bne.n	80037be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a0:	085b      	lsrs	r3, r3, #1
 80037a2:	3b01      	subs	r3, #1
 80037a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d109      	bne.n	80037be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	085b      	lsrs	r3, r3, #1
 80037b6:	3b01      	subs	r3, #1
 80037b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d06e      	beq.n	800389c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	2b0c      	cmp	r3, #12
 80037c2:	d069      	beq.n	8003898 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037c4:	4b53      	ldr	r3, [pc, #332]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d105      	bne.n	80037dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037d0:	4b50      	ldr	r3, [pc, #320]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0ad      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037e0:	4b4c      	ldr	r3, [pc, #304]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a4b      	ldr	r2, [pc, #300]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 80037e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037ec:	f7fd ff74 	bl	80016d8 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f4:	f7fd ff70 	bl	80016d8 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e09a      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003806:	4b43      	ldr	r3, [pc, #268]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003812:	4b40      	ldr	r3, [pc, #256]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	4b40      	ldr	r3, [pc, #256]	; (8003918 <HAL_RCC_OscConfig+0x784>)
 8003818:	4013      	ands	r3, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003822:	3a01      	subs	r2, #1
 8003824:	0112      	lsls	r2, r2, #4
 8003826:	4311      	orrs	r1, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800382c:	0212      	lsls	r2, r2, #8
 800382e:	4311      	orrs	r1, r2
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003834:	0852      	lsrs	r2, r2, #1
 8003836:	3a01      	subs	r2, #1
 8003838:	0552      	lsls	r2, r2, #21
 800383a:	4311      	orrs	r1, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003840:	0852      	lsrs	r2, r2, #1
 8003842:	3a01      	subs	r2, #1
 8003844:	0652      	lsls	r2, r2, #25
 8003846:	4311      	orrs	r1, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800384c:	0912      	lsrs	r2, r2, #4
 800384e:	0452      	lsls	r2, r2, #17
 8003850:	430a      	orrs	r2, r1
 8003852:	4930      	ldr	r1, [pc, #192]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 8003854:	4313      	orrs	r3, r2
 8003856:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003858:	4b2e      	ldr	r3, [pc, #184]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a2d      	ldr	r2, [pc, #180]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 800385e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003862:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003864:	4b2b      	ldr	r3, [pc, #172]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4a2a      	ldr	r2, [pc, #168]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 800386a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800386e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003870:	f7fd ff32 	bl	80016d8 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003878:	f7fd ff2e 	bl	80016d8 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e058      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800388a:	4b22      	ldr	r3, [pc, #136]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003896:	e050      	b.n	800393a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e04f      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800389c:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d148      	bne.n	800393a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038a8:	4b1a      	ldr	r3, [pc, #104]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a19      	ldr	r2, [pc, #100]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 80038ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038b4:	4b17      	ldr	r3, [pc, #92]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4a16      	ldr	r2, [pc, #88]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 80038ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038c0:	f7fd ff0a 	bl	80016d8 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c8:	f7fd ff06 	bl	80016d8 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e030      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038da:	4b0e      	ldr	r3, [pc, #56]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0x734>
 80038e6:	e028      	b.n	800393a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b0c      	cmp	r3, #12
 80038ec:	d023      	beq.n	8003936 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ee:	4b09      	ldr	r3, [pc, #36]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a08      	ldr	r2, [pc, #32]	; (8003914 <HAL_RCC_OscConfig+0x780>)
 80038f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fa:	f7fd feed 	bl	80016d8 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003900:	e00c      	b.n	800391c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003902:	f7fd fee9 	bl	80016d8 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d905      	bls.n	800391c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e013      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
 8003914:	40021000 	.word	0x40021000
 8003918:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_RCC_OscConfig+0x7b0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1ec      	bne.n	8003902 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_RCC_OscConfig+0x7b0>)
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	4905      	ldr	r1, [pc, #20]	; (8003944 <HAL_RCC_OscConfig+0x7b0>)
 800392e:	4b06      	ldr	r3, [pc, #24]	; (8003948 <HAL_RCC_OscConfig+0x7b4>)
 8003930:	4013      	ands	r3, r2
 8003932:	60cb      	str	r3, [r1, #12]
 8003934:	e001      	b.n	800393a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3720      	adds	r7, #32
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40021000 	.word	0x40021000
 8003948:	feeefffc 	.word	0xfeeefffc

0800394c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0e7      	b.n	8003b30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003960:	4b75      	ldr	r3, [pc, #468]	; (8003b38 <HAL_RCC_ClockConfig+0x1ec>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d910      	bls.n	8003990 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396e:	4b72      	ldr	r3, [pc, #456]	; (8003b38 <HAL_RCC_ClockConfig+0x1ec>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f023 0207 	bic.w	r2, r3, #7
 8003976:	4970      	ldr	r1, [pc, #448]	; (8003b38 <HAL_RCC_ClockConfig+0x1ec>)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	4313      	orrs	r3, r2
 800397c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800397e:	4b6e      	ldr	r3, [pc, #440]	; (8003b38 <HAL_RCC_ClockConfig+0x1ec>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d001      	beq.n	8003990 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0cf      	b.n	8003b30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d010      	beq.n	80039be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	4b66      	ldr	r3, [pc, #408]	; (8003b3c <HAL_RCC_ClockConfig+0x1f0>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d908      	bls.n	80039be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ac:	4b63      	ldr	r3, [pc, #396]	; (8003b3c <HAL_RCC_ClockConfig+0x1f0>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	4960      	ldr	r1, [pc, #384]	; (8003b3c <HAL_RCC_ClockConfig+0x1f0>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d04c      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d107      	bne.n	80039e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d2:	4b5a      	ldr	r3, [pc, #360]	; (8003b3c <HAL_RCC_ClockConfig+0x1f0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d121      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e0a6      	b.n	8003b30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d107      	bne.n	80039fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ea:	4b54      	ldr	r3, [pc, #336]	; (8003b3c <HAL_RCC_ClockConfig+0x1f0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d115      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e09a      	b.n	8003b30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d107      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a02:	4b4e      	ldr	r3, [pc, #312]	; (8003b3c <HAL_RCC_ClockConfig+0x1f0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e08e      	b.n	8003b30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a12:	4b4a      	ldr	r3, [pc, #296]	; (8003b3c <HAL_RCC_ClockConfig+0x1f0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e086      	b.n	8003b30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a22:	4b46      	ldr	r3, [pc, #280]	; (8003b3c <HAL_RCC_ClockConfig+0x1f0>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f023 0203 	bic.w	r2, r3, #3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	4943      	ldr	r1, [pc, #268]	; (8003b3c <HAL_RCC_ClockConfig+0x1f0>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a34:	f7fd fe50 	bl	80016d8 <HAL_GetTick>
 8003a38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3a:	e00a      	b.n	8003a52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a3c:	f7fd fe4c 	bl	80016d8 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e06e      	b.n	8003b30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a52:	4b3a      	ldr	r3, [pc, #232]	; (8003b3c <HAL_RCC_ClockConfig+0x1f0>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 020c 	and.w	r2, r3, #12
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d1eb      	bne.n	8003a3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d010      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	4b31      	ldr	r3, [pc, #196]	; (8003b3c <HAL_RCC_ClockConfig+0x1f0>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d208      	bcs.n	8003a92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a80:	4b2e      	ldr	r3, [pc, #184]	; (8003b3c <HAL_RCC_ClockConfig+0x1f0>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	492b      	ldr	r1, [pc, #172]	; (8003b3c <HAL_RCC_ClockConfig+0x1f0>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a92:	4b29      	ldr	r3, [pc, #164]	; (8003b38 <HAL_RCC_ClockConfig+0x1ec>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d210      	bcs.n	8003ac2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa0:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <HAL_RCC_ClockConfig+0x1ec>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f023 0207 	bic.w	r2, r3, #7
 8003aa8:	4923      	ldr	r1, [pc, #140]	; (8003b38 <HAL_RCC_ClockConfig+0x1ec>)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab0:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <HAL_RCC_ClockConfig+0x1ec>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d001      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e036      	b.n	8003b30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ace:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <HAL_RCC_ClockConfig+0x1f0>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	4918      	ldr	r1, [pc, #96]	; (8003b3c <HAL_RCC_ClockConfig+0x1f0>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d009      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aec:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <HAL_RCC_ClockConfig+0x1f0>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	4910      	ldr	r1, [pc, #64]	; (8003b3c <HAL_RCC_ClockConfig+0x1f0>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b00:	f000 f824 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8003b04:	4602      	mov	r2, r0
 8003b06:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <HAL_RCC_ClockConfig+0x1f0>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	091b      	lsrs	r3, r3, #4
 8003b0c:	f003 030f 	and.w	r3, r3, #15
 8003b10:	490b      	ldr	r1, [pc, #44]	; (8003b40 <HAL_RCC_ClockConfig+0x1f4>)
 8003b12:	5ccb      	ldrb	r3, [r1, r3]
 8003b14:	f003 031f 	and.w	r3, r3, #31
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1c:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <HAL_RCC_ClockConfig+0x1f8>)
 8003b1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b20:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <HAL_RCC_ClockConfig+0x1fc>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fd fd87 	bl	8001638 <HAL_InitTick>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b2e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40022000 	.word	0x40022000
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	08007c2c 	.word	0x08007c2c
 8003b44:	20000000 	.word	0x20000000
 8003b48:	20000004 	.word	0x20000004

08003b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b089      	sub	sp, #36	; 0x24
 8003b50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	2300      	movs	r3, #0
 8003b58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b5a:	4b3e      	ldr	r3, [pc, #248]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b64:	4b3b      	ldr	r3, [pc, #236]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d005      	beq.n	8003b80 <HAL_RCC_GetSysClockFreq+0x34>
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	2b0c      	cmp	r3, #12
 8003b78:	d121      	bne.n	8003bbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d11e      	bne.n	8003bbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b80:	4b34      	ldr	r3, [pc, #208]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d107      	bne.n	8003b9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b8c:	4b31      	ldr	r3, [pc, #196]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	e005      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b9c:	4b2d      	ldr	r3, [pc, #180]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ba8:	4a2b      	ldr	r2, [pc, #172]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10d      	bne.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bbc:	e00a      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d102      	bne.n	8003bca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bc4:	4b25      	ldr	r3, [pc, #148]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x110>)
 8003bc6:	61bb      	str	r3, [r7, #24]
 8003bc8:	e004      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d101      	bne.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bd0:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	2b0c      	cmp	r3, #12
 8003bd8:	d134      	bne.n	8003c44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bda:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d003      	beq.n	8003bf2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d003      	beq.n	8003bf8 <HAL_RCC_GetSysClockFreq+0xac>
 8003bf0:	e005      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003bf2:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x110>)
 8003bf4:	617b      	str	r3, [r7, #20]
      break;
 8003bf6:	e005      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003bf8:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bfa:	617b      	str	r3, [r7, #20]
      break;
 8003bfc:	e002      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	617b      	str	r3, [r7, #20]
      break;
 8003c02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c04:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	091b      	lsrs	r3, r3, #4
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	3301      	adds	r3, #1
 8003c10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c12:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	0a1b      	lsrs	r3, r3, #8
 8003c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	fb03 f202 	mul.w	r2, r3, r2
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	0e5b      	lsrs	r3, r3, #25
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	3301      	adds	r3, #1
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c44:	69bb      	ldr	r3, [r7, #24]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3724      	adds	r7, #36	; 0x24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40021000 	.word	0x40021000
 8003c58:	08007c44 	.word	0x08007c44
 8003c5c:	00f42400 	.word	0x00f42400
 8003c60:	007a1200 	.word	0x007a1200

08003c64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c68:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	20000000 	.word	0x20000000

08003c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c80:	f7ff fff0 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 8003c84:	4602      	mov	r2, r0
 8003c86:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	0a1b      	lsrs	r3, r3, #8
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	4904      	ldr	r1, [pc, #16]	; (8003ca4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c92:	5ccb      	ldrb	r3, [r1, r3]
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	08007c3c 	.word	0x08007c3c

08003ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cac:	f7ff ffda 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	0adb      	lsrs	r3, r3, #11
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	4904      	ldr	r1, [pc, #16]	; (8003cd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cbe:	5ccb      	ldrb	r3, [r1, r3]
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	08007c3c 	.word	0x08007c3c

08003cd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003cdc:	2300      	movs	r3, #0
 8003cde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ce0:	4b2a      	ldr	r3, [pc, #168]	; (8003d8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cec:	f7ff f9ee 	bl	80030cc <HAL_PWREx_GetVoltageRange>
 8003cf0:	6178      	str	r0, [r7, #20]
 8003cf2:	e014      	b.n	8003d1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cf4:	4b25      	ldr	r3, [pc, #148]	; (8003d8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf8:	4a24      	ldr	r2, [pc, #144]	; (8003d8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	6593      	str	r3, [r2, #88]	; 0x58
 8003d00:	4b22      	ldr	r3, [pc, #136]	; (8003d8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d0c:	f7ff f9de 	bl	80030cc <HAL_PWREx_GetVoltageRange>
 8003d10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d12:	4b1e      	ldr	r3, [pc, #120]	; (8003d8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d16:	4a1d      	ldr	r2, [pc, #116]	; (8003d8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d24:	d10b      	bne.n	8003d3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b80      	cmp	r3, #128	; 0x80
 8003d2a:	d919      	bls.n	8003d60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2ba0      	cmp	r3, #160	; 0xa0
 8003d30:	d902      	bls.n	8003d38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d32:	2302      	movs	r3, #2
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	e013      	b.n	8003d60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d38:	2301      	movs	r3, #1
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	e010      	b.n	8003d60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b80      	cmp	r3, #128	; 0x80
 8003d42:	d902      	bls.n	8003d4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d44:	2303      	movs	r3, #3
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	e00a      	b.n	8003d60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b80      	cmp	r3, #128	; 0x80
 8003d4e:	d102      	bne.n	8003d56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d50:	2302      	movs	r3, #2
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	e004      	b.n	8003d60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b70      	cmp	r3, #112	; 0x70
 8003d5a:	d101      	bne.n	8003d60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f023 0207 	bic.w	r2, r3, #7
 8003d68:	4909      	ldr	r1, [pc, #36]	; (8003d90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d70:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d001      	beq.n	8003d82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40022000 	.word	0x40022000

08003d94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003da0:	2300      	movs	r3, #0
 8003da2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d041      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003db4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003db8:	d02a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003dba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003dbe:	d824      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003dc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dc4:	d008      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003dc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dca:	d81e      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003dd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dd4:	d010      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003dd6:	e018      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dd8:	4b86      	ldr	r3, [pc, #536]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4a85      	ldr	r2, [pc, #532]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003de4:	e015      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3304      	adds	r3, #4
 8003dea:	2100      	movs	r1, #0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fabb 	bl	8004368 <RCCEx_PLLSAI1_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003df6:	e00c      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3320      	adds	r3, #32
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fba6 	bl	8004550 <RCCEx_PLLSAI2_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e08:	e003      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	74fb      	strb	r3, [r7, #19]
      break;
 8003e0e:	e000      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003e10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e12:	7cfb      	ldrb	r3, [r7, #19]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10b      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e18:	4b76      	ldr	r3, [pc, #472]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e26:	4973      	ldr	r1, [pc, #460]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e2e:	e001      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
 8003e32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d041      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e48:	d02a      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003e4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e4e:	d824      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e54:	d008      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e5a:	d81e      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e64:	d010      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e66:	e018      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e68:	4b62      	ldr	r3, [pc, #392]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	4a61      	ldr	r2, [pc, #388]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e72:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e74:	e015      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fa73 	bl	8004368 <RCCEx_PLLSAI1_Config>
 8003e82:	4603      	mov	r3, r0
 8003e84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e86:	e00c      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3320      	adds	r3, #32
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fb5e 	bl	8004550 <RCCEx_PLLSAI2_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e98:	e003      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	74fb      	strb	r3, [r7, #19]
      break;
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea2:	7cfb      	ldrb	r3, [r7, #19]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10b      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ea8:	4b52      	ldr	r3, [pc, #328]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb6:	494f      	ldr	r1, [pc, #316]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ebe:	e001      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	7cfb      	ldrb	r3, [r7, #19]
 8003ec2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80a0 	beq.w	8004012 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ed6:	4b47      	ldr	r3, [pc, #284]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00d      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eec:	4b41      	ldr	r3, [pc, #260]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef0:	4a40      	ldr	r2, [pc, #256]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ef8:	4b3e      	ldr	r3, [pc, #248]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f04:	2301      	movs	r3, #1
 8003f06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f08:	4b3b      	ldr	r3, [pc, #236]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a3a      	ldr	r2, [pc, #232]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f14:	f7fd fbe0 	bl	80016d8 <HAL_GetTick>
 8003f18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f1a:	e009      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1c:	f7fd fbdc 	bl	80016d8 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d902      	bls.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	74fb      	strb	r3, [r7, #19]
        break;
 8003f2e:	e005      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f30:	4b31      	ldr	r3, [pc, #196]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0ef      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003f3c:	7cfb      	ldrb	r3, [r7, #19]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d15c      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f42:	4b2c      	ldr	r3, [pc, #176]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01f      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d019      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f60:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f6c:	4b21      	ldr	r3, [pc, #132]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f72:	4a20      	ldr	r2, [pc, #128]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f7c:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	4a1c      	ldr	r2, [pc, #112]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f8c:	4a19      	ldr	r2, [pc, #100]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d016      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9e:	f7fd fb9b 	bl	80016d8 <HAL_GetTick>
 8003fa2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fa4:	e00b      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa6:	f7fd fb97 	bl	80016d8 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d902      	bls.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	74fb      	strb	r3, [r7, #19]
            break;
 8003fbc:	e006      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0ec      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fd2:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe2:	4904      	ldr	r1, [pc, #16]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fea:	e009      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fec:	7cfb      	ldrb	r3, [r7, #19]
 8003fee:	74bb      	strb	r3, [r7, #18]
 8003ff0:	e006      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003ff2:	bf00      	nop
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004000:	7c7b      	ldrb	r3, [r7, #17]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d105      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004006:	4b9e      	ldr	r3, [pc, #632]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400a:	4a9d      	ldr	r2, [pc, #628]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004010:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800401e:	4b98      	ldr	r3, [pc, #608]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004024:	f023 0203 	bic.w	r2, r3, #3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	4994      	ldr	r1, [pc, #592]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004040:	4b8f      	ldr	r3, [pc, #572]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004046:	f023 020c 	bic.w	r2, r3, #12
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404e:	498c      	ldr	r1, [pc, #560]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004062:	4b87      	ldr	r3, [pc, #540]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004068:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	4983      	ldr	r1, [pc, #524]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004084:	4b7e      	ldr	r3, [pc, #504]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	497b      	ldr	r1, [pc, #492]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040a6:	4b76      	ldr	r3, [pc, #472]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b4:	4972      	ldr	r1, [pc, #456]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040c8:	4b6d      	ldr	r3, [pc, #436]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d6:	496a      	ldr	r1, [pc, #424]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040ea:	4b65      	ldr	r3, [pc, #404]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f8:	4961      	ldr	r1, [pc, #388]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800410c:	4b5c      	ldr	r3, [pc, #368]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004112:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411a:	4959      	ldr	r1, [pc, #356]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800412e:	4b54      	ldr	r3, [pc, #336]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004134:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413c:	4950      	ldr	r1, [pc, #320]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004150:	4b4b      	ldr	r3, [pc, #300]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415e:	4948      	ldr	r1, [pc, #288]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004172:	4b43      	ldr	r3, [pc, #268]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004180:	493f      	ldr	r1, [pc, #252]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d028      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004194:	4b3a      	ldr	r3, [pc, #232]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a2:	4937      	ldr	r1, [pc, #220]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041b2:	d106      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041b4:	4b32      	ldr	r3, [pc, #200]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4a31      	ldr	r2, [pc, #196]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041be:	60d3      	str	r3, [r2, #12]
 80041c0:	e011      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041ca:	d10c      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3304      	adds	r3, #4
 80041d0:	2101      	movs	r1, #1
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 f8c8 	bl	8004368 <RCCEx_PLLSAI1_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041dc:	7cfb      	ldrb	r3, [r7, #19]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80041e2:	7cfb      	ldrb	r3, [r7, #19]
 80041e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d028      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041f2:	4b23      	ldr	r3, [pc, #140]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004200:	491f      	ldr	r1, [pc, #124]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004210:	d106      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004212:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	4a1a      	ldr	r2, [pc, #104]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004218:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800421c:	60d3      	str	r3, [r2, #12]
 800421e:	e011      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004224:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004228:	d10c      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3304      	adds	r3, #4
 800422e:	2101      	movs	r1, #1
 8004230:	4618      	mov	r0, r3
 8004232:	f000 f899 	bl	8004368 <RCCEx_PLLSAI1_Config>
 8004236:	4603      	mov	r3, r0
 8004238:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800423a:	7cfb      	ldrb	r3, [r7, #19]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004240:	7cfb      	ldrb	r3, [r7, #19]
 8004242:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d02b      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800425e:	4908      	ldr	r1, [pc, #32]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800426e:	d109      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004270:	4b03      	ldr	r3, [pc, #12]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	4a02      	ldr	r2, [pc, #8]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800427a:	60d3      	str	r3, [r2, #12]
 800427c:	e014      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800427e:	bf00      	nop
 8004280:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800428c:	d10c      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3304      	adds	r3, #4
 8004292:	2101      	movs	r1, #1
 8004294:	4618      	mov	r0, r3
 8004296:	f000 f867 	bl	8004368 <RCCEx_PLLSAI1_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800429e:	7cfb      	ldrb	r3, [r7, #19]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80042a4:	7cfb      	ldrb	r3, [r7, #19]
 80042a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d02f      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042b4:	4b2b      	ldr	r3, [pc, #172]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042c2:	4928      	ldr	r1, [pc, #160]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042d2:	d10d      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3304      	adds	r3, #4
 80042d8:	2102      	movs	r1, #2
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 f844 	bl	8004368 <RCCEx_PLLSAI1_Config>
 80042e0:	4603      	mov	r3, r0
 80042e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042e4:	7cfb      	ldrb	r3, [r7, #19]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d014      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042ea:	7cfb      	ldrb	r3, [r7, #19]
 80042ec:	74bb      	strb	r3, [r7, #18]
 80042ee:	e011      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042f8:	d10c      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3320      	adds	r3, #32
 80042fe:	2102      	movs	r1, #2
 8004300:	4618      	mov	r0, r3
 8004302:	f000 f925 	bl	8004550 <RCCEx_PLLSAI2_Config>
 8004306:	4603      	mov	r3, r0
 8004308:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800430a:	7cfb      	ldrb	r3, [r7, #19]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004320:	4b10      	ldr	r3, [pc, #64]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004326:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800432e:	490d      	ldr	r1, [pc, #52]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00b      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004342:	4b08      	ldr	r3, [pc, #32]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004348:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004352:	4904      	ldr	r1, [pc, #16]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800435a:	7cbb      	ldrb	r3, [r7, #18]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40021000 	.word	0x40021000

08004368 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004376:	4b75      	ldr	r3, [pc, #468]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d018      	beq.n	80043b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004382:	4b72      	ldr	r3, [pc, #456]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f003 0203 	and.w	r2, r3, #3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d10d      	bne.n	80043ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
       ||
 8004396:	2b00      	cmp	r3, #0
 8004398:	d009      	beq.n	80043ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800439a:	4b6c      	ldr	r3, [pc, #432]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	091b      	lsrs	r3, r3, #4
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
       ||
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d047      	beq.n	800443e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
 80043b2:	e044      	b.n	800443e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d018      	beq.n	80043ee <RCCEx_PLLSAI1_Config+0x86>
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d825      	bhi.n	800440c <RCCEx_PLLSAI1_Config+0xa4>
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d002      	beq.n	80043ca <RCCEx_PLLSAI1_Config+0x62>
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d009      	beq.n	80043dc <RCCEx_PLLSAI1_Config+0x74>
 80043c8:	e020      	b.n	800440c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043ca:	4b60      	ldr	r3, [pc, #384]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d11d      	bne.n	8004412 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043da:	e01a      	b.n	8004412 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043dc:	4b5b      	ldr	r3, [pc, #364]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d116      	bne.n	8004416 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ec:	e013      	b.n	8004416 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043ee:	4b57      	ldr	r3, [pc, #348]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043fa:	4b54      	ldr	r3, [pc, #336]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800440a:	e006      	b.n	800441a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
      break;
 8004410:	e004      	b.n	800441c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004412:	bf00      	nop
 8004414:	e002      	b.n	800441c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004416:	bf00      	nop
 8004418:	e000      	b.n	800441c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800441a:	bf00      	nop
    }

    if(status == HAL_OK)
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10d      	bne.n	800443e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004422:	4b4a      	ldr	r3, [pc, #296]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6819      	ldr	r1, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	3b01      	subs	r3, #1
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	430b      	orrs	r3, r1
 8004438:	4944      	ldr	r1, [pc, #272]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 800443a:	4313      	orrs	r3, r2
 800443c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d17d      	bne.n	8004540 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004444:	4b41      	ldr	r3, [pc, #260]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a40      	ldr	r2, [pc, #256]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 800444a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800444e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004450:	f7fd f942 	bl	80016d8 <HAL_GetTick>
 8004454:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004456:	e009      	b.n	800446c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004458:	f7fd f93e 	bl	80016d8 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d902      	bls.n	800446c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	73fb      	strb	r3, [r7, #15]
        break;
 800446a:	e005      	b.n	8004478 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800446c:	4b37      	ldr	r3, [pc, #220]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1ef      	bne.n	8004458 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d160      	bne.n	8004540 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d111      	bne.n	80044a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004484:	4b31      	ldr	r3, [pc, #196]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800448c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6892      	ldr	r2, [r2, #8]
 8004494:	0211      	lsls	r1, r2, #8
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	68d2      	ldr	r2, [r2, #12]
 800449a:	0912      	lsrs	r2, r2, #4
 800449c:	0452      	lsls	r2, r2, #17
 800449e:	430a      	orrs	r2, r1
 80044a0:	492a      	ldr	r1, [pc, #168]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	610b      	str	r3, [r1, #16]
 80044a6:	e027      	b.n	80044f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d112      	bne.n	80044d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044ae:	4b27      	ldr	r3, [pc, #156]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80044b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6892      	ldr	r2, [r2, #8]
 80044be:	0211      	lsls	r1, r2, #8
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6912      	ldr	r2, [r2, #16]
 80044c4:	0852      	lsrs	r2, r2, #1
 80044c6:	3a01      	subs	r2, #1
 80044c8:	0552      	lsls	r2, r2, #21
 80044ca:	430a      	orrs	r2, r1
 80044cc:	491f      	ldr	r1, [pc, #124]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	610b      	str	r3, [r1, #16]
 80044d2:	e011      	b.n	80044f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044d4:	4b1d      	ldr	r3, [pc, #116]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6892      	ldr	r2, [r2, #8]
 80044e4:	0211      	lsls	r1, r2, #8
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6952      	ldr	r2, [r2, #20]
 80044ea:	0852      	lsrs	r2, r2, #1
 80044ec:	3a01      	subs	r2, #1
 80044ee:	0652      	lsls	r2, r2, #25
 80044f0:	430a      	orrs	r2, r1
 80044f2:	4916      	ldr	r1, [pc, #88]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044f8:	4b14      	ldr	r3, [pc, #80]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a13      	ldr	r2, [pc, #76]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004502:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004504:	f7fd f8e8 	bl	80016d8 <HAL_GetTick>
 8004508:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800450a:	e009      	b.n	8004520 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800450c:	f7fd f8e4 	bl	80016d8 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d902      	bls.n	8004520 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	73fb      	strb	r3, [r7, #15]
          break;
 800451e:	e005      	b.n	800452c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004520:	4b0a      	ldr	r3, [pc, #40]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0ef      	beq.n	800450c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004532:	4b06      	ldr	r3, [pc, #24]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	4904      	ldr	r1, [pc, #16]	; (800454c <RCCEx_PLLSAI1_Config+0x1e4>)
 800453c:	4313      	orrs	r3, r2
 800453e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004540:	7bfb      	ldrb	r3, [r7, #15]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40021000 	.word	0x40021000

08004550 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800455e:	4b6a      	ldr	r3, [pc, #424]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d018      	beq.n	800459c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800456a:	4b67      	ldr	r3, [pc, #412]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f003 0203 	and.w	r2, r3, #3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d10d      	bne.n	8004596 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
       ||
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004582:	4b61      	ldr	r3, [pc, #388]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	091b      	lsrs	r3, r3, #4
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
       ||
 8004592:	429a      	cmp	r2, r3
 8004594:	d047      	beq.n	8004626 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	73fb      	strb	r3, [r7, #15]
 800459a:	e044      	b.n	8004626 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d018      	beq.n	80045d6 <RCCEx_PLLSAI2_Config+0x86>
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d825      	bhi.n	80045f4 <RCCEx_PLLSAI2_Config+0xa4>
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d002      	beq.n	80045b2 <RCCEx_PLLSAI2_Config+0x62>
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d009      	beq.n	80045c4 <RCCEx_PLLSAI2_Config+0x74>
 80045b0:	e020      	b.n	80045f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045b2:	4b55      	ldr	r3, [pc, #340]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d11d      	bne.n	80045fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c2:	e01a      	b.n	80045fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045c4:	4b50      	ldr	r3, [pc, #320]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d116      	bne.n	80045fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d4:	e013      	b.n	80045fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045d6:	4b4c      	ldr	r3, [pc, #304]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10f      	bne.n	8004602 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045e2:	4b49      	ldr	r3, [pc, #292]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045f2:	e006      	b.n	8004602 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
      break;
 80045f8:	e004      	b.n	8004604 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045fa:	bf00      	nop
 80045fc:	e002      	b.n	8004604 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045fe:	bf00      	nop
 8004600:	e000      	b.n	8004604 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004602:	bf00      	nop
    }

    if(status == HAL_OK)
 8004604:	7bfb      	ldrb	r3, [r7, #15]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10d      	bne.n	8004626 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800460a:	4b3f      	ldr	r3, [pc, #252]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6819      	ldr	r1, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	3b01      	subs	r3, #1
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	430b      	orrs	r3, r1
 8004620:	4939      	ldr	r1, [pc, #228]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004622:	4313      	orrs	r3, r2
 8004624:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004626:	7bfb      	ldrb	r3, [r7, #15]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d167      	bne.n	80046fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800462c:	4b36      	ldr	r3, [pc, #216]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a35      	ldr	r2, [pc, #212]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004638:	f7fd f84e 	bl	80016d8 <HAL_GetTick>
 800463c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800463e:	e009      	b.n	8004654 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004640:	f7fd f84a 	bl	80016d8 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d902      	bls.n	8004654 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	73fb      	strb	r3, [r7, #15]
        break;
 8004652:	e005      	b.n	8004660 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004654:	4b2c      	ldr	r3, [pc, #176]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1ef      	bne.n	8004640 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d14a      	bne.n	80046fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d111      	bne.n	8004690 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800466c:	4b26      	ldr	r3, [pc, #152]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6892      	ldr	r2, [r2, #8]
 800467c:	0211      	lsls	r1, r2, #8
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	68d2      	ldr	r2, [r2, #12]
 8004682:	0912      	lsrs	r2, r2, #4
 8004684:	0452      	lsls	r2, r2, #17
 8004686:	430a      	orrs	r2, r1
 8004688:	491f      	ldr	r1, [pc, #124]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 800468a:	4313      	orrs	r3, r2
 800468c:	614b      	str	r3, [r1, #20]
 800468e:	e011      	b.n	80046b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004690:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004698:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6892      	ldr	r2, [r2, #8]
 80046a0:	0211      	lsls	r1, r2, #8
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6912      	ldr	r2, [r2, #16]
 80046a6:	0852      	lsrs	r2, r2, #1
 80046a8:	3a01      	subs	r2, #1
 80046aa:	0652      	lsls	r2, r2, #25
 80046ac:	430a      	orrs	r2, r1
 80046ae:	4916      	ldr	r1, [pc, #88]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80046b4:	4b14      	ldr	r3, [pc, #80]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a13      	ldr	r2, [pc, #76]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c0:	f7fd f80a 	bl	80016d8 <HAL_GetTick>
 80046c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046c6:	e009      	b.n	80046dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046c8:	f7fd f806 	bl	80016d8 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d902      	bls.n	80046dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	73fb      	strb	r3, [r7, #15]
          break;
 80046da:	e005      	b.n	80046e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046dc:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0ef      	beq.n	80046c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80046ee:	4b06      	ldr	r3, [pc, #24]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f0:	695a      	ldr	r2, [r3, #20]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	4904      	ldr	r1, [pc, #16]	; (8004708 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40021000 	.word	0x40021000

0800470c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e040      	b.n	80047a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fc fdda 	bl	80012e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2224      	movs	r2, #36	; 0x24
 8004738:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0201 	bic.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fb6a 	bl	8004e2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f8af 	bl	80048bc <UART_SetConfig>
 800475e:	4603      	mov	r3, r0
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e01b      	b.n	80047a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004776:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004786:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0201 	orr.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 fbe9 	bl	8004f70 <UART_CheckIdleState>
 800479e:	4603      	mov	r3, r0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	; 0x28
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	4613      	mov	r3, r2
 80047b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047bc:	2b20      	cmp	r3, #32
 80047be:	d178      	bne.n	80048b2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_UART_Transmit+0x24>
 80047c6:	88fb      	ldrh	r3, [r7, #6]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e071      	b.n	80048b4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2221      	movs	r2, #33	; 0x21
 80047dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047de:	f7fc ff7b 	bl	80016d8 <HAL_GetTick>
 80047e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	88fa      	ldrh	r2, [r7, #6]
 80047e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	88fa      	ldrh	r2, [r7, #6]
 80047f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fc:	d108      	bne.n	8004810 <HAL_UART_Transmit+0x68>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d104      	bne.n	8004810 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004806:	2300      	movs	r3, #0
 8004808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	e003      	b.n	8004818 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004814:	2300      	movs	r3, #0
 8004816:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004818:	e030      	b.n	800487c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2200      	movs	r2, #0
 8004822:	2180      	movs	r1, #128	; 0x80
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 fc4b 	bl	80050c0 <UART_WaitOnFlagUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d004      	beq.n	800483a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2220      	movs	r2, #32
 8004834:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e03c      	b.n	80048b4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10b      	bne.n	8004858 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	881a      	ldrh	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800484c:	b292      	uxth	r2, r2
 800484e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	3302      	adds	r3, #2
 8004854:	61bb      	str	r3, [r7, #24]
 8004856:	e008      	b.n	800486a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	781a      	ldrb	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	b292      	uxth	r2, r2
 8004862:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	3301      	adds	r3, #1
 8004868:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1c8      	bne.n	800481a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2200      	movs	r2, #0
 8004890:	2140      	movs	r1, #64	; 0x40
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 fc14 	bl	80050c0 <UART_WaitOnFlagUntilTimeout>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d004      	beq.n	80048a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e005      	b.n	80048b4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2220      	movs	r2, #32
 80048ac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e000      	b.n	80048b4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
  }
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3720      	adds	r7, #32
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c0:	b08a      	sub	sp, #40	; 0x28
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	431a      	orrs	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	431a      	orrs	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4ba4      	ldr	r3, [pc, #656]	; (8004b7c <UART_SetConfig+0x2c0>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	6812      	ldr	r2, [r2, #0]
 80048f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048f4:	430b      	orrs	r3, r1
 80048f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a99      	ldr	r2, [pc, #612]	; (8004b80 <UART_SetConfig+0x2c4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d004      	beq.n	8004928 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004924:	4313      	orrs	r3, r2
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004938:	430a      	orrs	r2, r1
 800493a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a90      	ldr	r2, [pc, #576]	; (8004b84 <UART_SetConfig+0x2c8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d126      	bne.n	8004994 <UART_SetConfig+0xd8>
 8004946:	4b90      	ldr	r3, [pc, #576]	; (8004b88 <UART_SetConfig+0x2cc>)
 8004948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494c:	f003 0303 	and.w	r3, r3, #3
 8004950:	2b03      	cmp	r3, #3
 8004952:	d81b      	bhi.n	800498c <UART_SetConfig+0xd0>
 8004954:	a201      	add	r2, pc, #4	; (adr r2, 800495c <UART_SetConfig+0xa0>)
 8004956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495a:	bf00      	nop
 800495c:	0800496d 	.word	0x0800496d
 8004960:	0800497d 	.word	0x0800497d
 8004964:	08004975 	.word	0x08004975
 8004968:	08004985 	.word	0x08004985
 800496c:	2301      	movs	r3, #1
 800496e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004972:	e116      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004974:	2302      	movs	r3, #2
 8004976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497a:	e112      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 800497c:	2304      	movs	r3, #4
 800497e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004982:	e10e      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004984:	2308      	movs	r3, #8
 8004986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498a:	e10a      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 800498c:	2310      	movs	r3, #16
 800498e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004992:	e106      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a7c      	ldr	r2, [pc, #496]	; (8004b8c <UART_SetConfig+0x2d0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d138      	bne.n	8004a10 <UART_SetConfig+0x154>
 800499e:	4b7a      	ldr	r3, [pc, #488]	; (8004b88 <UART_SetConfig+0x2cc>)
 80049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a4:	f003 030c 	and.w	r3, r3, #12
 80049a8:	2b0c      	cmp	r3, #12
 80049aa:	d82d      	bhi.n	8004a08 <UART_SetConfig+0x14c>
 80049ac:	a201      	add	r2, pc, #4	; (adr r2, 80049b4 <UART_SetConfig+0xf8>)
 80049ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b2:	bf00      	nop
 80049b4:	080049e9 	.word	0x080049e9
 80049b8:	08004a09 	.word	0x08004a09
 80049bc:	08004a09 	.word	0x08004a09
 80049c0:	08004a09 	.word	0x08004a09
 80049c4:	080049f9 	.word	0x080049f9
 80049c8:	08004a09 	.word	0x08004a09
 80049cc:	08004a09 	.word	0x08004a09
 80049d0:	08004a09 	.word	0x08004a09
 80049d4:	080049f1 	.word	0x080049f1
 80049d8:	08004a09 	.word	0x08004a09
 80049dc:	08004a09 	.word	0x08004a09
 80049e0:	08004a09 	.word	0x08004a09
 80049e4:	08004a01 	.word	0x08004a01
 80049e8:	2300      	movs	r3, #0
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ee:	e0d8      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 80049f0:	2302      	movs	r3, #2
 80049f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049f6:	e0d4      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 80049f8:	2304      	movs	r3, #4
 80049fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049fe:	e0d0      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004a00:	2308      	movs	r3, #8
 8004a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a06:	e0cc      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a0e:	e0c8      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a5e      	ldr	r2, [pc, #376]	; (8004b90 <UART_SetConfig+0x2d4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d125      	bne.n	8004a66 <UART_SetConfig+0x1aa>
 8004a1a:	4b5b      	ldr	r3, [pc, #364]	; (8004b88 <UART_SetConfig+0x2cc>)
 8004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a24:	2b30      	cmp	r3, #48	; 0x30
 8004a26:	d016      	beq.n	8004a56 <UART_SetConfig+0x19a>
 8004a28:	2b30      	cmp	r3, #48	; 0x30
 8004a2a:	d818      	bhi.n	8004a5e <UART_SetConfig+0x1a2>
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d00a      	beq.n	8004a46 <UART_SetConfig+0x18a>
 8004a30:	2b20      	cmp	r3, #32
 8004a32:	d814      	bhi.n	8004a5e <UART_SetConfig+0x1a2>
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <UART_SetConfig+0x182>
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d008      	beq.n	8004a4e <UART_SetConfig+0x192>
 8004a3c:	e00f      	b.n	8004a5e <UART_SetConfig+0x1a2>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a44:	e0ad      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004a46:	2302      	movs	r3, #2
 8004a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a4c:	e0a9      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004a4e:	2304      	movs	r3, #4
 8004a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a54:	e0a5      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004a56:	2308      	movs	r3, #8
 8004a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a5c:	e0a1      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004a5e:	2310      	movs	r3, #16
 8004a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a64:	e09d      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a4a      	ldr	r2, [pc, #296]	; (8004b94 <UART_SetConfig+0x2d8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d125      	bne.n	8004abc <UART_SetConfig+0x200>
 8004a70:	4b45      	ldr	r3, [pc, #276]	; (8004b88 <UART_SetConfig+0x2cc>)
 8004a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a7a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a7c:	d016      	beq.n	8004aac <UART_SetConfig+0x1f0>
 8004a7e:	2bc0      	cmp	r3, #192	; 0xc0
 8004a80:	d818      	bhi.n	8004ab4 <UART_SetConfig+0x1f8>
 8004a82:	2b80      	cmp	r3, #128	; 0x80
 8004a84:	d00a      	beq.n	8004a9c <UART_SetConfig+0x1e0>
 8004a86:	2b80      	cmp	r3, #128	; 0x80
 8004a88:	d814      	bhi.n	8004ab4 <UART_SetConfig+0x1f8>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <UART_SetConfig+0x1d8>
 8004a8e:	2b40      	cmp	r3, #64	; 0x40
 8004a90:	d008      	beq.n	8004aa4 <UART_SetConfig+0x1e8>
 8004a92:	e00f      	b.n	8004ab4 <UART_SetConfig+0x1f8>
 8004a94:	2300      	movs	r3, #0
 8004a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a9a:	e082      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa2:	e07e      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aaa:	e07a      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004aac:	2308      	movs	r3, #8
 8004aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab2:	e076      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aba:	e072      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a35      	ldr	r2, [pc, #212]	; (8004b98 <UART_SetConfig+0x2dc>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d12a      	bne.n	8004b1c <UART_SetConfig+0x260>
 8004ac6:	4b30      	ldr	r3, [pc, #192]	; (8004b88 <UART_SetConfig+0x2cc>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ad4:	d01a      	beq.n	8004b0c <UART_SetConfig+0x250>
 8004ad6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ada:	d81b      	bhi.n	8004b14 <UART_SetConfig+0x258>
 8004adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ae0:	d00c      	beq.n	8004afc <UART_SetConfig+0x240>
 8004ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ae6:	d815      	bhi.n	8004b14 <UART_SetConfig+0x258>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <UART_SetConfig+0x238>
 8004aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af0:	d008      	beq.n	8004b04 <UART_SetConfig+0x248>
 8004af2:	e00f      	b.n	8004b14 <UART_SetConfig+0x258>
 8004af4:	2300      	movs	r3, #0
 8004af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afa:	e052      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004afc:	2302      	movs	r3, #2
 8004afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b02:	e04e      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004b04:	2304      	movs	r3, #4
 8004b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b0a:	e04a      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004b0c:	2308      	movs	r3, #8
 8004b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b12:	e046      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004b14:	2310      	movs	r3, #16
 8004b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b1a:	e042      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a17      	ldr	r2, [pc, #92]	; (8004b80 <UART_SetConfig+0x2c4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d13a      	bne.n	8004b9c <UART_SetConfig+0x2e0>
 8004b26:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <UART_SetConfig+0x2cc>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b34:	d01a      	beq.n	8004b6c <UART_SetConfig+0x2b0>
 8004b36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b3a:	d81b      	bhi.n	8004b74 <UART_SetConfig+0x2b8>
 8004b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b40:	d00c      	beq.n	8004b5c <UART_SetConfig+0x2a0>
 8004b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b46:	d815      	bhi.n	8004b74 <UART_SetConfig+0x2b8>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <UART_SetConfig+0x298>
 8004b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b50:	d008      	beq.n	8004b64 <UART_SetConfig+0x2a8>
 8004b52:	e00f      	b.n	8004b74 <UART_SetConfig+0x2b8>
 8004b54:	2300      	movs	r3, #0
 8004b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b5a:	e022      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b62:	e01e      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004b64:	2304      	movs	r3, #4
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6a:	e01a      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004b6c:	2308      	movs	r3, #8
 8004b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b72:	e016      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004b74:	2310      	movs	r3, #16
 8004b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7a:	e012      	b.n	8004ba2 <UART_SetConfig+0x2e6>
 8004b7c:	efff69f3 	.word	0xefff69f3
 8004b80:	40008000 	.word	0x40008000
 8004b84:	40013800 	.word	0x40013800
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	40004400 	.word	0x40004400
 8004b90:	40004800 	.word	0x40004800
 8004b94:	40004c00 	.word	0x40004c00
 8004b98:	40005000 	.word	0x40005000
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a9f      	ldr	r2, [pc, #636]	; (8004e24 <UART_SetConfig+0x568>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d17a      	bne.n	8004ca2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d824      	bhi.n	8004bfe <UART_SetConfig+0x342>
 8004bb4:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <UART_SetConfig+0x300>)
 8004bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bba:	bf00      	nop
 8004bbc:	08004be1 	.word	0x08004be1
 8004bc0:	08004bff 	.word	0x08004bff
 8004bc4:	08004be9 	.word	0x08004be9
 8004bc8:	08004bff 	.word	0x08004bff
 8004bcc:	08004bef 	.word	0x08004bef
 8004bd0:	08004bff 	.word	0x08004bff
 8004bd4:	08004bff 	.word	0x08004bff
 8004bd8:	08004bff 	.word	0x08004bff
 8004bdc:	08004bf7 	.word	0x08004bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be0:	f7ff f84c 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 8004be4:	61f8      	str	r0, [r7, #28]
        break;
 8004be6:	e010      	b.n	8004c0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be8:	4b8f      	ldr	r3, [pc, #572]	; (8004e28 <UART_SetConfig+0x56c>)
 8004bea:	61fb      	str	r3, [r7, #28]
        break;
 8004bec:	e00d      	b.n	8004c0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bee:	f7fe ffad 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8004bf2:	61f8      	str	r0, [r7, #28]
        break;
 8004bf4:	e009      	b.n	8004c0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bfa:	61fb      	str	r3, [r7, #28]
        break;
 8004bfc:	e005      	b.n	8004c0a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 80fb 	beq.w	8004e08 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	4413      	add	r3, r2
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d305      	bcc.n	8004c2e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d903      	bls.n	8004c36 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c34:	e0e8      	b.n	8004e08 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	461c      	mov	r4, r3
 8004c3c:	4615      	mov	r5, r2
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	022b      	lsls	r3, r5, #8
 8004c48:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c4c:	0222      	lsls	r2, r4, #8
 8004c4e:	68f9      	ldr	r1, [r7, #12]
 8004c50:	6849      	ldr	r1, [r1, #4]
 8004c52:	0849      	lsrs	r1, r1, #1
 8004c54:	2000      	movs	r0, #0
 8004c56:	4688      	mov	r8, r1
 8004c58:	4681      	mov	r9, r0
 8004c5a:	eb12 0a08 	adds.w	sl, r2, r8
 8004c5e:	eb43 0b09 	adc.w	fp, r3, r9
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	603b      	str	r3, [r7, #0]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c70:	4650      	mov	r0, sl
 8004c72:	4659      	mov	r1, fp
 8004c74:	f7fb ff98 	bl	8000ba8 <__aeabi_uldivmod>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c86:	d308      	bcc.n	8004c9a <UART_SetConfig+0x3de>
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8e:	d204      	bcs.n	8004c9a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	60da      	str	r2, [r3, #12]
 8004c98:	e0b6      	b.n	8004e08 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ca0:	e0b2      	b.n	8004e08 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004caa:	d15e      	bne.n	8004d6a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004cac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d828      	bhi.n	8004d06 <UART_SetConfig+0x44a>
 8004cb4:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <UART_SetConfig+0x400>)
 8004cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cba:	bf00      	nop
 8004cbc:	08004ce1 	.word	0x08004ce1
 8004cc0:	08004ce9 	.word	0x08004ce9
 8004cc4:	08004cf1 	.word	0x08004cf1
 8004cc8:	08004d07 	.word	0x08004d07
 8004ccc:	08004cf7 	.word	0x08004cf7
 8004cd0:	08004d07 	.word	0x08004d07
 8004cd4:	08004d07 	.word	0x08004d07
 8004cd8:	08004d07 	.word	0x08004d07
 8004cdc:	08004cff 	.word	0x08004cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce0:	f7fe ffcc 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 8004ce4:	61f8      	str	r0, [r7, #28]
        break;
 8004ce6:	e014      	b.n	8004d12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce8:	f7fe ffde 	bl	8003ca8 <HAL_RCC_GetPCLK2Freq>
 8004cec:	61f8      	str	r0, [r7, #28]
        break;
 8004cee:	e010      	b.n	8004d12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cf0:	4b4d      	ldr	r3, [pc, #308]	; (8004e28 <UART_SetConfig+0x56c>)
 8004cf2:	61fb      	str	r3, [r7, #28]
        break;
 8004cf4:	e00d      	b.n	8004d12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf6:	f7fe ff29 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8004cfa:	61f8      	str	r0, [r7, #28]
        break;
 8004cfc:	e009      	b.n	8004d12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d02:	61fb      	str	r3, [r7, #28]
        break;
 8004d04:	e005      	b.n	8004d12 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d077      	beq.n	8004e08 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	005a      	lsls	r2, r3, #1
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	085b      	lsrs	r3, r3, #1
 8004d22:	441a      	add	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2b0f      	cmp	r3, #15
 8004d32:	d916      	bls.n	8004d62 <UART_SetConfig+0x4a6>
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3a:	d212      	bcs.n	8004d62 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	f023 030f 	bic.w	r3, r3, #15
 8004d44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	085b      	lsrs	r3, r3, #1
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	8afb      	ldrh	r3, [r7, #22]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	8afa      	ldrh	r2, [r7, #22]
 8004d5e:	60da      	str	r2, [r3, #12]
 8004d60:	e052      	b.n	8004e08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d68:	e04e      	b.n	8004e08 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d827      	bhi.n	8004dc2 <UART_SetConfig+0x506>
 8004d72:	a201      	add	r2, pc, #4	; (adr r2, 8004d78 <UART_SetConfig+0x4bc>)
 8004d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d78:	08004d9d 	.word	0x08004d9d
 8004d7c:	08004da5 	.word	0x08004da5
 8004d80:	08004dad 	.word	0x08004dad
 8004d84:	08004dc3 	.word	0x08004dc3
 8004d88:	08004db3 	.word	0x08004db3
 8004d8c:	08004dc3 	.word	0x08004dc3
 8004d90:	08004dc3 	.word	0x08004dc3
 8004d94:	08004dc3 	.word	0x08004dc3
 8004d98:	08004dbb 	.word	0x08004dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d9c:	f7fe ff6e 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 8004da0:	61f8      	str	r0, [r7, #28]
        break;
 8004da2:	e014      	b.n	8004dce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004da4:	f7fe ff80 	bl	8003ca8 <HAL_RCC_GetPCLK2Freq>
 8004da8:	61f8      	str	r0, [r7, #28]
        break;
 8004daa:	e010      	b.n	8004dce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dac:	4b1e      	ldr	r3, [pc, #120]	; (8004e28 <UART_SetConfig+0x56c>)
 8004dae:	61fb      	str	r3, [r7, #28]
        break;
 8004db0:	e00d      	b.n	8004dce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004db2:	f7fe fecb 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8004db6:	61f8      	str	r0, [r7, #28]
        break;
 8004db8:	e009      	b.n	8004dce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dbe:	61fb      	str	r3, [r7, #28]
        break;
 8004dc0:	e005      	b.n	8004dce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004dcc:	bf00      	nop
    }

    if (pclk != 0U)
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d019      	beq.n	8004e08 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	085a      	lsrs	r2, r3, #1
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	441a      	add	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2b0f      	cmp	r3, #15
 8004dec:	d909      	bls.n	8004e02 <UART_SetConfig+0x546>
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df4:	d205      	bcs.n	8004e02 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60da      	str	r2, [r3, #12]
 8004e00:	e002      	b.n	8004e08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3728      	adds	r7, #40	; 0x28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e22:	bf00      	nop
 8004e24:	40008000 	.word	0x40008000
 8004e28:	00f42400 	.word	0x00f42400

08004e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	f003 0308 	and.w	r3, r3, #8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00a      	beq.n	8004e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00a      	beq.n	8004ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00a      	beq.n	8004ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d01a      	beq.n	8004f42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f2a:	d10a      	bne.n	8004f42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	605a      	str	r2, [r3, #4]
  }
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b098      	sub	sp, #96	; 0x60
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f80:	f7fc fbaa 	bl	80016d8 <HAL_GetTick>
 8004f84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d12e      	bne.n	8004ff2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f88c 	bl	80050c0 <UART_WaitOnFlagUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d021      	beq.n	8004ff2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb6:	e853 3f00 	ldrex	r3, [r3]
 8004fba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc2:	653b      	str	r3, [r7, #80]	; 0x50
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8004fce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fd4:	e841 2300 	strex	r3, r2, [r1]
 8004fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1e6      	bne.n	8004fae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e062      	b.n	80050b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d149      	bne.n	8005094 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005000:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005008:	2200      	movs	r2, #0
 800500a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f856 	bl	80050c0 <UART_WaitOnFlagUntilTimeout>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d03c      	beq.n	8005094 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	623b      	str	r3, [r7, #32]
   return(result);
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800502e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	461a      	mov	r2, r3
 8005036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005038:	633b      	str	r3, [r7, #48]	; 0x30
 800503a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800503e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005040:	e841 2300 	strex	r3, r2, [r1]
 8005044:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e6      	bne.n	800501a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3308      	adds	r3, #8
 8005052:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	e853 3f00 	ldrex	r3, [r3]
 800505a:	60fb      	str	r3, [r7, #12]
   return(result);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0301 	bic.w	r3, r3, #1
 8005062:	64bb      	str	r3, [r7, #72]	; 0x48
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3308      	adds	r3, #8
 800506a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800506c:	61fa      	str	r2, [r7, #28]
 800506e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005070:	69b9      	ldr	r1, [r7, #24]
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	e841 2300 	strex	r3, r2, [r1]
 8005078:	617b      	str	r3, [r7, #20]
   return(result);
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1e5      	bne.n	800504c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e011      	b.n	80050b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2220      	movs	r2, #32
 8005098:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3758      	adds	r7, #88	; 0x58
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	603b      	str	r3, [r7, #0]
 80050cc:	4613      	mov	r3, r2
 80050ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d0:	e049      	b.n	8005166 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d8:	d045      	beq.n	8005166 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050da:	f7fc fafd 	bl	80016d8 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d302      	bcc.n	80050f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e048      	b.n	8005186 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d031      	beq.n	8005166 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	f003 0308 	and.w	r3, r3, #8
 800510c:	2b08      	cmp	r3, #8
 800510e:	d110      	bne.n	8005132 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2208      	movs	r2, #8
 8005116:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 f838 	bl	800518e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2208      	movs	r2, #8
 8005122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e029      	b.n	8005186 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800513c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005140:	d111      	bne.n	8005166 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800514a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 f81e 	bl	800518e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2220      	movs	r2, #32
 8005156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e00f      	b.n	8005186 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4013      	ands	r3, r2
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	429a      	cmp	r2, r3
 8005174:	bf0c      	ite	eq
 8005176:	2301      	moveq	r3, #1
 8005178:	2300      	movne	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	461a      	mov	r2, r3
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	429a      	cmp	r2, r3
 8005182:	d0a6      	beq.n	80050d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800518e:	b480      	push	{r7}
 8005190:	b095      	sub	sp, #84	; 0x54
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519e:	e853 3f00 	ldrex	r3, [r3]
 80051a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	461a      	mov	r2, r3
 80051b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b4:	643b      	str	r3, [r7, #64]	; 0x40
 80051b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051bc:	e841 2300 	strex	r3, r2, [r1]
 80051c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1e6      	bne.n	8005196 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3308      	adds	r3, #8
 80051ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	e853 3f00 	ldrex	r3, [r3]
 80051d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	f023 0301 	bic.w	r3, r3, #1
 80051de:	64bb      	str	r3, [r7, #72]	; 0x48
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3308      	adds	r3, #8
 80051e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f0:	e841 2300 	strex	r3, r2, [r1]
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e5      	bne.n	80051c8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005200:	2b01      	cmp	r3, #1
 8005202:	d118      	bne.n	8005236 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	60bb      	str	r3, [r7, #8]
   return(result);
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f023 0310 	bic.w	r3, r3, #16
 8005218:	647b      	str	r3, [r7, #68]	; 0x44
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005222:	61bb      	str	r3, [r7, #24]
 8005224:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	6979      	ldr	r1, [r7, #20]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	e841 2300 	strex	r3, r2, [r1]
 800522e:	613b      	str	r3, [r7, #16]
   return(result);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1e6      	bne.n	8005204 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	669a      	str	r2, [r3, #104]	; 0x68
}
 800524a:	bf00      	nop
 800524c:	3754      	adds	r7, #84	; 0x54
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <__cvt>:
 8005256:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800525a:	ec55 4b10 	vmov	r4, r5, d0
 800525e:	2d00      	cmp	r5, #0
 8005260:	460e      	mov	r6, r1
 8005262:	4619      	mov	r1, r3
 8005264:	462b      	mov	r3, r5
 8005266:	bfbb      	ittet	lt
 8005268:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800526c:	461d      	movlt	r5, r3
 800526e:	2300      	movge	r3, #0
 8005270:	232d      	movlt	r3, #45	; 0x2d
 8005272:	700b      	strb	r3, [r1, #0]
 8005274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005276:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800527a:	4691      	mov	r9, r2
 800527c:	f023 0820 	bic.w	r8, r3, #32
 8005280:	bfbc      	itt	lt
 8005282:	4622      	movlt	r2, r4
 8005284:	4614      	movlt	r4, r2
 8005286:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800528a:	d005      	beq.n	8005298 <__cvt+0x42>
 800528c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005290:	d100      	bne.n	8005294 <__cvt+0x3e>
 8005292:	3601      	adds	r6, #1
 8005294:	2102      	movs	r1, #2
 8005296:	e000      	b.n	800529a <__cvt+0x44>
 8005298:	2103      	movs	r1, #3
 800529a:	ab03      	add	r3, sp, #12
 800529c:	9301      	str	r3, [sp, #4]
 800529e:	ab02      	add	r3, sp, #8
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	ec45 4b10 	vmov	d0, r4, r5
 80052a6:	4653      	mov	r3, sl
 80052a8:	4632      	mov	r2, r6
 80052aa:	f000 fe5d 	bl	8005f68 <_dtoa_r>
 80052ae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052b2:	4607      	mov	r7, r0
 80052b4:	d102      	bne.n	80052bc <__cvt+0x66>
 80052b6:	f019 0f01 	tst.w	r9, #1
 80052ba:	d022      	beq.n	8005302 <__cvt+0xac>
 80052bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052c0:	eb07 0906 	add.w	r9, r7, r6
 80052c4:	d110      	bne.n	80052e8 <__cvt+0x92>
 80052c6:	783b      	ldrb	r3, [r7, #0]
 80052c8:	2b30      	cmp	r3, #48	; 0x30
 80052ca:	d10a      	bne.n	80052e2 <__cvt+0x8c>
 80052cc:	2200      	movs	r2, #0
 80052ce:	2300      	movs	r3, #0
 80052d0:	4620      	mov	r0, r4
 80052d2:	4629      	mov	r1, r5
 80052d4:	f7fb fbf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80052d8:	b918      	cbnz	r0, 80052e2 <__cvt+0x8c>
 80052da:	f1c6 0601 	rsb	r6, r6, #1
 80052de:	f8ca 6000 	str.w	r6, [sl]
 80052e2:	f8da 3000 	ldr.w	r3, [sl]
 80052e6:	4499      	add	r9, r3
 80052e8:	2200      	movs	r2, #0
 80052ea:	2300      	movs	r3, #0
 80052ec:	4620      	mov	r0, r4
 80052ee:	4629      	mov	r1, r5
 80052f0:	f7fb fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 80052f4:	b108      	cbz	r0, 80052fa <__cvt+0xa4>
 80052f6:	f8cd 900c 	str.w	r9, [sp, #12]
 80052fa:	2230      	movs	r2, #48	; 0x30
 80052fc:	9b03      	ldr	r3, [sp, #12]
 80052fe:	454b      	cmp	r3, r9
 8005300:	d307      	bcc.n	8005312 <__cvt+0xbc>
 8005302:	9b03      	ldr	r3, [sp, #12]
 8005304:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005306:	1bdb      	subs	r3, r3, r7
 8005308:	4638      	mov	r0, r7
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	b004      	add	sp, #16
 800530e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005312:	1c59      	adds	r1, r3, #1
 8005314:	9103      	str	r1, [sp, #12]
 8005316:	701a      	strb	r2, [r3, #0]
 8005318:	e7f0      	b.n	80052fc <__cvt+0xa6>

0800531a <__exponent>:
 800531a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800531c:	4603      	mov	r3, r0
 800531e:	2900      	cmp	r1, #0
 8005320:	bfb8      	it	lt
 8005322:	4249      	neglt	r1, r1
 8005324:	f803 2b02 	strb.w	r2, [r3], #2
 8005328:	bfb4      	ite	lt
 800532a:	222d      	movlt	r2, #45	; 0x2d
 800532c:	222b      	movge	r2, #43	; 0x2b
 800532e:	2909      	cmp	r1, #9
 8005330:	7042      	strb	r2, [r0, #1]
 8005332:	dd2a      	ble.n	800538a <__exponent+0x70>
 8005334:	f10d 0207 	add.w	r2, sp, #7
 8005338:	4617      	mov	r7, r2
 800533a:	260a      	movs	r6, #10
 800533c:	4694      	mov	ip, r2
 800533e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005342:	fb06 1415 	mls	r4, r6, r5, r1
 8005346:	3430      	adds	r4, #48	; 0x30
 8005348:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800534c:	460c      	mov	r4, r1
 800534e:	2c63      	cmp	r4, #99	; 0x63
 8005350:	f102 32ff 	add.w	r2, r2, #4294967295
 8005354:	4629      	mov	r1, r5
 8005356:	dcf1      	bgt.n	800533c <__exponent+0x22>
 8005358:	3130      	adds	r1, #48	; 0x30
 800535a:	f1ac 0402 	sub.w	r4, ip, #2
 800535e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005362:	1c41      	adds	r1, r0, #1
 8005364:	4622      	mov	r2, r4
 8005366:	42ba      	cmp	r2, r7
 8005368:	d30a      	bcc.n	8005380 <__exponent+0x66>
 800536a:	f10d 0209 	add.w	r2, sp, #9
 800536e:	eba2 020c 	sub.w	r2, r2, ip
 8005372:	42bc      	cmp	r4, r7
 8005374:	bf88      	it	hi
 8005376:	2200      	movhi	r2, #0
 8005378:	4413      	add	r3, r2
 800537a:	1a18      	subs	r0, r3, r0
 800537c:	b003      	add	sp, #12
 800537e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005380:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005384:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005388:	e7ed      	b.n	8005366 <__exponent+0x4c>
 800538a:	2330      	movs	r3, #48	; 0x30
 800538c:	3130      	adds	r1, #48	; 0x30
 800538e:	7083      	strb	r3, [r0, #2]
 8005390:	70c1      	strb	r1, [r0, #3]
 8005392:	1d03      	adds	r3, r0, #4
 8005394:	e7f1      	b.n	800537a <__exponent+0x60>
	...

08005398 <_printf_float>:
 8005398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539c:	ed2d 8b02 	vpush	{d8}
 80053a0:	b08d      	sub	sp, #52	; 0x34
 80053a2:	460c      	mov	r4, r1
 80053a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80053a8:	4616      	mov	r6, r2
 80053aa:	461f      	mov	r7, r3
 80053ac:	4605      	mov	r5, r0
 80053ae:	f000 fcd9 	bl	8005d64 <_localeconv_r>
 80053b2:	f8d0 a000 	ldr.w	sl, [r0]
 80053b6:	4650      	mov	r0, sl
 80053b8:	f7fa ff5a 	bl	8000270 <strlen>
 80053bc:	2300      	movs	r3, #0
 80053be:	930a      	str	r3, [sp, #40]	; 0x28
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	9305      	str	r3, [sp, #20]
 80053c4:	f8d8 3000 	ldr.w	r3, [r8]
 80053c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80053cc:	3307      	adds	r3, #7
 80053ce:	f023 0307 	bic.w	r3, r3, #7
 80053d2:	f103 0208 	add.w	r2, r3, #8
 80053d6:	f8c8 2000 	str.w	r2, [r8]
 80053da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053e2:	9307      	str	r3, [sp, #28]
 80053e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80053e8:	ee08 0a10 	vmov	s16, r0
 80053ec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80053f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053f4:	4b9e      	ldr	r3, [pc, #632]	; (8005670 <_printf_float+0x2d8>)
 80053f6:	f04f 32ff 	mov.w	r2, #4294967295
 80053fa:	f7fb fb97 	bl	8000b2c <__aeabi_dcmpun>
 80053fe:	bb88      	cbnz	r0, 8005464 <_printf_float+0xcc>
 8005400:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005404:	4b9a      	ldr	r3, [pc, #616]	; (8005670 <_printf_float+0x2d8>)
 8005406:	f04f 32ff 	mov.w	r2, #4294967295
 800540a:	f7fb fb71 	bl	8000af0 <__aeabi_dcmple>
 800540e:	bb48      	cbnz	r0, 8005464 <_printf_float+0xcc>
 8005410:	2200      	movs	r2, #0
 8005412:	2300      	movs	r3, #0
 8005414:	4640      	mov	r0, r8
 8005416:	4649      	mov	r1, r9
 8005418:	f7fb fb60 	bl	8000adc <__aeabi_dcmplt>
 800541c:	b110      	cbz	r0, 8005424 <_printf_float+0x8c>
 800541e:	232d      	movs	r3, #45	; 0x2d
 8005420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005424:	4a93      	ldr	r2, [pc, #588]	; (8005674 <_printf_float+0x2dc>)
 8005426:	4b94      	ldr	r3, [pc, #592]	; (8005678 <_printf_float+0x2e0>)
 8005428:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800542c:	bf94      	ite	ls
 800542e:	4690      	movls	r8, r2
 8005430:	4698      	movhi	r8, r3
 8005432:	2303      	movs	r3, #3
 8005434:	6123      	str	r3, [r4, #16]
 8005436:	9b05      	ldr	r3, [sp, #20]
 8005438:	f023 0304 	bic.w	r3, r3, #4
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	f04f 0900 	mov.w	r9, #0
 8005442:	9700      	str	r7, [sp, #0]
 8005444:	4633      	mov	r3, r6
 8005446:	aa0b      	add	r2, sp, #44	; 0x2c
 8005448:	4621      	mov	r1, r4
 800544a:	4628      	mov	r0, r5
 800544c:	f000 f9da 	bl	8005804 <_printf_common>
 8005450:	3001      	adds	r0, #1
 8005452:	f040 8090 	bne.w	8005576 <_printf_float+0x1de>
 8005456:	f04f 30ff 	mov.w	r0, #4294967295
 800545a:	b00d      	add	sp, #52	; 0x34
 800545c:	ecbd 8b02 	vpop	{d8}
 8005460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005464:	4642      	mov	r2, r8
 8005466:	464b      	mov	r3, r9
 8005468:	4640      	mov	r0, r8
 800546a:	4649      	mov	r1, r9
 800546c:	f7fb fb5e 	bl	8000b2c <__aeabi_dcmpun>
 8005470:	b140      	cbz	r0, 8005484 <_printf_float+0xec>
 8005472:	464b      	mov	r3, r9
 8005474:	2b00      	cmp	r3, #0
 8005476:	bfbc      	itt	lt
 8005478:	232d      	movlt	r3, #45	; 0x2d
 800547a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800547e:	4a7f      	ldr	r2, [pc, #508]	; (800567c <_printf_float+0x2e4>)
 8005480:	4b7f      	ldr	r3, [pc, #508]	; (8005680 <_printf_float+0x2e8>)
 8005482:	e7d1      	b.n	8005428 <_printf_float+0x90>
 8005484:	6863      	ldr	r3, [r4, #4]
 8005486:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800548a:	9206      	str	r2, [sp, #24]
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	d13f      	bne.n	8005510 <_printf_float+0x178>
 8005490:	2306      	movs	r3, #6
 8005492:	6063      	str	r3, [r4, #4]
 8005494:	9b05      	ldr	r3, [sp, #20]
 8005496:	6861      	ldr	r1, [r4, #4]
 8005498:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800549c:	2300      	movs	r3, #0
 800549e:	9303      	str	r3, [sp, #12]
 80054a0:	ab0a      	add	r3, sp, #40	; 0x28
 80054a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80054a6:	ab09      	add	r3, sp, #36	; 0x24
 80054a8:	ec49 8b10 	vmov	d0, r8, r9
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	6022      	str	r2, [r4, #0]
 80054b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80054b4:	4628      	mov	r0, r5
 80054b6:	f7ff fece 	bl	8005256 <__cvt>
 80054ba:	9b06      	ldr	r3, [sp, #24]
 80054bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054be:	2b47      	cmp	r3, #71	; 0x47
 80054c0:	4680      	mov	r8, r0
 80054c2:	d108      	bne.n	80054d6 <_printf_float+0x13e>
 80054c4:	1cc8      	adds	r0, r1, #3
 80054c6:	db02      	blt.n	80054ce <_printf_float+0x136>
 80054c8:	6863      	ldr	r3, [r4, #4]
 80054ca:	4299      	cmp	r1, r3
 80054cc:	dd41      	ble.n	8005552 <_printf_float+0x1ba>
 80054ce:	f1ab 0302 	sub.w	r3, fp, #2
 80054d2:	fa5f fb83 	uxtb.w	fp, r3
 80054d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054da:	d820      	bhi.n	800551e <_printf_float+0x186>
 80054dc:	3901      	subs	r1, #1
 80054de:	465a      	mov	r2, fp
 80054e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054e4:	9109      	str	r1, [sp, #36]	; 0x24
 80054e6:	f7ff ff18 	bl	800531a <__exponent>
 80054ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054ec:	1813      	adds	r3, r2, r0
 80054ee:	2a01      	cmp	r2, #1
 80054f0:	4681      	mov	r9, r0
 80054f2:	6123      	str	r3, [r4, #16]
 80054f4:	dc02      	bgt.n	80054fc <_printf_float+0x164>
 80054f6:	6822      	ldr	r2, [r4, #0]
 80054f8:	07d2      	lsls	r2, r2, #31
 80054fa:	d501      	bpl.n	8005500 <_printf_float+0x168>
 80054fc:	3301      	adds	r3, #1
 80054fe:	6123      	str	r3, [r4, #16]
 8005500:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005504:	2b00      	cmp	r3, #0
 8005506:	d09c      	beq.n	8005442 <_printf_float+0xaa>
 8005508:	232d      	movs	r3, #45	; 0x2d
 800550a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800550e:	e798      	b.n	8005442 <_printf_float+0xaa>
 8005510:	9a06      	ldr	r2, [sp, #24]
 8005512:	2a47      	cmp	r2, #71	; 0x47
 8005514:	d1be      	bne.n	8005494 <_printf_float+0xfc>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1bc      	bne.n	8005494 <_printf_float+0xfc>
 800551a:	2301      	movs	r3, #1
 800551c:	e7b9      	b.n	8005492 <_printf_float+0xfa>
 800551e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005522:	d118      	bne.n	8005556 <_printf_float+0x1be>
 8005524:	2900      	cmp	r1, #0
 8005526:	6863      	ldr	r3, [r4, #4]
 8005528:	dd0b      	ble.n	8005542 <_printf_float+0x1aa>
 800552a:	6121      	str	r1, [r4, #16]
 800552c:	b913      	cbnz	r3, 8005534 <_printf_float+0x19c>
 800552e:	6822      	ldr	r2, [r4, #0]
 8005530:	07d0      	lsls	r0, r2, #31
 8005532:	d502      	bpl.n	800553a <_printf_float+0x1a2>
 8005534:	3301      	adds	r3, #1
 8005536:	440b      	add	r3, r1
 8005538:	6123      	str	r3, [r4, #16]
 800553a:	65a1      	str	r1, [r4, #88]	; 0x58
 800553c:	f04f 0900 	mov.w	r9, #0
 8005540:	e7de      	b.n	8005500 <_printf_float+0x168>
 8005542:	b913      	cbnz	r3, 800554a <_printf_float+0x1b2>
 8005544:	6822      	ldr	r2, [r4, #0]
 8005546:	07d2      	lsls	r2, r2, #31
 8005548:	d501      	bpl.n	800554e <_printf_float+0x1b6>
 800554a:	3302      	adds	r3, #2
 800554c:	e7f4      	b.n	8005538 <_printf_float+0x1a0>
 800554e:	2301      	movs	r3, #1
 8005550:	e7f2      	b.n	8005538 <_printf_float+0x1a0>
 8005552:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005558:	4299      	cmp	r1, r3
 800555a:	db05      	blt.n	8005568 <_printf_float+0x1d0>
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	6121      	str	r1, [r4, #16]
 8005560:	07d8      	lsls	r0, r3, #31
 8005562:	d5ea      	bpl.n	800553a <_printf_float+0x1a2>
 8005564:	1c4b      	adds	r3, r1, #1
 8005566:	e7e7      	b.n	8005538 <_printf_float+0x1a0>
 8005568:	2900      	cmp	r1, #0
 800556a:	bfd4      	ite	le
 800556c:	f1c1 0202 	rsble	r2, r1, #2
 8005570:	2201      	movgt	r2, #1
 8005572:	4413      	add	r3, r2
 8005574:	e7e0      	b.n	8005538 <_printf_float+0x1a0>
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	055a      	lsls	r2, r3, #21
 800557a:	d407      	bmi.n	800558c <_printf_float+0x1f4>
 800557c:	6923      	ldr	r3, [r4, #16]
 800557e:	4642      	mov	r2, r8
 8005580:	4631      	mov	r1, r6
 8005582:	4628      	mov	r0, r5
 8005584:	47b8      	blx	r7
 8005586:	3001      	adds	r0, #1
 8005588:	d12c      	bne.n	80055e4 <_printf_float+0x24c>
 800558a:	e764      	b.n	8005456 <_printf_float+0xbe>
 800558c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005590:	f240 80e0 	bls.w	8005754 <_printf_float+0x3bc>
 8005594:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005598:	2200      	movs	r2, #0
 800559a:	2300      	movs	r3, #0
 800559c:	f7fb fa94 	bl	8000ac8 <__aeabi_dcmpeq>
 80055a0:	2800      	cmp	r0, #0
 80055a2:	d034      	beq.n	800560e <_printf_float+0x276>
 80055a4:	4a37      	ldr	r2, [pc, #220]	; (8005684 <_printf_float+0x2ec>)
 80055a6:	2301      	movs	r3, #1
 80055a8:	4631      	mov	r1, r6
 80055aa:	4628      	mov	r0, r5
 80055ac:	47b8      	blx	r7
 80055ae:	3001      	adds	r0, #1
 80055b0:	f43f af51 	beq.w	8005456 <_printf_float+0xbe>
 80055b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055b8:	429a      	cmp	r2, r3
 80055ba:	db02      	blt.n	80055c2 <_printf_float+0x22a>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	07d8      	lsls	r0, r3, #31
 80055c0:	d510      	bpl.n	80055e4 <_printf_float+0x24c>
 80055c2:	ee18 3a10 	vmov	r3, s16
 80055c6:	4652      	mov	r2, sl
 80055c8:	4631      	mov	r1, r6
 80055ca:	4628      	mov	r0, r5
 80055cc:	47b8      	blx	r7
 80055ce:	3001      	adds	r0, #1
 80055d0:	f43f af41 	beq.w	8005456 <_printf_float+0xbe>
 80055d4:	f04f 0800 	mov.w	r8, #0
 80055d8:	f104 091a 	add.w	r9, r4, #26
 80055dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055de:	3b01      	subs	r3, #1
 80055e0:	4543      	cmp	r3, r8
 80055e2:	dc09      	bgt.n	80055f8 <_printf_float+0x260>
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	079b      	lsls	r3, r3, #30
 80055e8:	f100 8107 	bmi.w	80057fa <_printf_float+0x462>
 80055ec:	68e0      	ldr	r0, [r4, #12]
 80055ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055f0:	4298      	cmp	r0, r3
 80055f2:	bfb8      	it	lt
 80055f4:	4618      	movlt	r0, r3
 80055f6:	e730      	b.n	800545a <_printf_float+0xc2>
 80055f8:	2301      	movs	r3, #1
 80055fa:	464a      	mov	r2, r9
 80055fc:	4631      	mov	r1, r6
 80055fe:	4628      	mov	r0, r5
 8005600:	47b8      	blx	r7
 8005602:	3001      	adds	r0, #1
 8005604:	f43f af27 	beq.w	8005456 <_printf_float+0xbe>
 8005608:	f108 0801 	add.w	r8, r8, #1
 800560c:	e7e6      	b.n	80055dc <_printf_float+0x244>
 800560e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005610:	2b00      	cmp	r3, #0
 8005612:	dc39      	bgt.n	8005688 <_printf_float+0x2f0>
 8005614:	4a1b      	ldr	r2, [pc, #108]	; (8005684 <_printf_float+0x2ec>)
 8005616:	2301      	movs	r3, #1
 8005618:	4631      	mov	r1, r6
 800561a:	4628      	mov	r0, r5
 800561c:	47b8      	blx	r7
 800561e:	3001      	adds	r0, #1
 8005620:	f43f af19 	beq.w	8005456 <_printf_float+0xbe>
 8005624:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005628:	4313      	orrs	r3, r2
 800562a:	d102      	bne.n	8005632 <_printf_float+0x29a>
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	07d9      	lsls	r1, r3, #31
 8005630:	d5d8      	bpl.n	80055e4 <_printf_float+0x24c>
 8005632:	ee18 3a10 	vmov	r3, s16
 8005636:	4652      	mov	r2, sl
 8005638:	4631      	mov	r1, r6
 800563a:	4628      	mov	r0, r5
 800563c:	47b8      	blx	r7
 800563e:	3001      	adds	r0, #1
 8005640:	f43f af09 	beq.w	8005456 <_printf_float+0xbe>
 8005644:	f04f 0900 	mov.w	r9, #0
 8005648:	f104 0a1a 	add.w	sl, r4, #26
 800564c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800564e:	425b      	negs	r3, r3
 8005650:	454b      	cmp	r3, r9
 8005652:	dc01      	bgt.n	8005658 <_printf_float+0x2c0>
 8005654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005656:	e792      	b.n	800557e <_printf_float+0x1e6>
 8005658:	2301      	movs	r3, #1
 800565a:	4652      	mov	r2, sl
 800565c:	4631      	mov	r1, r6
 800565e:	4628      	mov	r0, r5
 8005660:	47b8      	blx	r7
 8005662:	3001      	adds	r0, #1
 8005664:	f43f aef7 	beq.w	8005456 <_printf_float+0xbe>
 8005668:	f109 0901 	add.w	r9, r9, #1
 800566c:	e7ee      	b.n	800564c <_printf_float+0x2b4>
 800566e:	bf00      	nop
 8005670:	7fefffff 	.word	0x7fefffff
 8005674:	08007c74 	.word	0x08007c74
 8005678:	08007c78 	.word	0x08007c78
 800567c:	08007c7c 	.word	0x08007c7c
 8005680:	08007c80 	.word	0x08007c80
 8005684:	08007c84 	.word	0x08007c84
 8005688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800568a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800568c:	429a      	cmp	r2, r3
 800568e:	bfa8      	it	ge
 8005690:	461a      	movge	r2, r3
 8005692:	2a00      	cmp	r2, #0
 8005694:	4691      	mov	r9, r2
 8005696:	dc37      	bgt.n	8005708 <_printf_float+0x370>
 8005698:	f04f 0b00 	mov.w	fp, #0
 800569c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056a0:	f104 021a 	add.w	r2, r4, #26
 80056a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056a6:	9305      	str	r3, [sp, #20]
 80056a8:	eba3 0309 	sub.w	r3, r3, r9
 80056ac:	455b      	cmp	r3, fp
 80056ae:	dc33      	bgt.n	8005718 <_printf_float+0x380>
 80056b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056b4:	429a      	cmp	r2, r3
 80056b6:	db3b      	blt.n	8005730 <_printf_float+0x398>
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	07da      	lsls	r2, r3, #31
 80056bc:	d438      	bmi.n	8005730 <_printf_float+0x398>
 80056be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80056c2:	eba2 0903 	sub.w	r9, r2, r3
 80056c6:	9b05      	ldr	r3, [sp, #20]
 80056c8:	1ad2      	subs	r2, r2, r3
 80056ca:	4591      	cmp	r9, r2
 80056cc:	bfa8      	it	ge
 80056ce:	4691      	movge	r9, r2
 80056d0:	f1b9 0f00 	cmp.w	r9, #0
 80056d4:	dc35      	bgt.n	8005742 <_printf_float+0x3aa>
 80056d6:	f04f 0800 	mov.w	r8, #0
 80056da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056de:	f104 0a1a 	add.w	sl, r4, #26
 80056e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056e6:	1a9b      	subs	r3, r3, r2
 80056e8:	eba3 0309 	sub.w	r3, r3, r9
 80056ec:	4543      	cmp	r3, r8
 80056ee:	f77f af79 	ble.w	80055e4 <_printf_float+0x24c>
 80056f2:	2301      	movs	r3, #1
 80056f4:	4652      	mov	r2, sl
 80056f6:	4631      	mov	r1, r6
 80056f8:	4628      	mov	r0, r5
 80056fa:	47b8      	blx	r7
 80056fc:	3001      	adds	r0, #1
 80056fe:	f43f aeaa 	beq.w	8005456 <_printf_float+0xbe>
 8005702:	f108 0801 	add.w	r8, r8, #1
 8005706:	e7ec      	b.n	80056e2 <_printf_float+0x34a>
 8005708:	4613      	mov	r3, r2
 800570a:	4631      	mov	r1, r6
 800570c:	4642      	mov	r2, r8
 800570e:	4628      	mov	r0, r5
 8005710:	47b8      	blx	r7
 8005712:	3001      	adds	r0, #1
 8005714:	d1c0      	bne.n	8005698 <_printf_float+0x300>
 8005716:	e69e      	b.n	8005456 <_printf_float+0xbe>
 8005718:	2301      	movs	r3, #1
 800571a:	4631      	mov	r1, r6
 800571c:	4628      	mov	r0, r5
 800571e:	9205      	str	r2, [sp, #20]
 8005720:	47b8      	blx	r7
 8005722:	3001      	adds	r0, #1
 8005724:	f43f ae97 	beq.w	8005456 <_printf_float+0xbe>
 8005728:	9a05      	ldr	r2, [sp, #20]
 800572a:	f10b 0b01 	add.w	fp, fp, #1
 800572e:	e7b9      	b.n	80056a4 <_printf_float+0x30c>
 8005730:	ee18 3a10 	vmov	r3, s16
 8005734:	4652      	mov	r2, sl
 8005736:	4631      	mov	r1, r6
 8005738:	4628      	mov	r0, r5
 800573a:	47b8      	blx	r7
 800573c:	3001      	adds	r0, #1
 800573e:	d1be      	bne.n	80056be <_printf_float+0x326>
 8005740:	e689      	b.n	8005456 <_printf_float+0xbe>
 8005742:	9a05      	ldr	r2, [sp, #20]
 8005744:	464b      	mov	r3, r9
 8005746:	4442      	add	r2, r8
 8005748:	4631      	mov	r1, r6
 800574a:	4628      	mov	r0, r5
 800574c:	47b8      	blx	r7
 800574e:	3001      	adds	r0, #1
 8005750:	d1c1      	bne.n	80056d6 <_printf_float+0x33e>
 8005752:	e680      	b.n	8005456 <_printf_float+0xbe>
 8005754:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005756:	2a01      	cmp	r2, #1
 8005758:	dc01      	bgt.n	800575e <_printf_float+0x3c6>
 800575a:	07db      	lsls	r3, r3, #31
 800575c:	d53a      	bpl.n	80057d4 <_printf_float+0x43c>
 800575e:	2301      	movs	r3, #1
 8005760:	4642      	mov	r2, r8
 8005762:	4631      	mov	r1, r6
 8005764:	4628      	mov	r0, r5
 8005766:	47b8      	blx	r7
 8005768:	3001      	adds	r0, #1
 800576a:	f43f ae74 	beq.w	8005456 <_printf_float+0xbe>
 800576e:	ee18 3a10 	vmov	r3, s16
 8005772:	4652      	mov	r2, sl
 8005774:	4631      	mov	r1, r6
 8005776:	4628      	mov	r0, r5
 8005778:	47b8      	blx	r7
 800577a:	3001      	adds	r0, #1
 800577c:	f43f ae6b 	beq.w	8005456 <_printf_float+0xbe>
 8005780:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005784:	2200      	movs	r2, #0
 8005786:	2300      	movs	r3, #0
 8005788:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800578c:	f7fb f99c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005790:	b9d8      	cbnz	r0, 80057ca <_printf_float+0x432>
 8005792:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005796:	f108 0201 	add.w	r2, r8, #1
 800579a:	4631      	mov	r1, r6
 800579c:	4628      	mov	r0, r5
 800579e:	47b8      	blx	r7
 80057a0:	3001      	adds	r0, #1
 80057a2:	d10e      	bne.n	80057c2 <_printf_float+0x42a>
 80057a4:	e657      	b.n	8005456 <_printf_float+0xbe>
 80057a6:	2301      	movs	r3, #1
 80057a8:	4652      	mov	r2, sl
 80057aa:	4631      	mov	r1, r6
 80057ac:	4628      	mov	r0, r5
 80057ae:	47b8      	blx	r7
 80057b0:	3001      	adds	r0, #1
 80057b2:	f43f ae50 	beq.w	8005456 <_printf_float+0xbe>
 80057b6:	f108 0801 	add.w	r8, r8, #1
 80057ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057bc:	3b01      	subs	r3, #1
 80057be:	4543      	cmp	r3, r8
 80057c0:	dcf1      	bgt.n	80057a6 <_printf_float+0x40e>
 80057c2:	464b      	mov	r3, r9
 80057c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057c8:	e6da      	b.n	8005580 <_printf_float+0x1e8>
 80057ca:	f04f 0800 	mov.w	r8, #0
 80057ce:	f104 0a1a 	add.w	sl, r4, #26
 80057d2:	e7f2      	b.n	80057ba <_printf_float+0x422>
 80057d4:	2301      	movs	r3, #1
 80057d6:	4642      	mov	r2, r8
 80057d8:	e7df      	b.n	800579a <_printf_float+0x402>
 80057da:	2301      	movs	r3, #1
 80057dc:	464a      	mov	r2, r9
 80057de:	4631      	mov	r1, r6
 80057e0:	4628      	mov	r0, r5
 80057e2:	47b8      	blx	r7
 80057e4:	3001      	adds	r0, #1
 80057e6:	f43f ae36 	beq.w	8005456 <_printf_float+0xbe>
 80057ea:	f108 0801 	add.w	r8, r8, #1
 80057ee:	68e3      	ldr	r3, [r4, #12]
 80057f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057f2:	1a5b      	subs	r3, r3, r1
 80057f4:	4543      	cmp	r3, r8
 80057f6:	dcf0      	bgt.n	80057da <_printf_float+0x442>
 80057f8:	e6f8      	b.n	80055ec <_printf_float+0x254>
 80057fa:	f04f 0800 	mov.w	r8, #0
 80057fe:	f104 0919 	add.w	r9, r4, #25
 8005802:	e7f4      	b.n	80057ee <_printf_float+0x456>

08005804 <_printf_common>:
 8005804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005808:	4616      	mov	r6, r2
 800580a:	4699      	mov	r9, r3
 800580c:	688a      	ldr	r2, [r1, #8]
 800580e:	690b      	ldr	r3, [r1, #16]
 8005810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005814:	4293      	cmp	r3, r2
 8005816:	bfb8      	it	lt
 8005818:	4613      	movlt	r3, r2
 800581a:	6033      	str	r3, [r6, #0]
 800581c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005820:	4607      	mov	r7, r0
 8005822:	460c      	mov	r4, r1
 8005824:	b10a      	cbz	r2, 800582a <_printf_common+0x26>
 8005826:	3301      	adds	r3, #1
 8005828:	6033      	str	r3, [r6, #0]
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	0699      	lsls	r1, r3, #26
 800582e:	bf42      	ittt	mi
 8005830:	6833      	ldrmi	r3, [r6, #0]
 8005832:	3302      	addmi	r3, #2
 8005834:	6033      	strmi	r3, [r6, #0]
 8005836:	6825      	ldr	r5, [r4, #0]
 8005838:	f015 0506 	ands.w	r5, r5, #6
 800583c:	d106      	bne.n	800584c <_printf_common+0x48>
 800583e:	f104 0a19 	add.w	sl, r4, #25
 8005842:	68e3      	ldr	r3, [r4, #12]
 8005844:	6832      	ldr	r2, [r6, #0]
 8005846:	1a9b      	subs	r3, r3, r2
 8005848:	42ab      	cmp	r3, r5
 800584a:	dc26      	bgt.n	800589a <_printf_common+0x96>
 800584c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005850:	1e13      	subs	r3, r2, #0
 8005852:	6822      	ldr	r2, [r4, #0]
 8005854:	bf18      	it	ne
 8005856:	2301      	movne	r3, #1
 8005858:	0692      	lsls	r2, r2, #26
 800585a:	d42b      	bmi.n	80058b4 <_printf_common+0xb0>
 800585c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005860:	4649      	mov	r1, r9
 8005862:	4638      	mov	r0, r7
 8005864:	47c0      	blx	r8
 8005866:	3001      	adds	r0, #1
 8005868:	d01e      	beq.n	80058a8 <_printf_common+0xa4>
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	6922      	ldr	r2, [r4, #16]
 800586e:	f003 0306 	and.w	r3, r3, #6
 8005872:	2b04      	cmp	r3, #4
 8005874:	bf02      	ittt	eq
 8005876:	68e5      	ldreq	r5, [r4, #12]
 8005878:	6833      	ldreq	r3, [r6, #0]
 800587a:	1aed      	subeq	r5, r5, r3
 800587c:	68a3      	ldr	r3, [r4, #8]
 800587e:	bf0c      	ite	eq
 8005880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005884:	2500      	movne	r5, #0
 8005886:	4293      	cmp	r3, r2
 8005888:	bfc4      	itt	gt
 800588a:	1a9b      	subgt	r3, r3, r2
 800588c:	18ed      	addgt	r5, r5, r3
 800588e:	2600      	movs	r6, #0
 8005890:	341a      	adds	r4, #26
 8005892:	42b5      	cmp	r5, r6
 8005894:	d11a      	bne.n	80058cc <_printf_common+0xc8>
 8005896:	2000      	movs	r0, #0
 8005898:	e008      	b.n	80058ac <_printf_common+0xa8>
 800589a:	2301      	movs	r3, #1
 800589c:	4652      	mov	r2, sl
 800589e:	4649      	mov	r1, r9
 80058a0:	4638      	mov	r0, r7
 80058a2:	47c0      	blx	r8
 80058a4:	3001      	adds	r0, #1
 80058a6:	d103      	bne.n	80058b0 <_printf_common+0xac>
 80058a8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b0:	3501      	adds	r5, #1
 80058b2:	e7c6      	b.n	8005842 <_printf_common+0x3e>
 80058b4:	18e1      	adds	r1, r4, r3
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	2030      	movs	r0, #48	; 0x30
 80058ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058be:	4422      	add	r2, r4
 80058c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058c8:	3302      	adds	r3, #2
 80058ca:	e7c7      	b.n	800585c <_printf_common+0x58>
 80058cc:	2301      	movs	r3, #1
 80058ce:	4622      	mov	r2, r4
 80058d0:	4649      	mov	r1, r9
 80058d2:	4638      	mov	r0, r7
 80058d4:	47c0      	blx	r8
 80058d6:	3001      	adds	r0, #1
 80058d8:	d0e6      	beq.n	80058a8 <_printf_common+0xa4>
 80058da:	3601      	adds	r6, #1
 80058dc:	e7d9      	b.n	8005892 <_printf_common+0x8e>
	...

080058e0 <_printf_i>:
 80058e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058e4:	7e0f      	ldrb	r7, [r1, #24]
 80058e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058e8:	2f78      	cmp	r7, #120	; 0x78
 80058ea:	4691      	mov	r9, r2
 80058ec:	4680      	mov	r8, r0
 80058ee:	460c      	mov	r4, r1
 80058f0:	469a      	mov	sl, r3
 80058f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058f6:	d807      	bhi.n	8005908 <_printf_i+0x28>
 80058f8:	2f62      	cmp	r7, #98	; 0x62
 80058fa:	d80a      	bhi.n	8005912 <_printf_i+0x32>
 80058fc:	2f00      	cmp	r7, #0
 80058fe:	f000 80d4 	beq.w	8005aaa <_printf_i+0x1ca>
 8005902:	2f58      	cmp	r7, #88	; 0x58
 8005904:	f000 80c0 	beq.w	8005a88 <_printf_i+0x1a8>
 8005908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800590c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005910:	e03a      	b.n	8005988 <_printf_i+0xa8>
 8005912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005916:	2b15      	cmp	r3, #21
 8005918:	d8f6      	bhi.n	8005908 <_printf_i+0x28>
 800591a:	a101      	add	r1, pc, #4	; (adr r1, 8005920 <_printf_i+0x40>)
 800591c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005920:	08005979 	.word	0x08005979
 8005924:	0800598d 	.word	0x0800598d
 8005928:	08005909 	.word	0x08005909
 800592c:	08005909 	.word	0x08005909
 8005930:	08005909 	.word	0x08005909
 8005934:	08005909 	.word	0x08005909
 8005938:	0800598d 	.word	0x0800598d
 800593c:	08005909 	.word	0x08005909
 8005940:	08005909 	.word	0x08005909
 8005944:	08005909 	.word	0x08005909
 8005948:	08005909 	.word	0x08005909
 800594c:	08005a91 	.word	0x08005a91
 8005950:	080059b9 	.word	0x080059b9
 8005954:	08005a4b 	.word	0x08005a4b
 8005958:	08005909 	.word	0x08005909
 800595c:	08005909 	.word	0x08005909
 8005960:	08005ab3 	.word	0x08005ab3
 8005964:	08005909 	.word	0x08005909
 8005968:	080059b9 	.word	0x080059b9
 800596c:	08005909 	.word	0x08005909
 8005970:	08005909 	.word	0x08005909
 8005974:	08005a53 	.word	0x08005a53
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	1d1a      	adds	r2, r3, #4
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	602a      	str	r2, [r5, #0]
 8005980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005988:	2301      	movs	r3, #1
 800598a:	e09f      	b.n	8005acc <_printf_i+0x1ec>
 800598c:	6820      	ldr	r0, [r4, #0]
 800598e:	682b      	ldr	r3, [r5, #0]
 8005990:	0607      	lsls	r7, r0, #24
 8005992:	f103 0104 	add.w	r1, r3, #4
 8005996:	6029      	str	r1, [r5, #0]
 8005998:	d501      	bpl.n	800599e <_printf_i+0xbe>
 800599a:	681e      	ldr	r6, [r3, #0]
 800599c:	e003      	b.n	80059a6 <_printf_i+0xc6>
 800599e:	0646      	lsls	r6, r0, #25
 80059a0:	d5fb      	bpl.n	800599a <_printf_i+0xba>
 80059a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059a6:	2e00      	cmp	r6, #0
 80059a8:	da03      	bge.n	80059b2 <_printf_i+0xd2>
 80059aa:	232d      	movs	r3, #45	; 0x2d
 80059ac:	4276      	negs	r6, r6
 80059ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b2:	485a      	ldr	r0, [pc, #360]	; (8005b1c <_printf_i+0x23c>)
 80059b4:	230a      	movs	r3, #10
 80059b6:	e012      	b.n	80059de <_printf_i+0xfe>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	6820      	ldr	r0, [r4, #0]
 80059bc:	1d19      	adds	r1, r3, #4
 80059be:	6029      	str	r1, [r5, #0]
 80059c0:	0605      	lsls	r5, r0, #24
 80059c2:	d501      	bpl.n	80059c8 <_printf_i+0xe8>
 80059c4:	681e      	ldr	r6, [r3, #0]
 80059c6:	e002      	b.n	80059ce <_printf_i+0xee>
 80059c8:	0641      	lsls	r1, r0, #25
 80059ca:	d5fb      	bpl.n	80059c4 <_printf_i+0xe4>
 80059cc:	881e      	ldrh	r6, [r3, #0]
 80059ce:	4853      	ldr	r0, [pc, #332]	; (8005b1c <_printf_i+0x23c>)
 80059d0:	2f6f      	cmp	r7, #111	; 0x6f
 80059d2:	bf0c      	ite	eq
 80059d4:	2308      	moveq	r3, #8
 80059d6:	230a      	movne	r3, #10
 80059d8:	2100      	movs	r1, #0
 80059da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059de:	6865      	ldr	r5, [r4, #4]
 80059e0:	60a5      	str	r5, [r4, #8]
 80059e2:	2d00      	cmp	r5, #0
 80059e4:	bfa2      	ittt	ge
 80059e6:	6821      	ldrge	r1, [r4, #0]
 80059e8:	f021 0104 	bicge.w	r1, r1, #4
 80059ec:	6021      	strge	r1, [r4, #0]
 80059ee:	b90e      	cbnz	r6, 80059f4 <_printf_i+0x114>
 80059f0:	2d00      	cmp	r5, #0
 80059f2:	d04b      	beq.n	8005a8c <_printf_i+0x1ac>
 80059f4:	4615      	mov	r5, r2
 80059f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80059fa:	fb03 6711 	mls	r7, r3, r1, r6
 80059fe:	5dc7      	ldrb	r7, [r0, r7]
 8005a00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a04:	4637      	mov	r7, r6
 8005a06:	42bb      	cmp	r3, r7
 8005a08:	460e      	mov	r6, r1
 8005a0a:	d9f4      	bls.n	80059f6 <_printf_i+0x116>
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d10b      	bne.n	8005a28 <_printf_i+0x148>
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	07de      	lsls	r6, r3, #31
 8005a14:	d508      	bpl.n	8005a28 <_printf_i+0x148>
 8005a16:	6923      	ldr	r3, [r4, #16]
 8005a18:	6861      	ldr	r1, [r4, #4]
 8005a1a:	4299      	cmp	r1, r3
 8005a1c:	bfde      	ittt	le
 8005a1e:	2330      	movle	r3, #48	; 0x30
 8005a20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a28:	1b52      	subs	r2, r2, r5
 8005a2a:	6122      	str	r2, [r4, #16]
 8005a2c:	f8cd a000 	str.w	sl, [sp]
 8005a30:	464b      	mov	r3, r9
 8005a32:	aa03      	add	r2, sp, #12
 8005a34:	4621      	mov	r1, r4
 8005a36:	4640      	mov	r0, r8
 8005a38:	f7ff fee4 	bl	8005804 <_printf_common>
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d14a      	bne.n	8005ad6 <_printf_i+0x1f6>
 8005a40:	f04f 30ff 	mov.w	r0, #4294967295
 8005a44:	b004      	add	sp, #16
 8005a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	f043 0320 	orr.w	r3, r3, #32
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	4833      	ldr	r0, [pc, #204]	; (8005b20 <_printf_i+0x240>)
 8005a54:	2778      	movs	r7, #120	; 0x78
 8005a56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	6829      	ldr	r1, [r5, #0]
 8005a5e:	061f      	lsls	r7, r3, #24
 8005a60:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a64:	d402      	bmi.n	8005a6c <_printf_i+0x18c>
 8005a66:	065f      	lsls	r7, r3, #25
 8005a68:	bf48      	it	mi
 8005a6a:	b2b6      	uxthmi	r6, r6
 8005a6c:	07df      	lsls	r7, r3, #31
 8005a6e:	bf48      	it	mi
 8005a70:	f043 0320 	orrmi.w	r3, r3, #32
 8005a74:	6029      	str	r1, [r5, #0]
 8005a76:	bf48      	it	mi
 8005a78:	6023      	strmi	r3, [r4, #0]
 8005a7a:	b91e      	cbnz	r6, 8005a84 <_printf_i+0x1a4>
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	f023 0320 	bic.w	r3, r3, #32
 8005a82:	6023      	str	r3, [r4, #0]
 8005a84:	2310      	movs	r3, #16
 8005a86:	e7a7      	b.n	80059d8 <_printf_i+0xf8>
 8005a88:	4824      	ldr	r0, [pc, #144]	; (8005b1c <_printf_i+0x23c>)
 8005a8a:	e7e4      	b.n	8005a56 <_printf_i+0x176>
 8005a8c:	4615      	mov	r5, r2
 8005a8e:	e7bd      	b.n	8005a0c <_printf_i+0x12c>
 8005a90:	682b      	ldr	r3, [r5, #0]
 8005a92:	6826      	ldr	r6, [r4, #0]
 8005a94:	6961      	ldr	r1, [r4, #20]
 8005a96:	1d18      	adds	r0, r3, #4
 8005a98:	6028      	str	r0, [r5, #0]
 8005a9a:	0635      	lsls	r5, r6, #24
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	d501      	bpl.n	8005aa4 <_printf_i+0x1c4>
 8005aa0:	6019      	str	r1, [r3, #0]
 8005aa2:	e002      	b.n	8005aaa <_printf_i+0x1ca>
 8005aa4:	0670      	lsls	r0, r6, #25
 8005aa6:	d5fb      	bpl.n	8005aa0 <_printf_i+0x1c0>
 8005aa8:	8019      	strh	r1, [r3, #0]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	6123      	str	r3, [r4, #16]
 8005aae:	4615      	mov	r5, r2
 8005ab0:	e7bc      	b.n	8005a2c <_printf_i+0x14c>
 8005ab2:	682b      	ldr	r3, [r5, #0]
 8005ab4:	1d1a      	adds	r2, r3, #4
 8005ab6:	602a      	str	r2, [r5, #0]
 8005ab8:	681d      	ldr	r5, [r3, #0]
 8005aba:	6862      	ldr	r2, [r4, #4]
 8005abc:	2100      	movs	r1, #0
 8005abe:	4628      	mov	r0, r5
 8005ac0:	f7fa fb86 	bl	80001d0 <memchr>
 8005ac4:	b108      	cbz	r0, 8005aca <_printf_i+0x1ea>
 8005ac6:	1b40      	subs	r0, r0, r5
 8005ac8:	6060      	str	r0, [r4, #4]
 8005aca:	6863      	ldr	r3, [r4, #4]
 8005acc:	6123      	str	r3, [r4, #16]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ad4:	e7aa      	b.n	8005a2c <_printf_i+0x14c>
 8005ad6:	6923      	ldr	r3, [r4, #16]
 8005ad8:	462a      	mov	r2, r5
 8005ada:	4649      	mov	r1, r9
 8005adc:	4640      	mov	r0, r8
 8005ade:	47d0      	blx	sl
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	d0ad      	beq.n	8005a40 <_printf_i+0x160>
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	079b      	lsls	r3, r3, #30
 8005ae8:	d413      	bmi.n	8005b12 <_printf_i+0x232>
 8005aea:	68e0      	ldr	r0, [r4, #12]
 8005aec:	9b03      	ldr	r3, [sp, #12]
 8005aee:	4298      	cmp	r0, r3
 8005af0:	bfb8      	it	lt
 8005af2:	4618      	movlt	r0, r3
 8005af4:	e7a6      	b.n	8005a44 <_printf_i+0x164>
 8005af6:	2301      	movs	r3, #1
 8005af8:	4632      	mov	r2, r6
 8005afa:	4649      	mov	r1, r9
 8005afc:	4640      	mov	r0, r8
 8005afe:	47d0      	blx	sl
 8005b00:	3001      	adds	r0, #1
 8005b02:	d09d      	beq.n	8005a40 <_printf_i+0x160>
 8005b04:	3501      	adds	r5, #1
 8005b06:	68e3      	ldr	r3, [r4, #12]
 8005b08:	9903      	ldr	r1, [sp, #12]
 8005b0a:	1a5b      	subs	r3, r3, r1
 8005b0c:	42ab      	cmp	r3, r5
 8005b0e:	dcf2      	bgt.n	8005af6 <_printf_i+0x216>
 8005b10:	e7eb      	b.n	8005aea <_printf_i+0x20a>
 8005b12:	2500      	movs	r5, #0
 8005b14:	f104 0619 	add.w	r6, r4, #25
 8005b18:	e7f5      	b.n	8005b06 <_printf_i+0x226>
 8005b1a:	bf00      	nop
 8005b1c:	08007c86 	.word	0x08007c86
 8005b20:	08007c97 	.word	0x08007c97

08005b24 <std>:
 8005b24:	2300      	movs	r3, #0
 8005b26:	b510      	push	{r4, lr}
 8005b28:	4604      	mov	r4, r0
 8005b2a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b32:	6083      	str	r3, [r0, #8]
 8005b34:	8181      	strh	r1, [r0, #12]
 8005b36:	6643      	str	r3, [r0, #100]	; 0x64
 8005b38:	81c2      	strh	r2, [r0, #14]
 8005b3a:	6183      	str	r3, [r0, #24]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	2208      	movs	r2, #8
 8005b40:	305c      	adds	r0, #92	; 0x5c
 8005b42:	f000 f906 	bl	8005d52 <memset>
 8005b46:	4b0d      	ldr	r3, [pc, #52]	; (8005b7c <std+0x58>)
 8005b48:	6263      	str	r3, [r4, #36]	; 0x24
 8005b4a:	4b0d      	ldr	r3, [pc, #52]	; (8005b80 <std+0x5c>)
 8005b4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b4e:	4b0d      	ldr	r3, [pc, #52]	; (8005b84 <std+0x60>)
 8005b50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b52:	4b0d      	ldr	r3, [pc, #52]	; (8005b88 <std+0x64>)
 8005b54:	6323      	str	r3, [r4, #48]	; 0x30
 8005b56:	4b0d      	ldr	r3, [pc, #52]	; (8005b8c <std+0x68>)
 8005b58:	6224      	str	r4, [r4, #32]
 8005b5a:	429c      	cmp	r4, r3
 8005b5c:	d006      	beq.n	8005b6c <std+0x48>
 8005b5e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005b62:	4294      	cmp	r4, r2
 8005b64:	d002      	beq.n	8005b6c <std+0x48>
 8005b66:	33d0      	adds	r3, #208	; 0xd0
 8005b68:	429c      	cmp	r4, r3
 8005b6a:	d105      	bne.n	8005b78 <std+0x54>
 8005b6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b74:	f000 b96a 	b.w	8005e4c <__retarget_lock_init_recursive>
 8005b78:	bd10      	pop	{r4, pc}
 8005b7a:	bf00      	nop
 8005b7c:	08005ccd 	.word	0x08005ccd
 8005b80:	08005cef 	.word	0x08005cef
 8005b84:	08005d27 	.word	0x08005d27
 8005b88:	08005d4b 	.word	0x08005d4b
 8005b8c:	200002e4 	.word	0x200002e4

08005b90 <stdio_exit_handler>:
 8005b90:	4a02      	ldr	r2, [pc, #8]	; (8005b9c <stdio_exit_handler+0xc>)
 8005b92:	4903      	ldr	r1, [pc, #12]	; (8005ba0 <stdio_exit_handler+0x10>)
 8005b94:	4803      	ldr	r0, [pc, #12]	; (8005ba4 <stdio_exit_handler+0x14>)
 8005b96:	f000 b869 	b.w	8005c6c <_fwalk_sglue>
 8005b9a:	bf00      	nop
 8005b9c:	2000000c 	.word	0x2000000c
 8005ba0:	080077d9 	.word	0x080077d9
 8005ba4:	20000018 	.word	0x20000018

08005ba8 <cleanup_stdio>:
 8005ba8:	6841      	ldr	r1, [r0, #4]
 8005baa:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <cleanup_stdio+0x34>)
 8005bac:	4299      	cmp	r1, r3
 8005bae:	b510      	push	{r4, lr}
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	d001      	beq.n	8005bb8 <cleanup_stdio+0x10>
 8005bb4:	f001 fe10 	bl	80077d8 <_fflush_r>
 8005bb8:	68a1      	ldr	r1, [r4, #8]
 8005bba:	4b09      	ldr	r3, [pc, #36]	; (8005be0 <cleanup_stdio+0x38>)
 8005bbc:	4299      	cmp	r1, r3
 8005bbe:	d002      	beq.n	8005bc6 <cleanup_stdio+0x1e>
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f001 fe09 	bl	80077d8 <_fflush_r>
 8005bc6:	68e1      	ldr	r1, [r4, #12]
 8005bc8:	4b06      	ldr	r3, [pc, #24]	; (8005be4 <cleanup_stdio+0x3c>)
 8005bca:	4299      	cmp	r1, r3
 8005bcc:	d004      	beq.n	8005bd8 <cleanup_stdio+0x30>
 8005bce:	4620      	mov	r0, r4
 8005bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bd4:	f001 be00 	b.w	80077d8 <_fflush_r>
 8005bd8:	bd10      	pop	{r4, pc}
 8005bda:	bf00      	nop
 8005bdc:	200002e4 	.word	0x200002e4
 8005be0:	2000034c 	.word	0x2000034c
 8005be4:	200003b4 	.word	0x200003b4

08005be8 <global_stdio_init.part.0>:
 8005be8:	b510      	push	{r4, lr}
 8005bea:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <global_stdio_init.part.0+0x30>)
 8005bec:	4c0b      	ldr	r4, [pc, #44]	; (8005c1c <global_stdio_init.part.0+0x34>)
 8005bee:	4a0c      	ldr	r2, [pc, #48]	; (8005c20 <global_stdio_init.part.0+0x38>)
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2104      	movs	r1, #4
 8005bf8:	f7ff ff94 	bl	8005b24 <std>
 8005bfc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c00:	2201      	movs	r2, #1
 8005c02:	2109      	movs	r1, #9
 8005c04:	f7ff ff8e 	bl	8005b24 <std>
 8005c08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c12:	2112      	movs	r1, #18
 8005c14:	f7ff bf86 	b.w	8005b24 <std>
 8005c18:	2000041c 	.word	0x2000041c
 8005c1c:	200002e4 	.word	0x200002e4
 8005c20:	08005b91 	.word	0x08005b91

08005c24 <__sfp_lock_acquire>:
 8005c24:	4801      	ldr	r0, [pc, #4]	; (8005c2c <__sfp_lock_acquire+0x8>)
 8005c26:	f000 b912 	b.w	8005e4e <__retarget_lock_acquire_recursive>
 8005c2a:	bf00      	nop
 8005c2c:	20000425 	.word	0x20000425

08005c30 <__sfp_lock_release>:
 8005c30:	4801      	ldr	r0, [pc, #4]	; (8005c38 <__sfp_lock_release+0x8>)
 8005c32:	f000 b90d 	b.w	8005e50 <__retarget_lock_release_recursive>
 8005c36:	bf00      	nop
 8005c38:	20000425 	.word	0x20000425

08005c3c <__sinit>:
 8005c3c:	b510      	push	{r4, lr}
 8005c3e:	4604      	mov	r4, r0
 8005c40:	f7ff fff0 	bl	8005c24 <__sfp_lock_acquire>
 8005c44:	6a23      	ldr	r3, [r4, #32]
 8005c46:	b11b      	cbz	r3, 8005c50 <__sinit+0x14>
 8005c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c4c:	f7ff bff0 	b.w	8005c30 <__sfp_lock_release>
 8005c50:	4b04      	ldr	r3, [pc, #16]	; (8005c64 <__sinit+0x28>)
 8005c52:	6223      	str	r3, [r4, #32]
 8005c54:	4b04      	ldr	r3, [pc, #16]	; (8005c68 <__sinit+0x2c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1f5      	bne.n	8005c48 <__sinit+0xc>
 8005c5c:	f7ff ffc4 	bl	8005be8 <global_stdio_init.part.0>
 8005c60:	e7f2      	b.n	8005c48 <__sinit+0xc>
 8005c62:	bf00      	nop
 8005c64:	08005ba9 	.word	0x08005ba9
 8005c68:	2000041c 	.word	0x2000041c

08005c6c <_fwalk_sglue>:
 8005c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c70:	4607      	mov	r7, r0
 8005c72:	4688      	mov	r8, r1
 8005c74:	4614      	mov	r4, r2
 8005c76:	2600      	movs	r6, #0
 8005c78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c7c:	f1b9 0901 	subs.w	r9, r9, #1
 8005c80:	d505      	bpl.n	8005c8e <_fwalk_sglue+0x22>
 8005c82:	6824      	ldr	r4, [r4, #0]
 8005c84:	2c00      	cmp	r4, #0
 8005c86:	d1f7      	bne.n	8005c78 <_fwalk_sglue+0xc>
 8005c88:	4630      	mov	r0, r6
 8005c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c8e:	89ab      	ldrh	r3, [r5, #12]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d907      	bls.n	8005ca4 <_fwalk_sglue+0x38>
 8005c94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	d003      	beq.n	8005ca4 <_fwalk_sglue+0x38>
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	47c0      	blx	r8
 8005ca2:	4306      	orrs	r6, r0
 8005ca4:	3568      	adds	r5, #104	; 0x68
 8005ca6:	e7e9      	b.n	8005c7c <_fwalk_sglue+0x10>

08005ca8 <iprintf>:
 8005ca8:	b40f      	push	{r0, r1, r2, r3}
 8005caa:	b507      	push	{r0, r1, r2, lr}
 8005cac:	4906      	ldr	r1, [pc, #24]	; (8005cc8 <iprintf+0x20>)
 8005cae:	ab04      	add	r3, sp, #16
 8005cb0:	6808      	ldr	r0, [r1, #0]
 8005cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cb6:	6881      	ldr	r1, [r0, #8]
 8005cb8:	9301      	str	r3, [sp, #4]
 8005cba:	f001 fbed 	bl	8007498 <_vfiprintf_r>
 8005cbe:	b003      	add	sp, #12
 8005cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cc4:	b004      	add	sp, #16
 8005cc6:	4770      	bx	lr
 8005cc8:	20000064 	.word	0x20000064

08005ccc <__sread>:
 8005ccc:	b510      	push	{r4, lr}
 8005cce:	460c      	mov	r4, r1
 8005cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd4:	f000 f86c 	bl	8005db0 <_read_r>
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	bfab      	itete	ge
 8005cdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cde:	89a3      	ldrhlt	r3, [r4, #12]
 8005ce0:	181b      	addge	r3, r3, r0
 8005ce2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ce6:	bfac      	ite	ge
 8005ce8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cea:	81a3      	strhlt	r3, [r4, #12]
 8005cec:	bd10      	pop	{r4, pc}

08005cee <__swrite>:
 8005cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf2:	461f      	mov	r7, r3
 8005cf4:	898b      	ldrh	r3, [r1, #12]
 8005cf6:	05db      	lsls	r3, r3, #23
 8005cf8:	4605      	mov	r5, r0
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	4616      	mov	r6, r2
 8005cfe:	d505      	bpl.n	8005d0c <__swrite+0x1e>
 8005d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d04:	2302      	movs	r3, #2
 8005d06:	2200      	movs	r2, #0
 8005d08:	f000 f840 	bl	8005d8c <_lseek_r>
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d16:	81a3      	strh	r3, [r4, #12]
 8005d18:	4632      	mov	r2, r6
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d22:	f000 b857 	b.w	8005dd4 <_write_r>

08005d26 <__sseek>:
 8005d26:	b510      	push	{r4, lr}
 8005d28:	460c      	mov	r4, r1
 8005d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d2e:	f000 f82d 	bl	8005d8c <_lseek_r>
 8005d32:	1c43      	adds	r3, r0, #1
 8005d34:	89a3      	ldrh	r3, [r4, #12]
 8005d36:	bf15      	itete	ne
 8005d38:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d42:	81a3      	strheq	r3, [r4, #12]
 8005d44:	bf18      	it	ne
 8005d46:	81a3      	strhne	r3, [r4, #12]
 8005d48:	bd10      	pop	{r4, pc}

08005d4a <__sclose>:
 8005d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d4e:	f000 b80d 	b.w	8005d6c <_close_r>

08005d52 <memset>:
 8005d52:	4402      	add	r2, r0
 8005d54:	4603      	mov	r3, r0
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d100      	bne.n	8005d5c <memset+0xa>
 8005d5a:	4770      	bx	lr
 8005d5c:	f803 1b01 	strb.w	r1, [r3], #1
 8005d60:	e7f9      	b.n	8005d56 <memset+0x4>
	...

08005d64 <_localeconv_r>:
 8005d64:	4800      	ldr	r0, [pc, #0]	; (8005d68 <_localeconv_r+0x4>)
 8005d66:	4770      	bx	lr
 8005d68:	20000158 	.word	0x20000158

08005d6c <_close_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	4d06      	ldr	r5, [pc, #24]	; (8005d88 <_close_r+0x1c>)
 8005d70:	2300      	movs	r3, #0
 8005d72:	4604      	mov	r4, r0
 8005d74:	4608      	mov	r0, r1
 8005d76:	602b      	str	r3, [r5, #0]
 8005d78:	f7fb fb97 	bl	80014aa <_close>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	d102      	bne.n	8005d86 <_close_r+0x1a>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	b103      	cbz	r3, 8005d86 <_close_r+0x1a>
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
 8005d88:	20000420 	.word	0x20000420

08005d8c <_lseek_r>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	4d07      	ldr	r5, [pc, #28]	; (8005dac <_lseek_r+0x20>)
 8005d90:	4604      	mov	r4, r0
 8005d92:	4608      	mov	r0, r1
 8005d94:	4611      	mov	r1, r2
 8005d96:	2200      	movs	r2, #0
 8005d98:	602a      	str	r2, [r5, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f7fb fbac 	bl	80014f8 <_lseek>
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	d102      	bne.n	8005daa <_lseek_r+0x1e>
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	b103      	cbz	r3, 8005daa <_lseek_r+0x1e>
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	bd38      	pop	{r3, r4, r5, pc}
 8005dac:	20000420 	.word	0x20000420

08005db0 <_read_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	4d07      	ldr	r5, [pc, #28]	; (8005dd0 <_read_r+0x20>)
 8005db4:	4604      	mov	r4, r0
 8005db6:	4608      	mov	r0, r1
 8005db8:	4611      	mov	r1, r2
 8005dba:	2200      	movs	r2, #0
 8005dbc:	602a      	str	r2, [r5, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f7fb fb3a 	bl	8001438 <_read>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d102      	bne.n	8005dce <_read_r+0x1e>
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	b103      	cbz	r3, 8005dce <_read_r+0x1e>
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	bd38      	pop	{r3, r4, r5, pc}
 8005dd0:	20000420 	.word	0x20000420

08005dd4 <_write_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	4d07      	ldr	r5, [pc, #28]	; (8005df4 <_write_r+0x20>)
 8005dd8:	4604      	mov	r4, r0
 8005dda:	4608      	mov	r0, r1
 8005ddc:	4611      	mov	r1, r2
 8005dde:	2200      	movs	r2, #0
 8005de0:	602a      	str	r2, [r5, #0]
 8005de2:	461a      	mov	r2, r3
 8005de4:	f7fb fb45 	bl	8001472 <_write>
 8005de8:	1c43      	adds	r3, r0, #1
 8005dea:	d102      	bne.n	8005df2 <_write_r+0x1e>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	b103      	cbz	r3, 8005df2 <_write_r+0x1e>
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	20000420 	.word	0x20000420

08005df8 <__errno>:
 8005df8:	4b01      	ldr	r3, [pc, #4]	; (8005e00 <__errno+0x8>)
 8005dfa:	6818      	ldr	r0, [r3, #0]
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	20000064 	.word	0x20000064

08005e04 <__libc_init_array>:
 8005e04:	b570      	push	{r4, r5, r6, lr}
 8005e06:	4d0d      	ldr	r5, [pc, #52]	; (8005e3c <__libc_init_array+0x38>)
 8005e08:	4c0d      	ldr	r4, [pc, #52]	; (8005e40 <__libc_init_array+0x3c>)
 8005e0a:	1b64      	subs	r4, r4, r5
 8005e0c:	10a4      	asrs	r4, r4, #2
 8005e0e:	2600      	movs	r6, #0
 8005e10:	42a6      	cmp	r6, r4
 8005e12:	d109      	bne.n	8005e28 <__libc_init_array+0x24>
 8005e14:	4d0b      	ldr	r5, [pc, #44]	; (8005e44 <__libc_init_array+0x40>)
 8005e16:	4c0c      	ldr	r4, [pc, #48]	; (8005e48 <__libc_init_array+0x44>)
 8005e18:	f001 fef0 	bl	8007bfc <_init>
 8005e1c:	1b64      	subs	r4, r4, r5
 8005e1e:	10a4      	asrs	r4, r4, #2
 8005e20:	2600      	movs	r6, #0
 8005e22:	42a6      	cmp	r6, r4
 8005e24:	d105      	bne.n	8005e32 <__libc_init_array+0x2e>
 8005e26:	bd70      	pop	{r4, r5, r6, pc}
 8005e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e2c:	4798      	blx	r3
 8005e2e:	3601      	adds	r6, #1
 8005e30:	e7ee      	b.n	8005e10 <__libc_init_array+0xc>
 8005e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e36:	4798      	blx	r3
 8005e38:	3601      	adds	r6, #1
 8005e3a:	e7f2      	b.n	8005e22 <__libc_init_array+0x1e>
 8005e3c:	08007fec 	.word	0x08007fec
 8005e40:	08007fec 	.word	0x08007fec
 8005e44:	08007fec 	.word	0x08007fec
 8005e48:	08007ff0 	.word	0x08007ff0

08005e4c <__retarget_lock_init_recursive>:
 8005e4c:	4770      	bx	lr

08005e4e <__retarget_lock_acquire_recursive>:
 8005e4e:	4770      	bx	lr

08005e50 <__retarget_lock_release_recursive>:
 8005e50:	4770      	bx	lr

08005e52 <quorem>:
 8005e52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e56:	6903      	ldr	r3, [r0, #16]
 8005e58:	690c      	ldr	r4, [r1, #16]
 8005e5a:	42a3      	cmp	r3, r4
 8005e5c:	4607      	mov	r7, r0
 8005e5e:	db7e      	blt.n	8005f5e <quorem+0x10c>
 8005e60:	3c01      	subs	r4, #1
 8005e62:	f101 0814 	add.w	r8, r1, #20
 8005e66:	f100 0514 	add.w	r5, r0, #20
 8005e6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e6e:	9301      	str	r3, [sp, #4]
 8005e70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e84:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e88:	d331      	bcc.n	8005eee <quorem+0x9c>
 8005e8a:	f04f 0e00 	mov.w	lr, #0
 8005e8e:	4640      	mov	r0, r8
 8005e90:	46ac      	mov	ip, r5
 8005e92:	46f2      	mov	sl, lr
 8005e94:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e98:	b293      	uxth	r3, r2
 8005e9a:	fb06 e303 	mla	r3, r6, r3, lr
 8005e9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ea2:	0c1a      	lsrs	r2, r3, #16
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	ebaa 0303 	sub.w	r3, sl, r3
 8005eaa:	f8dc a000 	ldr.w	sl, [ip]
 8005eae:	fa13 f38a 	uxtah	r3, r3, sl
 8005eb2:	fb06 220e 	mla	r2, r6, lr, r2
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	9b00      	ldr	r3, [sp, #0]
 8005eba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ebe:	b292      	uxth	r2, r2
 8005ec0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ec4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ec8:	f8bd 3000 	ldrh.w	r3, [sp]
 8005ecc:	4581      	cmp	r9, r0
 8005ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ed2:	f84c 3b04 	str.w	r3, [ip], #4
 8005ed6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005eda:	d2db      	bcs.n	8005e94 <quorem+0x42>
 8005edc:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ee0:	b92b      	cbnz	r3, 8005eee <quorem+0x9c>
 8005ee2:	9b01      	ldr	r3, [sp, #4]
 8005ee4:	3b04      	subs	r3, #4
 8005ee6:	429d      	cmp	r5, r3
 8005ee8:	461a      	mov	r2, r3
 8005eea:	d32c      	bcc.n	8005f46 <quorem+0xf4>
 8005eec:	613c      	str	r4, [r7, #16]
 8005eee:	4638      	mov	r0, r7
 8005ef0:	f001 f9a8 	bl	8007244 <__mcmp>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	db22      	blt.n	8005f3e <quorem+0xec>
 8005ef8:	3601      	adds	r6, #1
 8005efa:	4629      	mov	r1, r5
 8005efc:	2000      	movs	r0, #0
 8005efe:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f02:	f8d1 c000 	ldr.w	ip, [r1]
 8005f06:	b293      	uxth	r3, r2
 8005f08:	1ac3      	subs	r3, r0, r3
 8005f0a:	0c12      	lsrs	r2, r2, #16
 8005f0c:	fa13 f38c 	uxtah	r3, r3, ip
 8005f10:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005f14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f1e:	45c1      	cmp	r9, r8
 8005f20:	f841 3b04 	str.w	r3, [r1], #4
 8005f24:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f28:	d2e9      	bcs.n	8005efe <quorem+0xac>
 8005f2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f32:	b922      	cbnz	r2, 8005f3e <quorem+0xec>
 8005f34:	3b04      	subs	r3, #4
 8005f36:	429d      	cmp	r5, r3
 8005f38:	461a      	mov	r2, r3
 8005f3a:	d30a      	bcc.n	8005f52 <quorem+0x100>
 8005f3c:	613c      	str	r4, [r7, #16]
 8005f3e:	4630      	mov	r0, r6
 8005f40:	b003      	add	sp, #12
 8005f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f46:	6812      	ldr	r2, [r2, #0]
 8005f48:	3b04      	subs	r3, #4
 8005f4a:	2a00      	cmp	r2, #0
 8005f4c:	d1ce      	bne.n	8005eec <quorem+0x9a>
 8005f4e:	3c01      	subs	r4, #1
 8005f50:	e7c9      	b.n	8005ee6 <quorem+0x94>
 8005f52:	6812      	ldr	r2, [r2, #0]
 8005f54:	3b04      	subs	r3, #4
 8005f56:	2a00      	cmp	r2, #0
 8005f58:	d1f0      	bne.n	8005f3c <quorem+0xea>
 8005f5a:	3c01      	subs	r4, #1
 8005f5c:	e7eb      	b.n	8005f36 <quorem+0xe4>
 8005f5e:	2000      	movs	r0, #0
 8005f60:	e7ee      	b.n	8005f40 <quorem+0xee>
 8005f62:	0000      	movs	r0, r0
 8005f64:	0000      	movs	r0, r0
	...

08005f68 <_dtoa_r>:
 8005f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	ed2d 8b04 	vpush	{d8-d9}
 8005f70:	69c5      	ldr	r5, [r0, #28]
 8005f72:	b093      	sub	sp, #76	; 0x4c
 8005f74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005f78:	ec57 6b10 	vmov	r6, r7, d0
 8005f7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f80:	9107      	str	r1, [sp, #28]
 8005f82:	4604      	mov	r4, r0
 8005f84:	920a      	str	r2, [sp, #40]	; 0x28
 8005f86:	930d      	str	r3, [sp, #52]	; 0x34
 8005f88:	b975      	cbnz	r5, 8005fa8 <_dtoa_r+0x40>
 8005f8a:	2010      	movs	r0, #16
 8005f8c:	f000 fe2a 	bl	8006be4 <malloc>
 8005f90:	4602      	mov	r2, r0
 8005f92:	61e0      	str	r0, [r4, #28]
 8005f94:	b920      	cbnz	r0, 8005fa0 <_dtoa_r+0x38>
 8005f96:	4bae      	ldr	r3, [pc, #696]	; (8006250 <_dtoa_r+0x2e8>)
 8005f98:	21ef      	movs	r1, #239	; 0xef
 8005f9a:	48ae      	ldr	r0, [pc, #696]	; (8006254 <_dtoa_r+0x2ec>)
 8005f9c:	f001 fcf8 	bl	8007990 <__assert_func>
 8005fa0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005fa4:	6005      	str	r5, [r0, #0]
 8005fa6:	60c5      	str	r5, [r0, #12]
 8005fa8:	69e3      	ldr	r3, [r4, #28]
 8005faa:	6819      	ldr	r1, [r3, #0]
 8005fac:	b151      	cbz	r1, 8005fc4 <_dtoa_r+0x5c>
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	604a      	str	r2, [r1, #4]
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4093      	lsls	r3, r2
 8005fb6:	608b      	str	r3, [r1, #8]
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f000 ff07 	bl	8006dcc <_Bfree>
 8005fbe:	69e3      	ldr	r3, [r4, #28]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	1e3b      	subs	r3, r7, #0
 8005fc6:	bfbb      	ittet	lt
 8005fc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005fcc:	9303      	strlt	r3, [sp, #12]
 8005fce:	2300      	movge	r3, #0
 8005fd0:	2201      	movlt	r2, #1
 8005fd2:	bfac      	ite	ge
 8005fd4:	f8c8 3000 	strge.w	r3, [r8]
 8005fd8:	f8c8 2000 	strlt.w	r2, [r8]
 8005fdc:	4b9e      	ldr	r3, [pc, #632]	; (8006258 <_dtoa_r+0x2f0>)
 8005fde:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005fe2:	ea33 0308 	bics.w	r3, r3, r8
 8005fe6:	d11b      	bne.n	8006020 <_dtoa_r+0xb8>
 8005fe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fea:	f242 730f 	movw	r3, #9999	; 0x270f
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005ff4:	4333      	orrs	r3, r6
 8005ff6:	f000 8593 	beq.w	8006b20 <_dtoa_r+0xbb8>
 8005ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ffc:	b963      	cbnz	r3, 8006018 <_dtoa_r+0xb0>
 8005ffe:	4b97      	ldr	r3, [pc, #604]	; (800625c <_dtoa_r+0x2f4>)
 8006000:	e027      	b.n	8006052 <_dtoa_r+0xea>
 8006002:	4b97      	ldr	r3, [pc, #604]	; (8006260 <_dtoa_r+0x2f8>)
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	3308      	adds	r3, #8
 8006008:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	9800      	ldr	r0, [sp, #0]
 800600e:	b013      	add	sp, #76	; 0x4c
 8006010:	ecbd 8b04 	vpop	{d8-d9}
 8006014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006018:	4b90      	ldr	r3, [pc, #576]	; (800625c <_dtoa_r+0x2f4>)
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	3303      	adds	r3, #3
 800601e:	e7f3      	b.n	8006008 <_dtoa_r+0xa0>
 8006020:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006024:	2200      	movs	r2, #0
 8006026:	ec51 0b17 	vmov	r0, r1, d7
 800602a:	eeb0 8a47 	vmov.f32	s16, s14
 800602e:	eef0 8a67 	vmov.f32	s17, s15
 8006032:	2300      	movs	r3, #0
 8006034:	f7fa fd48 	bl	8000ac8 <__aeabi_dcmpeq>
 8006038:	4681      	mov	r9, r0
 800603a:	b160      	cbz	r0, 8006056 <_dtoa_r+0xee>
 800603c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800603e:	2301      	movs	r3, #1
 8006040:	6013      	str	r3, [r2, #0]
 8006042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 8568 	beq.w	8006b1a <_dtoa_r+0xbb2>
 800604a:	4b86      	ldr	r3, [pc, #536]	; (8006264 <_dtoa_r+0x2fc>)
 800604c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	3b01      	subs	r3, #1
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	e7da      	b.n	800600c <_dtoa_r+0xa4>
 8006056:	aa10      	add	r2, sp, #64	; 0x40
 8006058:	a911      	add	r1, sp, #68	; 0x44
 800605a:	4620      	mov	r0, r4
 800605c:	eeb0 0a48 	vmov.f32	s0, s16
 8006060:	eef0 0a68 	vmov.f32	s1, s17
 8006064:	f001 f994 	bl	8007390 <__d2b>
 8006068:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800606c:	4682      	mov	sl, r0
 800606e:	2d00      	cmp	r5, #0
 8006070:	d07f      	beq.n	8006172 <_dtoa_r+0x20a>
 8006072:	ee18 3a90 	vmov	r3, s17
 8006076:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800607a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800607e:	ec51 0b18 	vmov	r0, r1, d8
 8006082:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006086:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800608a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800608e:	4619      	mov	r1, r3
 8006090:	2200      	movs	r2, #0
 8006092:	4b75      	ldr	r3, [pc, #468]	; (8006268 <_dtoa_r+0x300>)
 8006094:	f7fa f8f8 	bl	8000288 <__aeabi_dsub>
 8006098:	a367      	add	r3, pc, #412	; (adr r3, 8006238 <_dtoa_r+0x2d0>)
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	f7fa faab 	bl	80005f8 <__aeabi_dmul>
 80060a2:	a367      	add	r3, pc, #412	; (adr r3, 8006240 <_dtoa_r+0x2d8>)
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f7fa f8f0 	bl	800028c <__adddf3>
 80060ac:	4606      	mov	r6, r0
 80060ae:	4628      	mov	r0, r5
 80060b0:	460f      	mov	r7, r1
 80060b2:	f7fa fa37 	bl	8000524 <__aeabi_i2d>
 80060b6:	a364      	add	r3, pc, #400	; (adr r3, 8006248 <_dtoa_r+0x2e0>)
 80060b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060bc:	f7fa fa9c 	bl	80005f8 <__aeabi_dmul>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4630      	mov	r0, r6
 80060c6:	4639      	mov	r1, r7
 80060c8:	f7fa f8e0 	bl	800028c <__adddf3>
 80060cc:	4606      	mov	r6, r0
 80060ce:	460f      	mov	r7, r1
 80060d0:	f7fa fd42 	bl	8000b58 <__aeabi_d2iz>
 80060d4:	2200      	movs	r2, #0
 80060d6:	4683      	mov	fp, r0
 80060d8:	2300      	movs	r3, #0
 80060da:	4630      	mov	r0, r6
 80060dc:	4639      	mov	r1, r7
 80060de:	f7fa fcfd 	bl	8000adc <__aeabi_dcmplt>
 80060e2:	b148      	cbz	r0, 80060f8 <_dtoa_r+0x190>
 80060e4:	4658      	mov	r0, fp
 80060e6:	f7fa fa1d 	bl	8000524 <__aeabi_i2d>
 80060ea:	4632      	mov	r2, r6
 80060ec:	463b      	mov	r3, r7
 80060ee:	f7fa fceb 	bl	8000ac8 <__aeabi_dcmpeq>
 80060f2:	b908      	cbnz	r0, 80060f8 <_dtoa_r+0x190>
 80060f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060f8:	f1bb 0f16 	cmp.w	fp, #22
 80060fc:	d857      	bhi.n	80061ae <_dtoa_r+0x246>
 80060fe:	4b5b      	ldr	r3, [pc, #364]	; (800626c <_dtoa_r+0x304>)
 8006100:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	ec51 0b18 	vmov	r0, r1, d8
 800610c:	f7fa fce6 	bl	8000adc <__aeabi_dcmplt>
 8006110:	2800      	cmp	r0, #0
 8006112:	d04e      	beq.n	80061b2 <_dtoa_r+0x24a>
 8006114:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006118:	2300      	movs	r3, #0
 800611a:	930c      	str	r3, [sp, #48]	; 0x30
 800611c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800611e:	1b5b      	subs	r3, r3, r5
 8006120:	1e5a      	subs	r2, r3, #1
 8006122:	bf45      	ittet	mi
 8006124:	f1c3 0301 	rsbmi	r3, r3, #1
 8006128:	9305      	strmi	r3, [sp, #20]
 800612a:	2300      	movpl	r3, #0
 800612c:	2300      	movmi	r3, #0
 800612e:	9206      	str	r2, [sp, #24]
 8006130:	bf54      	ite	pl
 8006132:	9305      	strpl	r3, [sp, #20]
 8006134:	9306      	strmi	r3, [sp, #24]
 8006136:	f1bb 0f00 	cmp.w	fp, #0
 800613a:	db3c      	blt.n	80061b6 <_dtoa_r+0x24e>
 800613c:	9b06      	ldr	r3, [sp, #24]
 800613e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006142:	445b      	add	r3, fp
 8006144:	9306      	str	r3, [sp, #24]
 8006146:	2300      	movs	r3, #0
 8006148:	9308      	str	r3, [sp, #32]
 800614a:	9b07      	ldr	r3, [sp, #28]
 800614c:	2b09      	cmp	r3, #9
 800614e:	d868      	bhi.n	8006222 <_dtoa_r+0x2ba>
 8006150:	2b05      	cmp	r3, #5
 8006152:	bfc4      	itt	gt
 8006154:	3b04      	subgt	r3, #4
 8006156:	9307      	strgt	r3, [sp, #28]
 8006158:	9b07      	ldr	r3, [sp, #28]
 800615a:	f1a3 0302 	sub.w	r3, r3, #2
 800615e:	bfcc      	ite	gt
 8006160:	2500      	movgt	r5, #0
 8006162:	2501      	movle	r5, #1
 8006164:	2b03      	cmp	r3, #3
 8006166:	f200 8085 	bhi.w	8006274 <_dtoa_r+0x30c>
 800616a:	e8df f003 	tbb	[pc, r3]
 800616e:	3b2e      	.short	0x3b2e
 8006170:	5839      	.short	0x5839
 8006172:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006176:	441d      	add	r5, r3
 8006178:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800617c:	2b20      	cmp	r3, #32
 800617e:	bfc1      	itttt	gt
 8006180:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006184:	fa08 f803 	lslgt.w	r8, r8, r3
 8006188:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800618c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006190:	bfd6      	itet	le
 8006192:	f1c3 0320 	rsble	r3, r3, #32
 8006196:	ea48 0003 	orrgt.w	r0, r8, r3
 800619a:	fa06 f003 	lslle.w	r0, r6, r3
 800619e:	f7fa f9b1 	bl	8000504 <__aeabi_ui2d>
 80061a2:	2201      	movs	r2, #1
 80061a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80061a8:	3d01      	subs	r5, #1
 80061aa:	920e      	str	r2, [sp, #56]	; 0x38
 80061ac:	e76f      	b.n	800608e <_dtoa_r+0x126>
 80061ae:	2301      	movs	r3, #1
 80061b0:	e7b3      	b.n	800611a <_dtoa_r+0x1b2>
 80061b2:	900c      	str	r0, [sp, #48]	; 0x30
 80061b4:	e7b2      	b.n	800611c <_dtoa_r+0x1b4>
 80061b6:	9b05      	ldr	r3, [sp, #20]
 80061b8:	eba3 030b 	sub.w	r3, r3, fp
 80061bc:	9305      	str	r3, [sp, #20]
 80061be:	f1cb 0300 	rsb	r3, fp, #0
 80061c2:	9308      	str	r3, [sp, #32]
 80061c4:	2300      	movs	r3, #0
 80061c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80061c8:	e7bf      	b.n	800614a <_dtoa_r+0x1e2>
 80061ca:	2300      	movs	r3, #0
 80061cc:	9309      	str	r3, [sp, #36]	; 0x24
 80061ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	dc52      	bgt.n	800627a <_dtoa_r+0x312>
 80061d4:	2301      	movs	r3, #1
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	9304      	str	r3, [sp, #16]
 80061da:	461a      	mov	r2, r3
 80061dc:	920a      	str	r2, [sp, #40]	; 0x28
 80061de:	e00b      	b.n	80061f8 <_dtoa_r+0x290>
 80061e0:	2301      	movs	r3, #1
 80061e2:	e7f3      	b.n	80061cc <_dtoa_r+0x264>
 80061e4:	2300      	movs	r3, #0
 80061e6:	9309      	str	r3, [sp, #36]	; 0x24
 80061e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ea:	445b      	add	r3, fp
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	3301      	adds	r3, #1
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	9304      	str	r3, [sp, #16]
 80061f4:	bfb8      	it	lt
 80061f6:	2301      	movlt	r3, #1
 80061f8:	69e0      	ldr	r0, [r4, #28]
 80061fa:	2100      	movs	r1, #0
 80061fc:	2204      	movs	r2, #4
 80061fe:	f102 0614 	add.w	r6, r2, #20
 8006202:	429e      	cmp	r6, r3
 8006204:	d93d      	bls.n	8006282 <_dtoa_r+0x31a>
 8006206:	6041      	str	r1, [r0, #4]
 8006208:	4620      	mov	r0, r4
 800620a:	f000 fd9f 	bl	8006d4c <_Balloc>
 800620e:	9000      	str	r0, [sp, #0]
 8006210:	2800      	cmp	r0, #0
 8006212:	d139      	bne.n	8006288 <_dtoa_r+0x320>
 8006214:	4b16      	ldr	r3, [pc, #88]	; (8006270 <_dtoa_r+0x308>)
 8006216:	4602      	mov	r2, r0
 8006218:	f240 11af 	movw	r1, #431	; 0x1af
 800621c:	e6bd      	b.n	8005f9a <_dtoa_r+0x32>
 800621e:	2301      	movs	r3, #1
 8006220:	e7e1      	b.n	80061e6 <_dtoa_r+0x27e>
 8006222:	2501      	movs	r5, #1
 8006224:	2300      	movs	r3, #0
 8006226:	9307      	str	r3, [sp, #28]
 8006228:	9509      	str	r5, [sp, #36]	; 0x24
 800622a:	f04f 33ff 	mov.w	r3, #4294967295
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	9304      	str	r3, [sp, #16]
 8006232:	2200      	movs	r2, #0
 8006234:	2312      	movs	r3, #18
 8006236:	e7d1      	b.n	80061dc <_dtoa_r+0x274>
 8006238:	636f4361 	.word	0x636f4361
 800623c:	3fd287a7 	.word	0x3fd287a7
 8006240:	8b60c8b3 	.word	0x8b60c8b3
 8006244:	3fc68a28 	.word	0x3fc68a28
 8006248:	509f79fb 	.word	0x509f79fb
 800624c:	3fd34413 	.word	0x3fd34413
 8006250:	08007cb5 	.word	0x08007cb5
 8006254:	08007ccc 	.word	0x08007ccc
 8006258:	7ff00000 	.word	0x7ff00000
 800625c:	08007cb1 	.word	0x08007cb1
 8006260:	08007ca8 	.word	0x08007ca8
 8006264:	08007c85 	.word	0x08007c85
 8006268:	3ff80000 	.word	0x3ff80000
 800626c:	08007db8 	.word	0x08007db8
 8006270:	08007d24 	.word	0x08007d24
 8006274:	2301      	movs	r3, #1
 8006276:	9309      	str	r3, [sp, #36]	; 0x24
 8006278:	e7d7      	b.n	800622a <_dtoa_r+0x2c2>
 800627a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	9304      	str	r3, [sp, #16]
 8006280:	e7ba      	b.n	80061f8 <_dtoa_r+0x290>
 8006282:	3101      	adds	r1, #1
 8006284:	0052      	lsls	r2, r2, #1
 8006286:	e7ba      	b.n	80061fe <_dtoa_r+0x296>
 8006288:	69e3      	ldr	r3, [r4, #28]
 800628a:	9a00      	ldr	r2, [sp, #0]
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	9b04      	ldr	r3, [sp, #16]
 8006290:	2b0e      	cmp	r3, #14
 8006292:	f200 80a8 	bhi.w	80063e6 <_dtoa_r+0x47e>
 8006296:	2d00      	cmp	r5, #0
 8006298:	f000 80a5 	beq.w	80063e6 <_dtoa_r+0x47e>
 800629c:	f1bb 0f00 	cmp.w	fp, #0
 80062a0:	dd38      	ble.n	8006314 <_dtoa_r+0x3ac>
 80062a2:	4bc0      	ldr	r3, [pc, #768]	; (80065a4 <_dtoa_r+0x63c>)
 80062a4:	f00b 020f 	and.w	r2, fp, #15
 80062a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80062b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80062b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80062b8:	d019      	beq.n	80062ee <_dtoa_r+0x386>
 80062ba:	4bbb      	ldr	r3, [pc, #748]	; (80065a8 <_dtoa_r+0x640>)
 80062bc:	ec51 0b18 	vmov	r0, r1, d8
 80062c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062c4:	f7fa fac2 	bl	800084c <__aeabi_ddiv>
 80062c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062cc:	f008 080f 	and.w	r8, r8, #15
 80062d0:	2503      	movs	r5, #3
 80062d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80065a8 <_dtoa_r+0x640>
 80062d6:	f1b8 0f00 	cmp.w	r8, #0
 80062da:	d10a      	bne.n	80062f2 <_dtoa_r+0x38a>
 80062dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062e0:	4632      	mov	r2, r6
 80062e2:	463b      	mov	r3, r7
 80062e4:	f7fa fab2 	bl	800084c <__aeabi_ddiv>
 80062e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062ec:	e02b      	b.n	8006346 <_dtoa_r+0x3de>
 80062ee:	2502      	movs	r5, #2
 80062f0:	e7ef      	b.n	80062d2 <_dtoa_r+0x36a>
 80062f2:	f018 0f01 	tst.w	r8, #1
 80062f6:	d008      	beq.n	800630a <_dtoa_r+0x3a2>
 80062f8:	4630      	mov	r0, r6
 80062fa:	4639      	mov	r1, r7
 80062fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006300:	f7fa f97a 	bl	80005f8 <__aeabi_dmul>
 8006304:	3501      	adds	r5, #1
 8006306:	4606      	mov	r6, r0
 8006308:	460f      	mov	r7, r1
 800630a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800630e:	f109 0908 	add.w	r9, r9, #8
 8006312:	e7e0      	b.n	80062d6 <_dtoa_r+0x36e>
 8006314:	f000 809f 	beq.w	8006456 <_dtoa_r+0x4ee>
 8006318:	f1cb 0600 	rsb	r6, fp, #0
 800631c:	4ba1      	ldr	r3, [pc, #644]	; (80065a4 <_dtoa_r+0x63c>)
 800631e:	4fa2      	ldr	r7, [pc, #648]	; (80065a8 <_dtoa_r+0x640>)
 8006320:	f006 020f 	and.w	r2, r6, #15
 8006324:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632c:	ec51 0b18 	vmov	r0, r1, d8
 8006330:	f7fa f962 	bl	80005f8 <__aeabi_dmul>
 8006334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006338:	1136      	asrs	r6, r6, #4
 800633a:	2300      	movs	r3, #0
 800633c:	2502      	movs	r5, #2
 800633e:	2e00      	cmp	r6, #0
 8006340:	d17e      	bne.n	8006440 <_dtoa_r+0x4d8>
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1d0      	bne.n	80062e8 <_dtoa_r+0x380>
 8006346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006348:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 8084 	beq.w	800645a <_dtoa_r+0x4f2>
 8006352:	4b96      	ldr	r3, [pc, #600]	; (80065ac <_dtoa_r+0x644>)
 8006354:	2200      	movs	r2, #0
 8006356:	4640      	mov	r0, r8
 8006358:	4649      	mov	r1, r9
 800635a:	f7fa fbbf 	bl	8000adc <__aeabi_dcmplt>
 800635e:	2800      	cmp	r0, #0
 8006360:	d07b      	beq.n	800645a <_dtoa_r+0x4f2>
 8006362:	9b04      	ldr	r3, [sp, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d078      	beq.n	800645a <_dtoa_r+0x4f2>
 8006368:	9b01      	ldr	r3, [sp, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	dd39      	ble.n	80063e2 <_dtoa_r+0x47a>
 800636e:	4b90      	ldr	r3, [pc, #576]	; (80065b0 <_dtoa_r+0x648>)
 8006370:	2200      	movs	r2, #0
 8006372:	4640      	mov	r0, r8
 8006374:	4649      	mov	r1, r9
 8006376:	f7fa f93f 	bl	80005f8 <__aeabi_dmul>
 800637a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800637e:	9e01      	ldr	r6, [sp, #4]
 8006380:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006384:	3501      	adds	r5, #1
 8006386:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800638a:	4628      	mov	r0, r5
 800638c:	f7fa f8ca 	bl	8000524 <__aeabi_i2d>
 8006390:	4642      	mov	r2, r8
 8006392:	464b      	mov	r3, r9
 8006394:	f7fa f930 	bl	80005f8 <__aeabi_dmul>
 8006398:	4b86      	ldr	r3, [pc, #536]	; (80065b4 <_dtoa_r+0x64c>)
 800639a:	2200      	movs	r2, #0
 800639c:	f7f9 ff76 	bl	800028c <__adddf3>
 80063a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80063a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063a8:	9303      	str	r3, [sp, #12]
 80063aa:	2e00      	cmp	r6, #0
 80063ac:	d158      	bne.n	8006460 <_dtoa_r+0x4f8>
 80063ae:	4b82      	ldr	r3, [pc, #520]	; (80065b8 <_dtoa_r+0x650>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	4640      	mov	r0, r8
 80063b4:	4649      	mov	r1, r9
 80063b6:	f7f9 ff67 	bl	8000288 <__aeabi_dsub>
 80063ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063be:	4680      	mov	r8, r0
 80063c0:	4689      	mov	r9, r1
 80063c2:	f7fa fba9 	bl	8000b18 <__aeabi_dcmpgt>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	f040 8296 	bne.w	80068f8 <_dtoa_r+0x990>
 80063cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80063d0:	4640      	mov	r0, r8
 80063d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063d6:	4649      	mov	r1, r9
 80063d8:	f7fa fb80 	bl	8000adc <__aeabi_dcmplt>
 80063dc:	2800      	cmp	r0, #0
 80063de:	f040 8289 	bne.w	80068f4 <_dtoa_r+0x98c>
 80063e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80063e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f2c0 814e 	blt.w	800668a <_dtoa_r+0x722>
 80063ee:	f1bb 0f0e 	cmp.w	fp, #14
 80063f2:	f300 814a 	bgt.w	800668a <_dtoa_r+0x722>
 80063f6:	4b6b      	ldr	r3, [pc, #428]	; (80065a4 <_dtoa_r+0x63c>)
 80063f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80063fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006402:	2b00      	cmp	r3, #0
 8006404:	f280 80dc 	bge.w	80065c0 <_dtoa_r+0x658>
 8006408:	9b04      	ldr	r3, [sp, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	f300 80d8 	bgt.w	80065c0 <_dtoa_r+0x658>
 8006410:	f040 826f 	bne.w	80068f2 <_dtoa_r+0x98a>
 8006414:	4b68      	ldr	r3, [pc, #416]	; (80065b8 <_dtoa_r+0x650>)
 8006416:	2200      	movs	r2, #0
 8006418:	4640      	mov	r0, r8
 800641a:	4649      	mov	r1, r9
 800641c:	f7fa f8ec 	bl	80005f8 <__aeabi_dmul>
 8006420:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006424:	f7fa fb6e 	bl	8000b04 <__aeabi_dcmpge>
 8006428:	9e04      	ldr	r6, [sp, #16]
 800642a:	4637      	mov	r7, r6
 800642c:	2800      	cmp	r0, #0
 800642e:	f040 8245 	bne.w	80068bc <_dtoa_r+0x954>
 8006432:	9d00      	ldr	r5, [sp, #0]
 8006434:	2331      	movs	r3, #49	; 0x31
 8006436:	f805 3b01 	strb.w	r3, [r5], #1
 800643a:	f10b 0b01 	add.w	fp, fp, #1
 800643e:	e241      	b.n	80068c4 <_dtoa_r+0x95c>
 8006440:	07f2      	lsls	r2, r6, #31
 8006442:	d505      	bpl.n	8006450 <_dtoa_r+0x4e8>
 8006444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006448:	f7fa f8d6 	bl	80005f8 <__aeabi_dmul>
 800644c:	3501      	adds	r5, #1
 800644e:	2301      	movs	r3, #1
 8006450:	1076      	asrs	r6, r6, #1
 8006452:	3708      	adds	r7, #8
 8006454:	e773      	b.n	800633e <_dtoa_r+0x3d6>
 8006456:	2502      	movs	r5, #2
 8006458:	e775      	b.n	8006346 <_dtoa_r+0x3de>
 800645a:	9e04      	ldr	r6, [sp, #16]
 800645c:	465f      	mov	r7, fp
 800645e:	e792      	b.n	8006386 <_dtoa_r+0x41e>
 8006460:	9900      	ldr	r1, [sp, #0]
 8006462:	4b50      	ldr	r3, [pc, #320]	; (80065a4 <_dtoa_r+0x63c>)
 8006464:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006468:	4431      	add	r1, r6
 800646a:	9102      	str	r1, [sp, #8]
 800646c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800646e:	eeb0 9a47 	vmov.f32	s18, s14
 8006472:	eef0 9a67 	vmov.f32	s19, s15
 8006476:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800647a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800647e:	2900      	cmp	r1, #0
 8006480:	d044      	beq.n	800650c <_dtoa_r+0x5a4>
 8006482:	494e      	ldr	r1, [pc, #312]	; (80065bc <_dtoa_r+0x654>)
 8006484:	2000      	movs	r0, #0
 8006486:	f7fa f9e1 	bl	800084c <__aeabi_ddiv>
 800648a:	ec53 2b19 	vmov	r2, r3, d9
 800648e:	f7f9 fefb 	bl	8000288 <__aeabi_dsub>
 8006492:	9d00      	ldr	r5, [sp, #0]
 8006494:	ec41 0b19 	vmov	d9, r0, r1
 8006498:	4649      	mov	r1, r9
 800649a:	4640      	mov	r0, r8
 800649c:	f7fa fb5c 	bl	8000b58 <__aeabi_d2iz>
 80064a0:	4606      	mov	r6, r0
 80064a2:	f7fa f83f 	bl	8000524 <__aeabi_i2d>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4640      	mov	r0, r8
 80064ac:	4649      	mov	r1, r9
 80064ae:	f7f9 feeb 	bl	8000288 <__aeabi_dsub>
 80064b2:	3630      	adds	r6, #48	; 0x30
 80064b4:	f805 6b01 	strb.w	r6, [r5], #1
 80064b8:	ec53 2b19 	vmov	r2, r3, d9
 80064bc:	4680      	mov	r8, r0
 80064be:	4689      	mov	r9, r1
 80064c0:	f7fa fb0c 	bl	8000adc <__aeabi_dcmplt>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	d164      	bne.n	8006592 <_dtoa_r+0x62a>
 80064c8:	4642      	mov	r2, r8
 80064ca:	464b      	mov	r3, r9
 80064cc:	4937      	ldr	r1, [pc, #220]	; (80065ac <_dtoa_r+0x644>)
 80064ce:	2000      	movs	r0, #0
 80064d0:	f7f9 feda 	bl	8000288 <__aeabi_dsub>
 80064d4:	ec53 2b19 	vmov	r2, r3, d9
 80064d8:	f7fa fb00 	bl	8000adc <__aeabi_dcmplt>
 80064dc:	2800      	cmp	r0, #0
 80064de:	f040 80b6 	bne.w	800664e <_dtoa_r+0x6e6>
 80064e2:	9b02      	ldr	r3, [sp, #8]
 80064e4:	429d      	cmp	r5, r3
 80064e6:	f43f af7c 	beq.w	80063e2 <_dtoa_r+0x47a>
 80064ea:	4b31      	ldr	r3, [pc, #196]	; (80065b0 <_dtoa_r+0x648>)
 80064ec:	ec51 0b19 	vmov	r0, r1, d9
 80064f0:	2200      	movs	r2, #0
 80064f2:	f7fa f881 	bl	80005f8 <__aeabi_dmul>
 80064f6:	4b2e      	ldr	r3, [pc, #184]	; (80065b0 <_dtoa_r+0x648>)
 80064f8:	ec41 0b19 	vmov	d9, r0, r1
 80064fc:	2200      	movs	r2, #0
 80064fe:	4640      	mov	r0, r8
 8006500:	4649      	mov	r1, r9
 8006502:	f7fa f879 	bl	80005f8 <__aeabi_dmul>
 8006506:	4680      	mov	r8, r0
 8006508:	4689      	mov	r9, r1
 800650a:	e7c5      	b.n	8006498 <_dtoa_r+0x530>
 800650c:	ec51 0b17 	vmov	r0, r1, d7
 8006510:	f7fa f872 	bl	80005f8 <__aeabi_dmul>
 8006514:	9b02      	ldr	r3, [sp, #8]
 8006516:	9d00      	ldr	r5, [sp, #0]
 8006518:	930f      	str	r3, [sp, #60]	; 0x3c
 800651a:	ec41 0b19 	vmov	d9, r0, r1
 800651e:	4649      	mov	r1, r9
 8006520:	4640      	mov	r0, r8
 8006522:	f7fa fb19 	bl	8000b58 <__aeabi_d2iz>
 8006526:	4606      	mov	r6, r0
 8006528:	f7f9 fffc 	bl	8000524 <__aeabi_i2d>
 800652c:	3630      	adds	r6, #48	; 0x30
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	4640      	mov	r0, r8
 8006534:	4649      	mov	r1, r9
 8006536:	f7f9 fea7 	bl	8000288 <__aeabi_dsub>
 800653a:	f805 6b01 	strb.w	r6, [r5], #1
 800653e:	9b02      	ldr	r3, [sp, #8]
 8006540:	429d      	cmp	r5, r3
 8006542:	4680      	mov	r8, r0
 8006544:	4689      	mov	r9, r1
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	d124      	bne.n	8006596 <_dtoa_r+0x62e>
 800654c:	4b1b      	ldr	r3, [pc, #108]	; (80065bc <_dtoa_r+0x654>)
 800654e:	ec51 0b19 	vmov	r0, r1, d9
 8006552:	f7f9 fe9b 	bl	800028c <__adddf3>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	4640      	mov	r0, r8
 800655c:	4649      	mov	r1, r9
 800655e:	f7fa fadb 	bl	8000b18 <__aeabi_dcmpgt>
 8006562:	2800      	cmp	r0, #0
 8006564:	d173      	bne.n	800664e <_dtoa_r+0x6e6>
 8006566:	ec53 2b19 	vmov	r2, r3, d9
 800656a:	4914      	ldr	r1, [pc, #80]	; (80065bc <_dtoa_r+0x654>)
 800656c:	2000      	movs	r0, #0
 800656e:	f7f9 fe8b 	bl	8000288 <__aeabi_dsub>
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	4640      	mov	r0, r8
 8006578:	4649      	mov	r1, r9
 800657a:	f7fa faaf 	bl	8000adc <__aeabi_dcmplt>
 800657e:	2800      	cmp	r0, #0
 8006580:	f43f af2f 	beq.w	80063e2 <_dtoa_r+0x47a>
 8006584:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006586:	1e6b      	subs	r3, r5, #1
 8006588:	930f      	str	r3, [sp, #60]	; 0x3c
 800658a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800658e:	2b30      	cmp	r3, #48	; 0x30
 8006590:	d0f8      	beq.n	8006584 <_dtoa_r+0x61c>
 8006592:	46bb      	mov	fp, r7
 8006594:	e04a      	b.n	800662c <_dtoa_r+0x6c4>
 8006596:	4b06      	ldr	r3, [pc, #24]	; (80065b0 <_dtoa_r+0x648>)
 8006598:	f7fa f82e 	bl	80005f8 <__aeabi_dmul>
 800659c:	4680      	mov	r8, r0
 800659e:	4689      	mov	r9, r1
 80065a0:	e7bd      	b.n	800651e <_dtoa_r+0x5b6>
 80065a2:	bf00      	nop
 80065a4:	08007db8 	.word	0x08007db8
 80065a8:	08007d90 	.word	0x08007d90
 80065ac:	3ff00000 	.word	0x3ff00000
 80065b0:	40240000 	.word	0x40240000
 80065b4:	401c0000 	.word	0x401c0000
 80065b8:	40140000 	.word	0x40140000
 80065bc:	3fe00000 	.word	0x3fe00000
 80065c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80065c4:	9d00      	ldr	r5, [sp, #0]
 80065c6:	4642      	mov	r2, r8
 80065c8:	464b      	mov	r3, r9
 80065ca:	4630      	mov	r0, r6
 80065cc:	4639      	mov	r1, r7
 80065ce:	f7fa f93d 	bl	800084c <__aeabi_ddiv>
 80065d2:	f7fa fac1 	bl	8000b58 <__aeabi_d2iz>
 80065d6:	9001      	str	r0, [sp, #4]
 80065d8:	f7f9 ffa4 	bl	8000524 <__aeabi_i2d>
 80065dc:	4642      	mov	r2, r8
 80065de:	464b      	mov	r3, r9
 80065e0:	f7fa f80a 	bl	80005f8 <__aeabi_dmul>
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	4630      	mov	r0, r6
 80065ea:	4639      	mov	r1, r7
 80065ec:	f7f9 fe4c 	bl	8000288 <__aeabi_dsub>
 80065f0:	9e01      	ldr	r6, [sp, #4]
 80065f2:	9f04      	ldr	r7, [sp, #16]
 80065f4:	3630      	adds	r6, #48	; 0x30
 80065f6:	f805 6b01 	strb.w	r6, [r5], #1
 80065fa:	9e00      	ldr	r6, [sp, #0]
 80065fc:	1bae      	subs	r6, r5, r6
 80065fe:	42b7      	cmp	r7, r6
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	d134      	bne.n	8006670 <_dtoa_r+0x708>
 8006606:	f7f9 fe41 	bl	800028c <__adddf3>
 800660a:	4642      	mov	r2, r8
 800660c:	464b      	mov	r3, r9
 800660e:	4606      	mov	r6, r0
 8006610:	460f      	mov	r7, r1
 8006612:	f7fa fa81 	bl	8000b18 <__aeabi_dcmpgt>
 8006616:	b9c8      	cbnz	r0, 800664c <_dtoa_r+0x6e4>
 8006618:	4642      	mov	r2, r8
 800661a:	464b      	mov	r3, r9
 800661c:	4630      	mov	r0, r6
 800661e:	4639      	mov	r1, r7
 8006620:	f7fa fa52 	bl	8000ac8 <__aeabi_dcmpeq>
 8006624:	b110      	cbz	r0, 800662c <_dtoa_r+0x6c4>
 8006626:	9b01      	ldr	r3, [sp, #4]
 8006628:	07db      	lsls	r3, r3, #31
 800662a:	d40f      	bmi.n	800664c <_dtoa_r+0x6e4>
 800662c:	4651      	mov	r1, sl
 800662e:	4620      	mov	r0, r4
 8006630:	f000 fbcc 	bl	8006dcc <_Bfree>
 8006634:	2300      	movs	r3, #0
 8006636:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006638:	702b      	strb	r3, [r5, #0]
 800663a:	f10b 0301 	add.w	r3, fp, #1
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006642:	2b00      	cmp	r3, #0
 8006644:	f43f ace2 	beq.w	800600c <_dtoa_r+0xa4>
 8006648:	601d      	str	r5, [r3, #0]
 800664a:	e4df      	b.n	800600c <_dtoa_r+0xa4>
 800664c:	465f      	mov	r7, fp
 800664e:	462b      	mov	r3, r5
 8006650:	461d      	mov	r5, r3
 8006652:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006656:	2a39      	cmp	r2, #57	; 0x39
 8006658:	d106      	bne.n	8006668 <_dtoa_r+0x700>
 800665a:	9a00      	ldr	r2, [sp, #0]
 800665c:	429a      	cmp	r2, r3
 800665e:	d1f7      	bne.n	8006650 <_dtoa_r+0x6e8>
 8006660:	9900      	ldr	r1, [sp, #0]
 8006662:	2230      	movs	r2, #48	; 0x30
 8006664:	3701      	adds	r7, #1
 8006666:	700a      	strb	r2, [r1, #0]
 8006668:	781a      	ldrb	r2, [r3, #0]
 800666a:	3201      	adds	r2, #1
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	e790      	b.n	8006592 <_dtoa_r+0x62a>
 8006670:	4ba3      	ldr	r3, [pc, #652]	; (8006900 <_dtoa_r+0x998>)
 8006672:	2200      	movs	r2, #0
 8006674:	f7f9 ffc0 	bl	80005f8 <__aeabi_dmul>
 8006678:	2200      	movs	r2, #0
 800667a:	2300      	movs	r3, #0
 800667c:	4606      	mov	r6, r0
 800667e:	460f      	mov	r7, r1
 8006680:	f7fa fa22 	bl	8000ac8 <__aeabi_dcmpeq>
 8006684:	2800      	cmp	r0, #0
 8006686:	d09e      	beq.n	80065c6 <_dtoa_r+0x65e>
 8006688:	e7d0      	b.n	800662c <_dtoa_r+0x6c4>
 800668a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800668c:	2a00      	cmp	r2, #0
 800668e:	f000 80ca 	beq.w	8006826 <_dtoa_r+0x8be>
 8006692:	9a07      	ldr	r2, [sp, #28]
 8006694:	2a01      	cmp	r2, #1
 8006696:	f300 80ad 	bgt.w	80067f4 <_dtoa_r+0x88c>
 800669a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800669c:	2a00      	cmp	r2, #0
 800669e:	f000 80a5 	beq.w	80067ec <_dtoa_r+0x884>
 80066a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066a6:	9e08      	ldr	r6, [sp, #32]
 80066a8:	9d05      	ldr	r5, [sp, #20]
 80066aa:	9a05      	ldr	r2, [sp, #20]
 80066ac:	441a      	add	r2, r3
 80066ae:	9205      	str	r2, [sp, #20]
 80066b0:	9a06      	ldr	r2, [sp, #24]
 80066b2:	2101      	movs	r1, #1
 80066b4:	441a      	add	r2, r3
 80066b6:	4620      	mov	r0, r4
 80066b8:	9206      	str	r2, [sp, #24]
 80066ba:	f000 fc3d 	bl	8006f38 <__i2b>
 80066be:	4607      	mov	r7, r0
 80066c0:	b165      	cbz	r5, 80066dc <_dtoa_r+0x774>
 80066c2:	9b06      	ldr	r3, [sp, #24]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	dd09      	ble.n	80066dc <_dtoa_r+0x774>
 80066c8:	42ab      	cmp	r3, r5
 80066ca:	9a05      	ldr	r2, [sp, #20]
 80066cc:	bfa8      	it	ge
 80066ce:	462b      	movge	r3, r5
 80066d0:	1ad2      	subs	r2, r2, r3
 80066d2:	9205      	str	r2, [sp, #20]
 80066d4:	9a06      	ldr	r2, [sp, #24]
 80066d6:	1aed      	subs	r5, r5, r3
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	9306      	str	r3, [sp, #24]
 80066dc:	9b08      	ldr	r3, [sp, #32]
 80066de:	b1f3      	cbz	r3, 800671e <_dtoa_r+0x7b6>
 80066e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 80a3 	beq.w	800682e <_dtoa_r+0x8c6>
 80066e8:	2e00      	cmp	r6, #0
 80066ea:	dd10      	ble.n	800670e <_dtoa_r+0x7a6>
 80066ec:	4639      	mov	r1, r7
 80066ee:	4632      	mov	r2, r6
 80066f0:	4620      	mov	r0, r4
 80066f2:	f000 fce1 	bl	80070b8 <__pow5mult>
 80066f6:	4652      	mov	r2, sl
 80066f8:	4601      	mov	r1, r0
 80066fa:	4607      	mov	r7, r0
 80066fc:	4620      	mov	r0, r4
 80066fe:	f000 fc31 	bl	8006f64 <__multiply>
 8006702:	4651      	mov	r1, sl
 8006704:	4680      	mov	r8, r0
 8006706:	4620      	mov	r0, r4
 8006708:	f000 fb60 	bl	8006dcc <_Bfree>
 800670c:	46c2      	mov	sl, r8
 800670e:	9b08      	ldr	r3, [sp, #32]
 8006710:	1b9a      	subs	r2, r3, r6
 8006712:	d004      	beq.n	800671e <_dtoa_r+0x7b6>
 8006714:	4651      	mov	r1, sl
 8006716:	4620      	mov	r0, r4
 8006718:	f000 fcce 	bl	80070b8 <__pow5mult>
 800671c:	4682      	mov	sl, r0
 800671e:	2101      	movs	r1, #1
 8006720:	4620      	mov	r0, r4
 8006722:	f000 fc09 	bl	8006f38 <__i2b>
 8006726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006728:	2b00      	cmp	r3, #0
 800672a:	4606      	mov	r6, r0
 800672c:	f340 8081 	ble.w	8006832 <_dtoa_r+0x8ca>
 8006730:	461a      	mov	r2, r3
 8006732:	4601      	mov	r1, r0
 8006734:	4620      	mov	r0, r4
 8006736:	f000 fcbf 	bl	80070b8 <__pow5mult>
 800673a:	9b07      	ldr	r3, [sp, #28]
 800673c:	2b01      	cmp	r3, #1
 800673e:	4606      	mov	r6, r0
 8006740:	dd7a      	ble.n	8006838 <_dtoa_r+0x8d0>
 8006742:	f04f 0800 	mov.w	r8, #0
 8006746:	6933      	ldr	r3, [r6, #16]
 8006748:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800674c:	6918      	ldr	r0, [r3, #16]
 800674e:	f000 fba5 	bl	8006e9c <__hi0bits>
 8006752:	f1c0 0020 	rsb	r0, r0, #32
 8006756:	9b06      	ldr	r3, [sp, #24]
 8006758:	4418      	add	r0, r3
 800675a:	f010 001f 	ands.w	r0, r0, #31
 800675e:	f000 8094 	beq.w	800688a <_dtoa_r+0x922>
 8006762:	f1c0 0320 	rsb	r3, r0, #32
 8006766:	2b04      	cmp	r3, #4
 8006768:	f340 8085 	ble.w	8006876 <_dtoa_r+0x90e>
 800676c:	9b05      	ldr	r3, [sp, #20]
 800676e:	f1c0 001c 	rsb	r0, r0, #28
 8006772:	4403      	add	r3, r0
 8006774:	9305      	str	r3, [sp, #20]
 8006776:	9b06      	ldr	r3, [sp, #24]
 8006778:	4403      	add	r3, r0
 800677a:	4405      	add	r5, r0
 800677c:	9306      	str	r3, [sp, #24]
 800677e:	9b05      	ldr	r3, [sp, #20]
 8006780:	2b00      	cmp	r3, #0
 8006782:	dd05      	ble.n	8006790 <_dtoa_r+0x828>
 8006784:	4651      	mov	r1, sl
 8006786:	461a      	mov	r2, r3
 8006788:	4620      	mov	r0, r4
 800678a:	f000 fcef 	bl	800716c <__lshift>
 800678e:	4682      	mov	sl, r0
 8006790:	9b06      	ldr	r3, [sp, #24]
 8006792:	2b00      	cmp	r3, #0
 8006794:	dd05      	ble.n	80067a2 <_dtoa_r+0x83a>
 8006796:	4631      	mov	r1, r6
 8006798:	461a      	mov	r2, r3
 800679a:	4620      	mov	r0, r4
 800679c:	f000 fce6 	bl	800716c <__lshift>
 80067a0:	4606      	mov	r6, r0
 80067a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d072      	beq.n	800688e <_dtoa_r+0x926>
 80067a8:	4631      	mov	r1, r6
 80067aa:	4650      	mov	r0, sl
 80067ac:	f000 fd4a 	bl	8007244 <__mcmp>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	da6c      	bge.n	800688e <_dtoa_r+0x926>
 80067b4:	2300      	movs	r3, #0
 80067b6:	4651      	mov	r1, sl
 80067b8:	220a      	movs	r2, #10
 80067ba:	4620      	mov	r0, r4
 80067bc:	f000 fb28 	bl	8006e10 <__multadd>
 80067c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067c6:	4682      	mov	sl, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 81b0 	beq.w	8006b2e <_dtoa_r+0xbc6>
 80067ce:	2300      	movs	r3, #0
 80067d0:	4639      	mov	r1, r7
 80067d2:	220a      	movs	r2, #10
 80067d4:	4620      	mov	r0, r4
 80067d6:	f000 fb1b 	bl	8006e10 <__multadd>
 80067da:	9b01      	ldr	r3, [sp, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	4607      	mov	r7, r0
 80067e0:	f300 8096 	bgt.w	8006910 <_dtoa_r+0x9a8>
 80067e4:	9b07      	ldr	r3, [sp, #28]
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	dc59      	bgt.n	800689e <_dtoa_r+0x936>
 80067ea:	e091      	b.n	8006910 <_dtoa_r+0x9a8>
 80067ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80067f2:	e758      	b.n	80066a6 <_dtoa_r+0x73e>
 80067f4:	9b04      	ldr	r3, [sp, #16]
 80067f6:	1e5e      	subs	r6, r3, #1
 80067f8:	9b08      	ldr	r3, [sp, #32]
 80067fa:	42b3      	cmp	r3, r6
 80067fc:	bfbf      	itttt	lt
 80067fe:	9b08      	ldrlt	r3, [sp, #32]
 8006800:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006802:	9608      	strlt	r6, [sp, #32]
 8006804:	1af3      	sublt	r3, r6, r3
 8006806:	bfb4      	ite	lt
 8006808:	18d2      	addlt	r2, r2, r3
 800680a:	1b9e      	subge	r6, r3, r6
 800680c:	9b04      	ldr	r3, [sp, #16]
 800680e:	bfbc      	itt	lt
 8006810:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006812:	2600      	movlt	r6, #0
 8006814:	2b00      	cmp	r3, #0
 8006816:	bfb7      	itett	lt
 8006818:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800681c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006820:	1a9d      	sublt	r5, r3, r2
 8006822:	2300      	movlt	r3, #0
 8006824:	e741      	b.n	80066aa <_dtoa_r+0x742>
 8006826:	9e08      	ldr	r6, [sp, #32]
 8006828:	9d05      	ldr	r5, [sp, #20]
 800682a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800682c:	e748      	b.n	80066c0 <_dtoa_r+0x758>
 800682e:	9a08      	ldr	r2, [sp, #32]
 8006830:	e770      	b.n	8006714 <_dtoa_r+0x7ac>
 8006832:	9b07      	ldr	r3, [sp, #28]
 8006834:	2b01      	cmp	r3, #1
 8006836:	dc19      	bgt.n	800686c <_dtoa_r+0x904>
 8006838:	9b02      	ldr	r3, [sp, #8]
 800683a:	b9bb      	cbnz	r3, 800686c <_dtoa_r+0x904>
 800683c:	9b03      	ldr	r3, [sp, #12]
 800683e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006842:	b99b      	cbnz	r3, 800686c <_dtoa_r+0x904>
 8006844:	9b03      	ldr	r3, [sp, #12]
 8006846:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800684a:	0d1b      	lsrs	r3, r3, #20
 800684c:	051b      	lsls	r3, r3, #20
 800684e:	b183      	cbz	r3, 8006872 <_dtoa_r+0x90a>
 8006850:	9b05      	ldr	r3, [sp, #20]
 8006852:	3301      	adds	r3, #1
 8006854:	9305      	str	r3, [sp, #20]
 8006856:	9b06      	ldr	r3, [sp, #24]
 8006858:	3301      	adds	r3, #1
 800685a:	9306      	str	r3, [sp, #24]
 800685c:	f04f 0801 	mov.w	r8, #1
 8006860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006862:	2b00      	cmp	r3, #0
 8006864:	f47f af6f 	bne.w	8006746 <_dtoa_r+0x7de>
 8006868:	2001      	movs	r0, #1
 800686a:	e774      	b.n	8006756 <_dtoa_r+0x7ee>
 800686c:	f04f 0800 	mov.w	r8, #0
 8006870:	e7f6      	b.n	8006860 <_dtoa_r+0x8f8>
 8006872:	4698      	mov	r8, r3
 8006874:	e7f4      	b.n	8006860 <_dtoa_r+0x8f8>
 8006876:	d082      	beq.n	800677e <_dtoa_r+0x816>
 8006878:	9a05      	ldr	r2, [sp, #20]
 800687a:	331c      	adds	r3, #28
 800687c:	441a      	add	r2, r3
 800687e:	9205      	str	r2, [sp, #20]
 8006880:	9a06      	ldr	r2, [sp, #24]
 8006882:	441a      	add	r2, r3
 8006884:	441d      	add	r5, r3
 8006886:	9206      	str	r2, [sp, #24]
 8006888:	e779      	b.n	800677e <_dtoa_r+0x816>
 800688a:	4603      	mov	r3, r0
 800688c:	e7f4      	b.n	8006878 <_dtoa_r+0x910>
 800688e:	9b04      	ldr	r3, [sp, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	dc37      	bgt.n	8006904 <_dtoa_r+0x99c>
 8006894:	9b07      	ldr	r3, [sp, #28]
 8006896:	2b02      	cmp	r3, #2
 8006898:	dd34      	ble.n	8006904 <_dtoa_r+0x99c>
 800689a:	9b04      	ldr	r3, [sp, #16]
 800689c:	9301      	str	r3, [sp, #4]
 800689e:	9b01      	ldr	r3, [sp, #4]
 80068a0:	b963      	cbnz	r3, 80068bc <_dtoa_r+0x954>
 80068a2:	4631      	mov	r1, r6
 80068a4:	2205      	movs	r2, #5
 80068a6:	4620      	mov	r0, r4
 80068a8:	f000 fab2 	bl	8006e10 <__multadd>
 80068ac:	4601      	mov	r1, r0
 80068ae:	4606      	mov	r6, r0
 80068b0:	4650      	mov	r0, sl
 80068b2:	f000 fcc7 	bl	8007244 <__mcmp>
 80068b6:	2800      	cmp	r0, #0
 80068b8:	f73f adbb 	bgt.w	8006432 <_dtoa_r+0x4ca>
 80068bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068be:	9d00      	ldr	r5, [sp, #0]
 80068c0:	ea6f 0b03 	mvn.w	fp, r3
 80068c4:	f04f 0800 	mov.w	r8, #0
 80068c8:	4631      	mov	r1, r6
 80068ca:	4620      	mov	r0, r4
 80068cc:	f000 fa7e 	bl	8006dcc <_Bfree>
 80068d0:	2f00      	cmp	r7, #0
 80068d2:	f43f aeab 	beq.w	800662c <_dtoa_r+0x6c4>
 80068d6:	f1b8 0f00 	cmp.w	r8, #0
 80068da:	d005      	beq.n	80068e8 <_dtoa_r+0x980>
 80068dc:	45b8      	cmp	r8, r7
 80068de:	d003      	beq.n	80068e8 <_dtoa_r+0x980>
 80068e0:	4641      	mov	r1, r8
 80068e2:	4620      	mov	r0, r4
 80068e4:	f000 fa72 	bl	8006dcc <_Bfree>
 80068e8:	4639      	mov	r1, r7
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 fa6e 	bl	8006dcc <_Bfree>
 80068f0:	e69c      	b.n	800662c <_dtoa_r+0x6c4>
 80068f2:	2600      	movs	r6, #0
 80068f4:	4637      	mov	r7, r6
 80068f6:	e7e1      	b.n	80068bc <_dtoa_r+0x954>
 80068f8:	46bb      	mov	fp, r7
 80068fa:	4637      	mov	r7, r6
 80068fc:	e599      	b.n	8006432 <_dtoa_r+0x4ca>
 80068fe:	bf00      	nop
 8006900:	40240000 	.word	0x40240000
 8006904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 80c8 	beq.w	8006a9c <_dtoa_r+0xb34>
 800690c:	9b04      	ldr	r3, [sp, #16]
 800690e:	9301      	str	r3, [sp, #4]
 8006910:	2d00      	cmp	r5, #0
 8006912:	dd05      	ble.n	8006920 <_dtoa_r+0x9b8>
 8006914:	4639      	mov	r1, r7
 8006916:	462a      	mov	r2, r5
 8006918:	4620      	mov	r0, r4
 800691a:	f000 fc27 	bl	800716c <__lshift>
 800691e:	4607      	mov	r7, r0
 8006920:	f1b8 0f00 	cmp.w	r8, #0
 8006924:	d05b      	beq.n	80069de <_dtoa_r+0xa76>
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	4620      	mov	r0, r4
 800692a:	f000 fa0f 	bl	8006d4c <_Balloc>
 800692e:	4605      	mov	r5, r0
 8006930:	b928      	cbnz	r0, 800693e <_dtoa_r+0x9d6>
 8006932:	4b83      	ldr	r3, [pc, #524]	; (8006b40 <_dtoa_r+0xbd8>)
 8006934:	4602      	mov	r2, r0
 8006936:	f240 21ef 	movw	r1, #751	; 0x2ef
 800693a:	f7ff bb2e 	b.w	8005f9a <_dtoa_r+0x32>
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	3202      	adds	r2, #2
 8006942:	0092      	lsls	r2, r2, #2
 8006944:	f107 010c 	add.w	r1, r7, #12
 8006948:	300c      	adds	r0, #12
 800694a:	f001 f813 	bl	8007974 <memcpy>
 800694e:	2201      	movs	r2, #1
 8006950:	4629      	mov	r1, r5
 8006952:	4620      	mov	r0, r4
 8006954:	f000 fc0a 	bl	800716c <__lshift>
 8006958:	9b00      	ldr	r3, [sp, #0]
 800695a:	3301      	adds	r3, #1
 800695c:	9304      	str	r3, [sp, #16]
 800695e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006962:	4413      	add	r3, r2
 8006964:	9308      	str	r3, [sp, #32]
 8006966:	9b02      	ldr	r3, [sp, #8]
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	46b8      	mov	r8, r7
 800696e:	9306      	str	r3, [sp, #24]
 8006970:	4607      	mov	r7, r0
 8006972:	9b04      	ldr	r3, [sp, #16]
 8006974:	4631      	mov	r1, r6
 8006976:	3b01      	subs	r3, #1
 8006978:	4650      	mov	r0, sl
 800697a:	9301      	str	r3, [sp, #4]
 800697c:	f7ff fa69 	bl	8005e52 <quorem>
 8006980:	4641      	mov	r1, r8
 8006982:	9002      	str	r0, [sp, #8]
 8006984:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006988:	4650      	mov	r0, sl
 800698a:	f000 fc5b 	bl	8007244 <__mcmp>
 800698e:	463a      	mov	r2, r7
 8006990:	9005      	str	r0, [sp, #20]
 8006992:	4631      	mov	r1, r6
 8006994:	4620      	mov	r0, r4
 8006996:	f000 fc71 	bl	800727c <__mdiff>
 800699a:	68c2      	ldr	r2, [r0, #12]
 800699c:	4605      	mov	r5, r0
 800699e:	bb02      	cbnz	r2, 80069e2 <_dtoa_r+0xa7a>
 80069a0:	4601      	mov	r1, r0
 80069a2:	4650      	mov	r0, sl
 80069a4:	f000 fc4e 	bl	8007244 <__mcmp>
 80069a8:	4602      	mov	r2, r0
 80069aa:	4629      	mov	r1, r5
 80069ac:	4620      	mov	r0, r4
 80069ae:	9209      	str	r2, [sp, #36]	; 0x24
 80069b0:	f000 fa0c 	bl	8006dcc <_Bfree>
 80069b4:	9b07      	ldr	r3, [sp, #28]
 80069b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069b8:	9d04      	ldr	r5, [sp, #16]
 80069ba:	ea43 0102 	orr.w	r1, r3, r2
 80069be:	9b06      	ldr	r3, [sp, #24]
 80069c0:	4319      	orrs	r1, r3
 80069c2:	d110      	bne.n	80069e6 <_dtoa_r+0xa7e>
 80069c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069c8:	d029      	beq.n	8006a1e <_dtoa_r+0xab6>
 80069ca:	9b05      	ldr	r3, [sp, #20]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	dd02      	ble.n	80069d6 <_dtoa_r+0xa6e>
 80069d0:	9b02      	ldr	r3, [sp, #8]
 80069d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80069d6:	9b01      	ldr	r3, [sp, #4]
 80069d8:	f883 9000 	strb.w	r9, [r3]
 80069dc:	e774      	b.n	80068c8 <_dtoa_r+0x960>
 80069de:	4638      	mov	r0, r7
 80069e0:	e7ba      	b.n	8006958 <_dtoa_r+0x9f0>
 80069e2:	2201      	movs	r2, #1
 80069e4:	e7e1      	b.n	80069aa <_dtoa_r+0xa42>
 80069e6:	9b05      	ldr	r3, [sp, #20]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	db04      	blt.n	80069f6 <_dtoa_r+0xa8e>
 80069ec:	9907      	ldr	r1, [sp, #28]
 80069ee:	430b      	orrs	r3, r1
 80069f0:	9906      	ldr	r1, [sp, #24]
 80069f2:	430b      	orrs	r3, r1
 80069f4:	d120      	bne.n	8006a38 <_dtoa_r+0xad0>
 80069f6:	2a00      	cmp	r2, #0
 80069f8:	dded      	ble.n	80069d6 <_dtoa_r+0xa6e>
 80069fa:	4651      	mov	r1, sl
 80069fc:	2201      	movs	r2, #1
 80069fe:	4620      	mov	r0, r4
 8006a00:	f000 fbb4 	bl	800716c <__lshift>
 8006a04:	4631      	mov	r1, r6
 8006a06:	4682      	mov	sl, r0
 8006a08:	f000 fc1c 	bl	8007244 <__mcmp>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	dc03      	bgt.n	8006a18 <_dtoa_r+0xab0>
 8006a10:	d1e1      	bne.n	80069d6 <_dtoa_r+0xa6e>
 8006a12:	f019 0f01 	tst.w	r9, #1
 8006a16:	d0de      	beq.n	80069d6 <_dtoa_r+0xa6e>
 8006a18:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a1c:	d1d8      	bne.n	80069d0 <_dtoa_r+0xa68>
 8006a1e:	9a01      	ldr	r2, [sp, #4]
 8006a20:	2339      	movs	r3, #57	; 0x39
 8006a22:	7013      	strb	r3, [r2, #0]
 8006a24:	462b      	mov	r3, r5
 8006a26:	461d      	mov	r5, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a2e:	2a39      	cmp	r2, #57	; 0x39
 8006a30:	d06c      	beq.n	8006b0c <_dtoa_r+0xba4>
 8006a32:	3201      	adds	r2, #1
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	e747      	b.n	80068c8 <_dtoa_r+0x960>
 8006a38:	2a00      	cmp	r2, #0
 8006a3a:	dd07      	ble.n	8006a4c <_dtoa_r+0xae4>
 8006a3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a40:	d0ed      	beq.n	8006a1e <_dtoa_r+0xab6>
 8006a42:	9a01      	ldr	r2, [sp, #4]
 8006a44:	f109 0301 	add.w	r3, r9, #1
 8006a48:	7013      	strb	r3, [r2, #0]
 8006a4a:	e73d      	b.n	80068c8 <_dtoa_r+0x960>
 8006a4c:	9b04      	ldr	r3, [sp, #16]
 8006a4e:	9a08      	ldr	r2, [sp, #32]
 8006a50:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d043      	beq.n	8006ae0 <_dtoa_r+0xb78>
 8006a58:	4651      	mov	r1, sl
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	220a      	movs	r2, #10
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f000 f9d6 	bl	8006e10 <__multadd>
 8006a64:	45b8      	cmp	r8, r7
 8006a66:	4682      	mov	sl, r0
 8006a68:	f04f 0300 	mov.w	r3, #0
 8006a6c:	f04f 020a 	mov.w	r2, #10
 8006a70:	4641      	mov	r1, r8
 8006a72:	4620      	mov	r0, r4
 8006a74:	d107      	bne.n	8006a86 <_dtoa_r+0xb1e>
 8006a76:	f000 f9cb 	bl	8006e10 <__multadd>
 8006a7a:	4680      	mov	r8, r0
 8006a7c:	4607      	mov	r7, r0
 8006a7e:	9b04      	ldr	r3, [sp, #16]
 8006a80:	3301      	adds	r3, #1
 8006a82:	9304      	str	r3, [sp, #16]
 8006a84:	e775      	b.n	8006972 <_dtoa_r+0xa0a>
 8006a86:	f000 f9c3 	bl	8006e10 <__multadd>
 8006a8a:	4639      	mov	r1, r7
 8006a8c:	4680      	mov	r8, r0
 8006a8e:	2300      	movs	r3, #0
 8006a90:	220a      	movs	r2, #10
 8006a92:	4620      	mov	r0, r4
 8006a94:	f000 f9bc 	bl	8006e10 <__multadd>
 8006a98:	4607      	mov	r7, r0
 8006a9a:	e7f0      	b.n	8006a7e <_dtoa_r+0xb16>
 8006a9c:	9b04      	ldr	r3, [sp, #16]
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	9d00      	ldr	r5, [sp, #0]
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	4650      	mov	r0, sl
 8006aa6:	f7ff f9d4 	bl	8005e52 <quorem>
 8006aaa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006aae:	9b00      	ldr	r3, [sp, #0]
 8006ab0:	f805 9b01 	strb.w	r9, [r5], #1
 8006ab4:	1aea      	subs	r2, r5, r3
 8006ab6:	9b01      	ldr	r3, [sp, #4]
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	dd07      	ble.n	8006acc <_dtoa_r+0xb64>
 8006abc:	4651      	mov	r1, sl
 8006abe:	2300      	movs	r3, #0
 8006ac0:	220a      	movs	r2, #10
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f000 f9a4 	bl	8006e10 <__multadd>
 8006ac8:	4682      	mov	sl, r0
 8006aca:	e7ea      	b.n	8006aa2 <_dtoa_r+0xb3a>
 8006acc:	9b01      	ldr	r3, [sp, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	bfc8      	it	gt
 8006ad2:	461d      	movgt	r5, r3
 8006ad4:	9b00      	ldr	r3, [sp, #0]
 8006ad6:	bfd8      	it	le
 8006ad8:	2501      	movle	r5, #1
 8006ada:	441d      	add	r5, r3
 8006adc:	f04f 0800 	mov.w	r8, #0
 8006ae0:	4651      	mov	r1, sl
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f000 fb41 	bl	800716c <__lshift>
 8006aea:	4631      	mov	r1, r6
 8006aec:	4682      	mov	sl, r0
 8006aee:	f000 fba9 	bl	8007244 <__mcmp>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	dc96      	bgt.n	8006a24 <_dtoa_r+0xabc>
 8006af6:	d102      	bne.n	8006afe <_dtoa_r+0xb96>
 8006af8:	f019 0f01 	tst.w	r9, #1
 8006afc:	d192      	bne.n	8006a24 <_dtoa_r+0xabc>
 8006afe:	462b      	mov	r3, r5
 8006b00:	461d      	mov	r5, r3
 8006b02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b06:	2a30      	cmp	r2, #48	; 0x30
 8006b08:	d0fa      	beq.n	8006b00 <_dtoa_r+0xb98>
 8006b0a:	e6dd      	b.n	80068c8 <_dtoa_r+0x960>
 8006b0c:	9a00      	ldr	r2, [sp, #0]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d189      	bne.n	8006a26 <_dtoa_r+0xabe>
 8006b12:	f10b 0b01 	add.w	fp, fp, #1
 8006b16:	2331      	movs	r3, #49	; 0x31
 8006b18:	e796      	b.n	8006a48 <_dtoa_r+0xae0>
 8006b1a:	4b0a      	ldr	r3, [pc, #40]	; (8006b44 <_dtoa_r+0xbdc>)
 8006b1c:	f7ff ba99 	b.w	8006052 <_dtoa_r+0xea>
 8006b20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f47f aa6d 	bne.w	8006002 <_dtoa_r+0x9a>
 8006b28:	4b07      	ldr	r3, [pc, #28]	; (8006b48 <_dtoa_r+0xbe0>)
 8006b2a:	f7ff ba92 	b.w	8006052 <_dtoa_r+0xea>
 8006b2e:	9b01      	ldr	r3, [sp, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	dcb5      	bgt.n	8006aa0 <_dtoa_r+0xb38>
 8006b34:	9b07      	ldr	r3, [sp, #28]
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	f73f aeb1 	bgt.w	800689e <_dtoa_r+0x936>
 8006b3c:	e7b0      	b.n	8006aa0 <_dtoa_r+0xb38>
 8006b3e:	bf00      	nop
 8006b40:	08007d24 	.word	0x08007d24
 8006b44:	08007c84 	.word	0x08007c84
 8006b48:	08007ca8 	.word	0x08007ca8

08006b4c <_free_r>:
 8006b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b4e:	2900      	cmp	r1, #0
 8006b50:	d044      	beq.n	8006bdc <_free_r+0x90>
 8006b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b56:	9001      	str	r0, [sp, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b5e:	bfb8      	it	lt
 8006b60:	18e4      	addlt	r4, r4, r3
 8006b62:	f000 f8e7 	bl	8006d34 <__malloc_lock>
 8006b66:	4a1e      	ldr	r2, [pc, #120]	; (8006be0 <_free_r+0x94>)
 8006b68:	9801      	ldr	r0, [sp, #4]
 8006b6a:	6813      	ldr	r3, [r2, #0]
 8006b6c:	b933      	cbnz	r3, 8006b7c <_free_r+0x30>
 8006b6e:	6063      	str	r3, [r4, #4]
 8006b70:	6014      	str	r4, [r2, #0]
 8006b72:	b003      	add	sp, #12
 8006b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b78:	f000 b8e2 	b.w	8006d40 <__malloc_unlock>
 8006b7c:	42a3      	cmp	r3, r4
 8006b7e:	d908      	bls.n	8006b92 <_free_r+0x46>
 8006b80:	6825      	ldr	r5, [r4, #0]
 8006b82:	1961      	adds	r1, r4, r5
 8006b84:	428b      	cmp	r3, r1
 8006b86:	bf01      	itttt	eq
 8006b88:	6819      	ldreq	r1, [r3, #0]
 8006b8a:	685b      	ldreq	r3, [r3, #4]
 8006b8c:	1949      	addeq	r1, r1, r5
 8006b8e:	6021      	streq	r1, [r4, #0]
 8006b90:	e7ed      	b.n	8006b6e <_free_r+0x22>
 8006b92:	461a      	mov	r2, r3
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	b10b      	cbz	r3, 8006b9c <_free_r+0x50>
 8006b98:	42a3      	cmp	r3, r4
 8006b9a:	d9fa      	bls.n	8006b92 <_free_r+0x46>
 8006b9c:	6811      	ldr	r1, [r2, #0]
 8006b9e:	1855      	adds	r5, r2, r1
 8006ba0:	42a5      	cmp	r5, r4
 8006ba2:	d10b      	bne.n	8006bbc <_free_r+0x70>
 8006ba4:	6824      	ldr	r4, [r4, #0]
 8006ba6:	4421      	add	r1, r4
 8006ba8:	1854      	adds	r4, r2, r1
 8006baa:	42a3      	cmp	r3, r4
 8006bac:	6011      	str	r1, [r2, #0]
 8006bae:	d1e0      	bne.n	8006b72 <_free_r+0x26>
 8006bb0:	681c      	ldr	r4, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	6053      	str	r3, [r2, #4]
 8006bb6:	440c      	add	r4, r1
 8006bb8:	6014      	str	r4, [r2, #0]
 8006bba:	e7da      	b.n	8006b72 <_free_r+0x26>
 8006bbc:	d902      	bls.n	8006bc4 <_free_r+0x78>
 8006bbe:	230c      	movs	r3, #12
 8006bc0:	6003      	str	r3, [r0, #0]
 8006bc2:	e7d6      	b.n	8006b72 <_free_r+0x26>
 8006bc4:	6825      	ldr	r5, [r4, #0]
 8006bc6:	1961      	adds	r1, r4, r5
 8006bc8:	428b      	cmp	r3, r1
 8006bca:	bf04      	itt	eq
 8006bcc:	6819      	ldreq	r1, [r3, #0]
 8006bce:	685b      	ldreq	r3, [r3, #4]
 8006bd0:	6063      	str	r3, [r4, #4]
 8006bd2:	bf04      	itt	eq
 8006bd4:	1949      	addeq	r1, r1, r5
 8006bd6:	6021      	streq	r1, [r4, #0]
 8006bd8:	6054      	str	r4, [r2, #4]
 8006bda:	e7ca      	b.n	8006b72 <_free_r+0x26>
 8006bdc:	b003      	add	sp, #12
 8006bde:	bd30      	pop	{r4, r5, pc}
 8006be0:	20000428 	.word	0x20000428

08006be4 <malloc>:
 8006be4:	4b02      	ldr	r3, [pc, #8]	; (8006bf0 <malloc+0xc>)
 8006be6:	4601      	mov	r1, r0
 8006be8:	6818      	ldr	r0, [r3, #0]
 8006bea:	f000 b823 	b.w	8006c34 <_malloc_r>
 8006bee:	bf00      	nop
 8006bf0:	20000064 	.word	0x20000064

08006bf4 <sbrk_aligned>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	4e0e      	ldr	r6, [pc, #56]	; (8006c30 <sbrk_aligned+0x3c>)
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	6831      	ldr	r1, [r6, #0]
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	b911      	cbnz	r1, 8006c06 <sbrk_aligned+0x12>
 8006c00:	f000 fea8 	bl	8007954 <_sbrk_r>
 8006c04:	6030      	str	r0, [r6, #0]
 8006c06:	4621      	mov	r1, r4
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f000 fea3 	bl	8007954 <_sbrk_r>
 8006c0e:	1c43      	adds	r3, r0, #1
 8006c10:	d00a      	beq.n	8006c28 <sbrk_aligned+0x34>
 8006c12:	1cc4      	adds	r4, r0, #3
 8006c14:	f024 0403 	bic.w	r4, r4, #3
 8006c18:	42a0      	cmp	r0, r4
 8006c1a:	d007      	beq.n	8006c2c <sbrk_aligned+0x38>
 8006c1c:	1a21      	subs	r1, r4, r0
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f000 fe98 	bl	8007954 <_sbrk_r>
 8006c24:	3001      	adds	r0, #1
 8006c26:	d101      	bne.n	8006c2c <sbrk_aligned+0x38>
 8006c28:	f04f 34ff 	mov.w	r4, #4294967295
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
 8006c30:	2000042c 	.word	0x2000042c

08006c34 <_malloc_r>:
 8006c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c38:	1ccd      	adds	r5, r1, #3
 8006c3a:	f025 0503 	bic.w	r5, r5, #3
 8006c3e:	3508      	adds	r5, #8
 8006c40:	2d0c      	cmp	r5, #12
 8006c42:	bf38      	it	cc
 8006c44:	250c      	movcc	r5, #12
 8006c46:	2d00      	cmp	r5, #0
 8006c48:	4607      	mov	r7, r0
 8006c4a:	db01      	blt.n	8006c50 <_malloc_r+0x1c>
 8006c4c:	42a9      	cmp	r1, r5
 8006c4e:	d905      	bls.n	8006c5c <_malloc_r+0x28>
 8006c50:	230c      	movs	r3, #12
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	2600      	movs	r6, #0
 8006c56:	4630      	mov	r0, r6
 8006c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d30 <_malloc_r+0xfc>
 8006c60:	f000 f868 	bl	8006d34 <__malloc_lock>
 8006c64:	f8d8 3000 	ldr.w	r3, [r8]
 8006c68:	461c      	mov	r4, r3
 8006c6a:	bb5c      	cbnz	r4, 8006cc4 <_malloc_r+0x90>
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	4638      	mov	r0, r7
 8006c70:	f7ff ffc0 	bl	8006bf4 <sbrk_aligned>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	4604      	mov	r4, r0
 8006c78:	d155      	bne.n	8006d26 <_malloc_r+0xf2>
 8006c7a:	f8d8 4000 	ldr.w	r4, [r8]
 8006c7e:	4626      	mov	r6, r4
 8006c80:	2e00      	cmp	r6, #0
 8006c82:	d145      	bne.n	8006d10 <_malloc_r+0xdc>
 8006c84:	2c00      	cmp	r4, #0
 8006c86:	d048      	beq.n	8006d1a <_malloc_r+0xe6>
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	4638      	mov	r0, r7
 8006c8e:	eb04 0903 	add.w	r9, r4, r3
 8006c92:	f000 fe5f 	bl	8007954 <_sbrk_r>
 8006c96:	4581      	cmp	r9, r0
 8006c98:	d13f      	bne.n	8006d1a <_malloc_r+0xe6>
 8006c9a:	6821      	ldr	r1, [r4, #0]
 8006c9c:	1a6d      	subs	r5, r5, r1
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	f7ff ffa7 	bl	8006bf4 <sbrk_aligned>
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	d037      	beq.n	8006d1a <_malloc_r+0xe6>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	442b      	add	r3, r5
 8006cae:	6023      	str	r3, [r4, #0]
 8006cb0:	f8d8 3000 	ldr.w	r3, [r8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d038      	beq.n	8006d2a <_malloc_r+0xf6>
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	42a2      	cmp	r2, r4
 8006cbc:	d12b      	bne.n	8006d16 <_malloc_r+0xe2>
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	605a      	str	r2, [r3, #4]
 8006cc2:	e00f      	b.n	8006ce4 <_malloc_r+0xb0>
 8006cc4:	6822      	ldr	r2, [r4, #0]
 8006cc6:	1b52      	subs	r2, r2, r5
 8006cc8:	d41f      	bmi.n	8006d0a <_malloc_r+0xd6>
 8006cca:	2a0b      	cmp	r2, #11
 8006ccc:	d917      	bls.n	8006cfe <_malloc_r+0xca>
 8006cce:	1961      	adds	r1, r4, r5
 8006cd0:	42a3      	cmp	r3, r4
 8006cd2:	6025      	str	r5, [r4, #0]
 8006cd4:	bf18      	it	ne
 8006cd6:	6059      	strne	r1, [r3, #4]
 8006cd8:	6863      	ldr	r3, [r4, #4]
 8006cda:	bf08      	it	eq
 8006cdc:	f8c8 1000 	streq.w	r1, [r8]
 8006ce0:	5162      	str	r2, [r4, r5]
 8006ce2:	604b      	str	r3, [r1, #4]
 8006ce4:	4638      	mov	r0, r7
 8006ce6:	f104 060b 	add.w	r6, r4, #11
 8006cea:	f000 f829 	bl	8006d40 <__malloc_unlock>
 8006cee:	f026 0607 	bic.w	r6, r6, #7
 8006cf2:	1d23      	adds	r3, r4, #4
 8006cf4:	1af2      	subs	r2, r6, r3
 8006cf6:	d0ae      	beq.n	8006c56 <_malloc_r+0x22>
 8006cf8:	1b9b      	subs	r3, r3, r6
 8006cfa:	50a3      	str	r3, [r4, r2]
 8006cfc:	e7ab      	b.n	8006c56 <_malloc_r+0x22>
 8006cfe:	42a3      	cmp	r3, r4
 8006d00:	6862      	ldr	r2, [r4, #4]
 8006d02:	d1dd      	bne.n	8006cc0 <_malloc_r+0x8c>
 8006d04:	f8c8 2000 	str.w	r2, [r8]
 8006d08:	e7ec      	b.n	8006ce4 <_malloc_r+0xb0>
 8006d0a:	4623      	mov	r3, r4
 8006d0c:	6864      	ldr	r4, [r4, #4]
 8006d0e:	e7ac      	b.n	8006c6a <_malloc_r+0x36>
 8006d10:	4634      	mov	r4, r6
 8006d12:	6876      	ldr	r6, [r6, #4]
 8006d14:	e7b4      	b.n	8006c80 <_malloc_r+0x4c>
 8006d16:	4613      	mov	r3, r2
 8006d18:	e7cc      	b.n	8006cb4 <_malloc_r+0x80>
 8006d1a:	230c      	movs	r3, #12
 8006d1c:	603b      	str	r3, [r7, #0]
 8006d1e:	4638      	mov	r0, r7
 8006d20:	f000 f80e 	bl	8006d40 <__malloc_unlock>
 8006d24:	e797      	b.n	8006c56 <_malloc_r+0x22>
 8006d26:	6025      	str	r5, [r4, #0]
 8006d28:	e7dc      	b.n	8006ce4 <_malloc_r+0xb0>
 8006d2a:	605b      	str	r3, [r3, #4]
 8006d2c:	deff      	udf	#255	; 0xff
 8006d2e:	bf00      	nop
 8006d30:	20000428 	.word	0x20000428

08006d34 <__malloc_lock>:
 8006d34:	4801      	ldr	r0, [pc, #4]	; (8006d3c <__malloc_lock+0x8>)
 8006d36:	f7ff b88a 	b.w	8005e4e <__retarget_lock_acquire_recursive>
 8006d3a:	bf00      	nop
 8006d3c:	20000424 	.word	0x20000424

08006d40 <__malloc_unlock>:
 8006d40:	4801      	ldr	r0, [pc, #4]	; (8006d48 <__malloc_unlock+0x8>)
 8006d42:	f7ff b885 	b.w	8005e50 <__retarget_lock_release_recursive>
 8006d46:	bf00      	nop
 8006d48:	20000424 	.word	0x20000424

08006d4c <_Balloc>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	69c6      	ldr	r6, [r0, #28]
 8006d50:	4604      	mov	r4, r0
 8006d52:	460d      	mov	r5, r1
 8006d54:	b976      	cbnz	r6, 8006d74 <_Balloc+0x28>
 8006d56:	2010      	movs	r0, #16
 8006d58:	f7ff ff44 	bl	8006be4 <malloc>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	61e0      	str	r0, [r4, #28]
 8006d60:	b920      	cbnz	r0, 8006d6c <_Balloc+0x20>
 8006d62:	4b18      	ldr	r3, [pc, #96]	; (8006dc4 <_Balloc+0x78>)
 8006d64:	4818      	ldr	r0, [pc, #96]	; (8006dc8 <_Balloc+0x7c>)
 8006d66:	216b      	movs	r1, #107	; 0x6b
 8006d68:	f000 fe12 	bl	8007990 <__assert_func>
 8006d6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d70:	6006      	str	r6, [r0, #0]
 8006d72:	60c6      	str	r6, [r0, #12]
 8006d74:	69e6      	ldr	r6, [r4, #28]
 8006d76:	68f3      	ldr	r3, [r6, #12]
 8006d78:	b183      	cbz	r3, 8006d9c <_Balloc+0x50>
 8006d7a:	69e3      	ldr	r3, [r4, #28]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d82:	b9b8      	cbnz	r0, 8006db4 <_Balloc+0x68>
 8006d84:	2101      	movs	r1, #1
 8006d86:	fa01 f605 	lsl.w	r6, r1, r5
 8006d8a:	1d72      	adds	r2, r6, #5
 8006d8c:	0092      	lsls	r2, r2, #2
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f000 fe1c 	bl	80079cc <_calloc_r>
 8006d94:	b160      	cbz	r0, 8006db0 <_Balloc+0x64>
 8006d96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d9a:	e00e      	b.n	8006dba <_Balloc+0x6e>
 8006d9c:	2221      	movs	r2, #33	; 0x21
 8006d9e:	2104      	movs	r1, #4
 8006da0:	4620      	mov	r0, r4
 8006da2:	f000 fe13 	bl	80079cc <_calloc_r>
 8006da6:	69e3      	ldr	r3, [r4, #28]
 8006da8:	60f0      	str	r0, [r6, #12]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1e4      	bne.n	8006d7a <_Balloc+0x2e>
 8006db0:	2000      	movs	r0, #0
 8006db2:	bd70      	pop	{r4, r5, r6, pc}
 8006db4:	6802      	ldr	r2, [r0, #0]
 8006db6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006dc0:	e7f7      	b.n	8006db2 <_Balloc+0x66>
 8006dc2:	bf00      	nop
 8006dc4:	08007cb5 	.word	0x08007cb5
 8006dc8:	08007d35 	.word	0x08007d35

08006dcc <_Bfree>:
 8006dcc:	b570      	push	{r4, r5, r6, lr}
 8006dce:	69c6      	ldr	r6, [r0, #28]
 8006dd0:	4605      	mov	r5, r0
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	b976      	cbnz	r6, 8006df4 <_Bfree+0x28>
 8006dd6:	2010      	movs	r0, #16
 8006dd8:	f7ff ff04 	bl	8006be4 <malloc>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	61e8      	str	r0, [r5, #28]
 8006de0:	b920      	cbnz	r0, 8006dec <_Bfree+0x20>
 8006de2:	4b09      	ldr	r3, [pc, #36]	; (8006e08 <_Bfree+0x3c>)
 8006de4:	4809      	ldr	r0, [pc, #36]	; (8006e0c <_Bfree+0x40>)
 8006de6:	218f      	movs	r1, #143	; 0x8f
 8006de8:	f000 fdd2 	bl	8007990 <__assert_func>
 8006dec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006df0:	6006      	str	r6, [r0, #0]
 8006df2:	60c6      	str	r6, [r0, #12]
 8006df4:	b13c      	cbz	r4, 8006e06 <_Bfree+0x3a>
 8006df6:	69eb      	ldr	r3, [r5, #28]
 8006df8:	6862      	ldr	r2, [r4, #4]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e00:	6021      	str	r1, [r4, #0]
 8006e02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e06:	bd70      	pop	{r4, r5, r6, pc}
 8006e08:	08007cb5 	.word	0x08007cb5
 8006e0c:	08007d35 	.word	0x08007d35

08006e10 <__multadd>:
 8006e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e14:	690d      	ldr	r5, [r1, #16]
 8006e16:	4607      	mov	r7, r0
 8006e18:	460c      	mov	r4, r1
 8006e1a:	461e      	mov	r6, r3
 8006e1c:	f101 0c14 	add.w	ip, r1, #20
 8006e20:	2000      	movs	r0, #0
 8006e22:	f8dc 3000 	ldr.w	r3, [ip]
 8006e26:	b299      	uxth	r1, r3
 8006e28:	fb02 6101 	mla	r1, r2, r1, r6
 8006e2c:	0c1e      	lsrs	r6, r3, #16
 8006e2e:	0c0b      	lsrs	r3, r1, #16
 8006e30:	fb02 3306 	mla	r3, r2, r6, r3
 8006e34:	b289      	uxth	r1, r1
 8006e36:	3001      	adds	r0, #1
 8006e38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e3c:	4285      	cmp	r5, r0
 8006e3e:	f84c 1b04 	str.w	r1, [ip], #4
 8006e42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e46:	dcec      	bgt.n	8006e22 <__multadd+0x12>
 8006e48:	b30e      	cbz	r6, 8006e8e <__multadd+0x7e>
 8006e4a:	68a3      	ldr	r3, [r4, #8]
 8006e4c:	42ab      	cmp	r3, r5
 8006e4e:	dc19      	bgt.n	8006e84 <__multadd+0x74>
 8006e50:	6861      	ldr	r1, [r4, #4]
 8006e52:	4638      	mov	r0, r7
 8006e54:	3101      	adds	r1, #1
 8006e56:	f7ff ff79 	bl	8006d4c <_Balloc>
 8006e5a:	4680      	mov	r8, r0
 8006e5c:	b928      	cbnz	r0, 8006e6a <__multadd+0x5a>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	4b0c      	ldr	r3, [pc, #48]	; (8006e94 <__multadd+0x84>)
 8006e62:	480d      	ldr	r0, [pc, #52]	; (8006e98 <__multadd+0x88>)
 8006e64:	21ba      	movs	r1, #186	; 0xba
 8006e66:	f000 fd93 	bl	8007990 <__assert_func>
 8006e6a:	6922      	ldr	r2, [r4, #16]
 8006e6c:	3202      	adds	r2, #2
 8006e6e:	f104 010c 	add.w	r1, r4, #12
 8006e72:	0092      	lsls	r2, r2, #2
 8006e74:	300c      	adds	r0, #12
 8006e76:	f000 fd7d 	bl	8007974 <memcpy>
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	4638      	mov	r0, r7
 8006e7e:	f7ff ffa5 	bl	8006dcc <_Bfree>
 8006e82:	4644      	mov	r4, r8
 8006e84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e88:	3501      	adds	r5, #1
 8006e8a:	615e      	str	r6, [r3, #20]
 8006e8c:	6125      	str	r5, [r4, #16]
 8006e8e:	4620      	mov	r0, r4
 8006e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e94:	08007d24 	.word	0x08007d24
 8006e98:	08007d35 	.word	0x08007d35

08006e9c <__hi0bits>:
 8006e9c:	0c03      	lsrs	r3, r0, #16
 8006e9e:	041b      	lsls	r3, r3, #16
 8006ea0:	b9d3      	cbnz	r3, 8006ed8 <__hi0bits+0x3c>
 8006ea2:	0400      	lsls	r0, r0, #16
 8006ea4:	2310      	movs	r3, #16
 8006ea6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006eaa:	bf04      	itt	eq
 8006eac:	0200      	lsleq	r0, r0, #8
 8006eae:	3308      	addeq	r3, #8
 8006eb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006eb4:	bf04      	itt	eq
 8006eb6:	0100      	lsleq	r0, r0, #4
 8006eb8:	3304      	addeq	r3, #4
 8006eba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006ebe:	bf04      	itt	eq
 8006ec0:	0080      	lsleq	r0, r0, #2
 8006ec2:	3302      	addeq	r3, #2
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	db05      	blt.n	8006ed4 <__hi0bits+0x38>
 8006ec8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006ecc:	f103 0301 	add.w	r3, r3, #1
 8006ed0:	bf08      	it	eq
 8006ed2:	2320      	moveq	r3, #32
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	4770      	bx	lr
 8006ed8:	2300      	movs	r3, #0
 8006eda:	e7e4      	b.n	8006ea6 <__hi0bits+0xa>

08006edc <__lo0bits>:
 8006edc:	6803      	ldr	r3, [r0, #0]
 8006ede:	f013 0207 	ands.w	r2, r3, #7
 8006ee2:	d00c      	beq.n	8006efe <__lo0bits+0x22>
 8006ee4:	07d9      	lsls	r1, r3, #31
 8006ee6:	d422      	bmi.n	8006f2e <__lo0bits+0x52>
 8006ee8:	079a      	lsls	r2, r3, #30
 8006eea:	bf49      	itett	mi
 8006eec:	085b      	lsrmi	r3, r3, #1
 8006eee:	089b      	lsrpl	r3, r3, #2
 8006ef0:	6003      	strmi	r3, [r0, #0]
 8006ef2:	2201      	movmi	r2, #1
 8006ef4:	bf5c      	itt	pl
 8006ef6:	6003      	strpl	r3, [r0, #0]
 8006ef8:	2202      	movpl	r2, #2
 8006efa:	4610      	mov	r0, r2
 8006efc:	4770      	bx	lr
 8006efe:	b299      	uxth	r1, r3
 8006f00:	b909      	cbnz	r1, 8006f06 <__lo0bits+0x2a>
 8006f02:	0c1b      	lsrs	r3, r3, #16
 8006f04:	2210      	movs	r2, #16
 8006f06:	b2d9      	uxtb	r1, r3
 8006f08:	b909      	cbnz	r1, 8006f0e <__lo0bits+0x32>
 8006f0a:	3208      	adds	r2, #8
 8006f0c:	0a1b      	lsrs	r3, r3, #8
 8006f0e:	0719      	lsls	r1, r3, #28
 8006f10:	bf04      	itt	eq
 8006f12:	091b      	lsreq	r3, r3, #4
 8006f14:	3204      	addeq	r2, #4
 8006f16:	0799      	lsls	r1, r3, #30
 8006f18:	bf04      	itt	eq
 8006f1a:	089b      	lsreq	r3, r3, #2
 8006f1c:	3202      	addeq	r2, #2
 8006f1e:	07d9      	lsls	r1, r3, #31
 8006f20:	d403      	bmi.n	8006f2a <__lo0bits+0x4e>
 8006f22:	085b      	lsrs	r3, r3, #1
 8006f24:	f102 0201 	add.w	r2, r2, #1
 8006f28:	d003      	beq.n	8006f32 <__lo0bits+0x56>
 8006f2a:	6003      	str	r3, [r0, #0]
 8006f2c:	e7e5      	b.n	8006efa <__lo0bits+0x1e>
 8006f2e:	2200      	movs	r2, #0
 8006f30:	e7e3      	b.n	8006efa <__lo0bits+0x1e>
 8006f32:	2220      	movs	r2, #32
 8006f34:	e7e1      	b.n	8006efa <__lo0bits+0x1e>
	...

08006f38 <__i2b>:
 8006f38:	b510      	push	{r4, lr}
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	f7ff ff05 	bl	8006d4c <_Balloc>
 8006f42:	4602      	mov	r2, r0
 8006f44:	b928      	cbnz	r0, 8006f52 <__i2b+0x1a>
 8006f46:	4b05      	ldr	r3, [pc, #20]	; (8006f5c <__i2b+0x24>)
 8006f48:	4805      	ldr	r0, [pc, #20]	; (8006f60 <__i2b+0x28>)
 8006f4a:	f240 1145 	movw	r1, #325	; 0x145
 8006f4e:	f000 fd1f 	bl	8007990 <__assert_func>
 8006f52:	2301      	movs	r3, #1
 8006f54:	6144      	str	r4, [r0, #20]
 8006f56:	6103      	str	r3, [r0, #16]
 8006f58:	bd10      	pop	{r4, pc}
 8006f5a:	bf00      	nop
 8006f5c:	08007d24 	.word	0x08007d24
 8006f60:	08007d35 	.word	0x08007d35

08006f64 <__multiply>:
 8006f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f68:	4691      	mov	r9, r2
 8006f6a:	690a      	ldr	r2, [r1, #16]
 8006f6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	bfb8      	it	lt
 8006f74:	460b      	movlt	r3, r1
 8006f76:	460c      	mov	r4, r1
 8006f78:	bfbc      	itt	lt
 8006f7a:	464c      	movlt	r4, r9
 8006f7c:	4699      	movlt	r9, r3
 8006f7e:	6927      	ldr	r7, [r4, #16]
 8006f80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f84:	68a3      	ldr	r3, [r4, #8]
 8006f86:	6861      	ldr	r1, [r4, #4]
 8006f88:	eb07 060a 	add.w	r6, r7, sl
 8006f8c:	42b3      	cmp	r3, r6
 8006f8e:	b085      	sub	sp, #20
 8006f90:	bfb8      	it	lt
 8006f92:	3101      	addlt	r1, #1
 8006f94:	f7ff feda 	bl	8006d4c <_Balloc>
 8006f98:	b930      	cbnz	r0, 8006fa8 <__multiply+0x44>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	4b44      	ldr	r3, [pc, #272]	; (80070b0 <__multiply+0x14c>)
 8006f9e:	4845      	ldr	r0, [pc, #276]	; (80070b4 <__multiply+0x150>)
 8006fa0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006fa4:	f000 fcf4 	bl	8007990 <__assert_func>
 8006fa8:	f100 0514 	add.w	r5, r0, #20
 8006fac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006fb0:	462b      	mov	r3, r5
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	4543      	cmp	r3, r8
 8006fb6:	d321      	bcc.n	8006ffc <__multiply+0x98>
 8006fb8:	f104 0314 	add.w	r3, r4, #20
 8006fbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006fc0:	f109 0314 	add.w	r3, r9, #20
 8006fc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006fc8:	9202      	str	r2, [sp, #8]
 8006fca:	1b3a      	subs	r2, r7, r4
 8006fcc:	3a15      	subs	r2, #21
 8006fce:	f022 0203 	bic.w	r2, r2, #3
 8006fd2:	3204      	adds	r2, #4
 8006fd4:	f104 0115 	add.w	r1, r4, #21
 8006fd8:	428f      	cmp	r7, r1
 8006fda:	bf38      	it	cc
 8006fdc:	2204      	movcc	r2, #4
 8006fde:	9201      	str	r2, [sp, #4]
 8006fe0:	9a02      	ldr	r2, [sp, #8]
 8006fe2:	9303      	str	r3, [sp, #12]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d80c      	bhi.n	8007002 <__multiply+0x9e>
 8006fe8:	2e00      	cmp	r6, #0
 8006fea:	dd03      	ble.n	8006ff4 <__multiply+0x90>
 8006fec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d05b      	beq.n	80070ac <__multiply+0x148>
 8006ff4:	6106      	str	r6, [r0, #16]
 8006ff6:	b005      	add	sp, #20
 8006ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ffc:	f843 2b04 	str.w	r2, [r3], #4
 8007000:	e7d8      	b.n	8006fb4 <__multiply+0x50>
 8007002:	f8b3 a000 	ldrh.w	sl, [r3]
 8007006:	f1ba 0f00 	cmp.w	sl, #0
 800700a:	d024      	beq.n	8007056 <__multiply+0xf2>
 800700c:	f104 0e14 	add.w	lr, r4, #20
 8007010:	46a9      	mov	r9, r5
 8007012:	f04f 0c00 	mov.w	ip, #0
 8007016:	f85e 2b04 	ldr.w	r2, [lr], #4
 800701a:	f8d9 1000 	ldr.w	r1, [r9]
 800701e:	fa1f fb82 	uxth.w	fp, r2
 8007022:	b289      	uxth	r1, r1
 8007024:	fb0a 110b 	mla	r1, sl, fp, r1
 8007028:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800702c:	f8d9 2000 	ldr.w	r2, [r9]
 8007030:	4461      	add	r1, ip
 8007032:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007036:	fb0a c20b 	mla	r2, sl, fp, ip
 800703a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800703e:	b289      	uxth	r1, r1
 8007040:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007044:	4577      	cmp	r7, lr
 8007046:	f849 1b04 	str.w	r1, [r9], #4
 800704a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800704e:	d8e2      	bhi.n	8007016 <__multiply+0xb2>
 8007050:	9a01      	ldr	r2, [sp, #4]
 8007052:	f845 c002 	str.w	ip, [r5, r2]
 8007056:	9a03      	ldr	r2, [sp, #12]
 8007058:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800705c:	3304      	adds	r3, #4
 800705e:	f1b9 0f00 	cmp.w	r9, #0
 8007062:	d021      	beq.n	80070a8 <__multiply+0x144>
 8007064:	6829      	ldr	r1, [r5, #0]
 8007066:	f104 0c14 	add.w	ip, r4, #20
 800706a:	46ae      	mov	lr, r5
 800706c:	f04f 0a00 	mov.w	sl, #0
 8007070:	f8bc b000 	ldrh.w	fp, [ip]
 8007074:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007078:	fb09 220b 	mla	r2, r9, fp, r2
 800707c:	4452      	add	r2, sl
 800707e:	b289      	uxth	r1, r1
 8007080:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007084:	f84e 1b04 	str.w	r1, [lr], #4
 8007088:	f85c 1b04 	ldr.w	r1, [ip], #4
 800708c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007090:	f8be 1000 	ldrh.w	r1, [lr]
 8007094:	fb09 110a 	mla	r1, r9, sl, r1
 8007098:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800709c:	4567      	cmp	r7, ip
 800709e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070a2:	d8e5      	bhi.n	8007070 <__multiply+0x10c>
 80070a4:	9a01      	ldr	r2, [sp, #4]
 80070a6:	50a9      	str	r1, [r5, r2]
 80070a8:	3504      	adds	r5, #4
 80070aa:	e799      	b.n	8006fe0 <__multiply+0x7c>
 80070ac:	3e01      	subs	r6, #1
 80070ae:	e79b      	b.n	8006fe8 <__multiply+0x84>
 80070b0:	08007d24 	.word	0x08007d24
 80070b4:	08007d35 	.word	0x08007d35

080070b8 <__pow5mult>:
 80070b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070bc:	4615      	mov	r5, r2
 80070be:	f012 0203 	ands.w	r2, r2, #3
 80070c2:	4606      	mov	r6, r0
 80070c4:	460f      	mov	r7, r1
 80070c6:	d007      	beq.n	80070d8 <__pow5mult+0x20>
 80070c8:	4c25      	ldr	r4, [pc, #148]	; (8007160 <__pow5mult+0xa8>)
 80070ca:	3a01      	subs	r2, #1
 80070cc:	2300      	movs	r3, #0
 80070ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070d2:	f7ff fe9d 	bl	8006e10 <__multadd>
 80070d6:	4607      	mov	r7, r0
 80070d8:	10ad      	asrs	r5, r5, #2
 80070da:	d03d      	beq.n	8007158 <__pow5mult+0xa0>
 80070dc:	69f4      	ldr	r4, [r6, #28]
 80070de:	b97c      	cbnz	r4, 8007100 <__pow5mult+0x48>
 80070e0:	2010      	movs	r0, #16
 80070e2:	f7ff fd7f 	bl	8006be4 <malloc>
 80070e6:	4602      	mov	r2, r0
 80070e8:	61f0      	str	r0, [r6, #28]
 80070ea:	b928      	cbnz	r0, 80070f8 <__pow5mult+0x40>
 80070ec:	4b1d      	ldr	r3, [pc, #116]	; (8007164 <__pow5mult+0xac>)
 80070ee:	481e      	ldr	r0, [pc, #120]	; (8007168 <__pow5mult+0xb0>)
 80070f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80070f4:	f000 fc4c 	bl	8007990 <__assert_func>
 80070f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070fc:	6004      	str	r4, [r0, #0]
 80070fe:	60c4      	str	r4, [r0, #12]
 8007100:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007104:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007108:	b94c      	cbnz	r4, 800711e <__pow5mult+0x66>
 800710a:	f240 2171 	movw	r1, #625	; 0x271
 800710e:	4630      	mov	r0, r6
 8007110:	f7ff ff12 	bl	8006f38 <__i2b>
 8007114:	2300      	movs	r3, #0
 8007116:	f8c8 0008 	str.w	r0, [r8, #8]
 800711a:	4604      	mov	r4, r0
 800711c:	6003      	str	r3, [r0, #0]
 800711e:	f04f 0900 	mov.w	r9, #0
 8007122:	07eb      	lsls	r3, r5, #31
 8007124:	d50a      	bpl.n	800713c <__pow5mult+0x84>
 8007126:	4639      	mov	r1, r7
 8007128:	4622      	mov	r2, r4
 800712a:	4630      	mov	r0, r6
 800712c:	f7ff ff1a 	bl	8006f64 <__multiply>
 8007130:	4639      	mov	r1, r7
 8007132:	4680      	mov	r8, r0
 8007134:	4630      	mov	r0, r6
 8007136:	f7ff fe49 	bl	8006dcc <_Bfree>
 800713a:	4647      	mov	r7, r8
 800713c:	106d      	asrs	r5, r5, #1
 800713e:	d00b      	beq.n	8007158 <__pow5mult+0xa0>
 8007140:	6820      	ldr	r0, [r4, #0]
 8007142:	b938      	cbnz	r0, 8007154 <__pow5mult+0x9c>
 8007144:	4622      	mov	r2, r4
 8007146:	4621      	mov	r1, r4
 8007148:	4630      	mov	r0, r6
 800714a:	f7ff ff0b 	bl	8006f64 <__multiply>
 800714e:	6020      	str	r0, [r4, #0]
 8007150:	f8c0 9000 	str.w	r9, [r0]
 8007154:	4604      	mov	r4, r0
 8007156:	e7e4      	b.n	8007122 <__pow5mult+0x6a>
 8007158:	4638      	mov	r0, r7
 800715a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800715e:	bf00      	nop
 8007160:	08007e80 	.word	0x08007e80
 8007164:	08007cb5 	.word	0x08007cb5
 8007168:	08007d35 	.word	0x08007d35

0800716c <__lshift>:
 800716c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007170:	460c      	mov	r4, r1
 8007172:	6849      	ldr	r1, [r1, #4]
 8007174:	6923      	ldr	r3, [r4, #16]
 8007176:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800717a:	68a3      	ldr	r3, [r4, #8]
 800717c:	4607      	mov	r7, r0
 800717e:	4691      	mov	r9, r2
 8007180:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007184:	f108 0601 	add.w	r6, r8, #1
 8007188:	42b3      	cmp	r3, r6
 800718a:	db0b      	blt.n	80071a4 <__lshift+0x38>
 800718c:	4638      	mov	r0, r7
 800718e:	f7ff fddd 	bl	8006d4c <_Balloc>
 8007192:	4605      	mov	r5, r0
 8007194:	b948      	cbnz	r0, 80071aa <__lshift+0x3e>
 8007196:	4602      	mov	r2, r0
 8007198:	4b28      	ldr	r3, [pc, #160]	; (800723c <__lshift+0xd0>)
 800719a:	4829      	ldr	r0, [pc, #164]	; (8007240 <__lshift+0xd4>)
 800719c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80071a0:	f000 fbf6 	bl	8007990 <__assert_func>
 80071a4:	3101      	adds	r1, #1
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	e7ee      	b.n	8007188 <__lshift+0x1c>
 80071aa:	2300      	movs	r3, #0
 80071ac:	f100 0114 	add.w	r1, r0, #20
 80071b0:	f100 0210 	add.w	r2, r0, #16
 80071b4:	4618      	mov	r0, r3
 80071b6:	4553      	cmp	r3, sl
 80071b8:	db33      	blt.n	8007222 <__lshift+0xb6>
 80071ba:	6920      	ldr	r0, [r4, #16]
 80071bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071c0:	f104 0314 	add.w	r3, r4, #20
 80071c4:	f019 091f 	ands.w	r9, r9, #31
 80071c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80071d0:	d02b      	beq.n	800722a <__lshift+0xbe>
 80071d2:	f1c9 0e20 	rsb	lr, r9, #32
 80071d6:	468a      	mov	sl, r1
 80071d8:	2200      	movs	r2, #0
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	fa00 f009 	lsl.w	r0, r0, r9
 80071e0:	4310      	orrs	r0, r2
 80071e2:	f84a 0b04 	str.w	r0, [sl], #4
 80071e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ea:	459c      	cmp	ip, r3
 80071ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80071f0:	d8f3      	bhi.n	80071da <__lshift+0x6e>
 80071f2:	ebac 0304 	sub.w	r3, ip, r4
 80071f6:	3b15      	subs	r3, #21
 80071f8:	f023 0303 	bic.w	r3, r3, #3
 80071fc:	3304      	adds	r3, #4
 80071fe:	f104 0015 	add.w	r0, r4, #21
 8007202:	4584      	cmp	ip, r0
 8007204:	bf38      	it	cc
 8007206:	2304      	movcc	r3, #4
 8007208:	50ca      	str	r2, [r1, r3]
 800720a:	b10a      	cbz	r2, 8007210 <__lshift+0xa4>
 800720c:	f108 0602 	add.w	r6, r8, #2
 8007210:	3e01      	subs	r6, #1
 8007212:	4638      	mov	r0, r7
 8007214:	612e      	str	r6, [r5, #16]
 8007216:	4621      	mov	r1, r4
 8007218:	f7ff fdd8 	bl	8006dcc <_Bfree>
 800721c:	4628      	mov	r0, r5
 800721e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007222:	f842 0f04 	str.w	r0, [r2, #4]!
 8007226:	3301      	adds	r3, #1
 8007228:	e7c5      	b.n	80071b6 <__lshift+0x4a>
 800722a:	3904      	subs	r1, #4
 800722c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007230:	f841 2f04 	str.w	r2, [r1, #4]!
 8007234:	459c      	cmp	ip, r3
 8007236:	d8f9      	bhi.n	800722c <__lshift+0xc0>
 8007238:	e7ea      	b.n	8007210 <__lshift+0xa4>
 800723a:	bf00      	nop
 800723c:	08007d24 	.word	0x08007d24
 8007240:	08007d35 	.word	0x08007d35

08007244 <__mcmp>:
 8007244:	b530      	push	{r4, r5, lr}
 8007246:	6902      	ldr	r2, [r0, #16]
 8007248:	690c      	ldr	r4, [r1, #16]
 800724a:	1b12      	subs	r2, r2, r4
 800724c:	d10e      	bne.n	800726c <__mcmp+0x28>
 800724e:	f100 0314 	add.w	r3, r0, #20
 8007252:	3114      	adds	r1, #20
 8007254:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007258:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800725c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007260:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007264:	42a5      	cmp	r5, r4
 8007266:	d003      	beq.n	8007270 <__mcmp+0x2c>
 8007268:	d305      	bcc.n	8007276 <__mcmp+0x32>
 800726a:	2201      	movs	r2, #1
 800726c:	4610      	mov	r0, r2
 800726e:	bd30      	pop	{r4, r5, pc}
 8007270:	4283      	cmp	r3, r0
 8007272:	d3f3      	bcc.n	800725c <__mcmp+0x18>
 8007274:	e7fa      	b.n	800726c <__mcmp+0x28>
 8007276:	f04f 32ff 	mov.w	r2, #4294967295
 800727a:	e7f7      	b.n	800726c <__mcmp+0x28>

0800727c <__mdiff>:
 800727c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	460c      	mov	r4, r1
 8007282:	4606      	mov	r6, r0
 8007284:	4611      	mov	r1, r2
 8007286:	4620      	mov	r0, r4
 8007288:	4690      	mov	r8, r2
 800728a:	f7ff ffdb 	bl	8007244 <__mcmp>
 800728e:	1e05      	subs	r5, r0, #0
 8007290:	d110      	bne.n	80072b4 <__mdiff+0x38>
 8007292:	4629      	mov	r1, r5
 8007294:	4630      	mov	r0, r6
 8007296:	f7ff fd59 	bl	8006d4c <_Balloc>
 800729a:	b930      	cbnz	r0, 80072aa <__mdiff+0x2e>
 800729c:	4b3a      	ldr	r3, [pc, #232]	; (8007388 <__mdiff+0x10c>)
 800729e:	4602      	mov	r2, r0
 80072a0:	f240 2137 	movw	r1, #567	; 0x237
 80072a4:	4839      	ldr	r0, [pc, #228]	; (800738c <__mdiff+0x110>)
 80072a6:	f000 fb73 	bl	8007990 <__assert_func>
 80072aa:	2301      	movs	r3, #1
 80072ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b4:	bfa4      	itt	ge
 80072b6:	4643      	movge	r3, r8
 80072b8:	46a0      	movge	r8, r4
 80072ba:	4630      	mov	r0, r6
 80072bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80072c0:	bfa6      	itte	ge
 80072c2:	461c      	movge	r4, r3
 80072c4:	2500      	movge	r5, #0
 80072c6:	2501      	movlt	r5, #1
 80072c8:	f7ff fd40 	bl	8006d4c <_Balloc>
 80072cc:	b920      	cbnz	r0, 80072d8 <__mdiff+0x5c>
 80072ce:	4b2e      	ldr	r3, [pc, #184]	; (8007388 <__mdiff+0x10c>)
 80072d0:	4602      	mov	r2, r0
 80072d2:	f240 2145 	movw	r1, #581	; 0x245
 80072d6:	e7e5      	b.n	80072a4 <__mdiff+0x28>
 80072d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80072dc:	6926      	ldr	r6, [r4, #16]
 80072de:	60c5      	str	r5, [r0, #12]
 80072e0:	f104 0914 	add.w	r9, r4, #20
 80072e4:	f108 0514 	add.w	r5, r8, #20
 80072e8:	f100 0e14 	add.w	lr, r0, #20
 80072ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80072f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80072f4:	f108 0210 	add.w	r2, r8, #16
 80072f8:	46f2      	mov	sl, lr
 80072fa:	2100      	movs	r1, #0
 80072fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007300:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007304:	fa11 f88b 	uxtah	r8, r1, fp
 8007308:	b299      	uxth	r1, r3
 800730a:	0c1b      	lsrs	r3, r3, #16
 800730c:	eba8 0801 	sub.w	r8, r8, r1
 8007310:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007314:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007318:	fa1f f888 	uxth.w	r8, r8
 800731c:	1419      	asrs	r1, r3, #16
 800731e:	454e      	cmp	r6, r9
 8007320:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007324:	f84a 3b04 	str.w	r3, [sl], #4
 8007328:	d8e8      	bhi.n	80072fc <__mdiff+0x80>
 800732a:	1b33      	subs	r3, r6, r4
 800732c:	3b15      	subs	r3, #21
 800732e:	f023 0303 	bic.w	r3, r3, #3
 8007332:	3304      	adds	r3, #4
 8007334:	3415      	adds	r4, #21
 8007336:	42a6      	cmp	r6, r4
 8007338:	bf38      	it	cc
 800733a:	2304      	movcc	r3, #4
 800733c:	441d      	add	r5, r3
 800733e:	4473      	add	r3, lr
 8007340:	469e      	mov	lr, r3
 8007342:	462e      	mov	r6, r5
 8007344:	4566      	cmp	r6, ip
 8007346:	d30e      	bcc.n	8007366 <__mdiff+0xea>
 8007348:	f10c 0203 	add.w	r2, ip, #3
 800734c:	1b52      	subs	r2, r2, r5
 800734e:	f022 0203 	bic.w	r2, r2, #3
 8007352:	3d03      	subs	r5, #3
 8007354:	45ac      	cmp	ip, r5
 8007356:	bf38      	it	cc
 8007358:	2200      	movcc	r2, #0
 800735a:	4413      	add	r3, r2
 800735c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007360:	b17a      	cbz	r2, 8007382 <__mdiff+0x106>
 8007362:	6107      	str	r7, [r0, #16]
 8007364:	e7a4      	b.n	80072b0 <__mdiff+0x34>
 8007366:	f856 8b04 	ldr.w	r8, [r6], #4
 800736a:	fa11 f288 	uxtah	r2, r1, r8
 800736e:	1414      	asrs	r4, r2, #16
 8007370:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007374:	b292      	uxth	r2, r2
 8007376:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800737a:	f84e 2b04 	str.w	r2, [lr], #4
 800737e:	1421      	asrs	r1, r4, #16
 8007380:	e7e0      	b.n	8007344 <__mdiff+0xc8>
 8007382:	3f01      	subs	r7, #1
 8007384:	e7ea      	b.n	800735c <__mdiff+0xe0>
 8007386:	bf00      	nop
 8007388:	08007d24 	.word	0x08007d24
 800738c:	08007d35 	.word	0x08007d35

08007390 <__d2b>:
 8007390:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007394:	460f      	mov	r7, r1
 8007396:	2101      	movs	r1, #1
 8007398:	ec59 8b10 	vmov	r8, r9, d0
 800739c:	4616      	mov	r6, r2
 800739e:	f7ff fcd5 	bl	8006d4c <_Balloc>
 80073a2:	4604      	mov	r4, r0
 80073a4:	b930      	cbnz	r0, 80073b4 <__d2b+0x24>
 80073a6:	4602      	mov	r2, r0
 80073a8:	4b24      	ldr	r3, [pc, #144]	; (800743c <__d2b+0xac>)
 80073aa:	4825      	ldr	r0, [pc, #148]	; (8007440 <__d2b+0xb0>)
 80073ac:	f240 310f 	movw	r1, #783	; 0x30f
 80073b0:	f000 faee 	bl	8007990 <__assert_func>
 80073b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80073b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073bc:	bb2d      	cbnz	r5, 800740a <__d2b+0x7a>
 80073be:	9301      	str	r3, [sp, #4]
 80073c0:	f1b8 0300 	subs.w	r3, r8, #0
 80073c4:	d026      	beq.n	8007414 <__d2b+0x84>
 80073c6:	4668      	mov	r0, sp
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	f7ff fd87 	bl	8006edc <__lo0bits>
 80073ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80073d2:	b1e8      	cbz	r0, 8007410 <__d2b+0x80>
 80073d4:	f1c0 0320 	rsb	r3, r0, #32
 80073d8:	fa02 f303 	lsl.w	r3, r2, r3
 80073dc:	430b      	orrs	r3, r1
 80073de:	40c2      	lsrs	r2, r0
 80073e0:	6163      	str	r3, [r4, #20]
 80073e2:	9201      	str	r2, [sp, #4]
 80073e4:	9b01      	ldr	r3, [sp, #4]
 80073e6:	61a3      	str	r3, [r4, #24]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	bf14      	ite	ne
 80073ec:	2202      	movne	r2, #2
 80073ee:	2201      	moveq	r2, #1
 80073f0:	6122      	str	r2, [r4, #16]
 80073f2:	b1bd      	cbz	r5, 8007424 <__d2b+0x94>
 80073f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80073f8:	4405      	add	r5, r0
 80073fa:	603d      	str	r5, [r7, #0]
 80073fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007400:	6030      	str	r0, [r6, #0]
 8007402:	4620      	mov	r0, r4
 8007404:	b003      	add	sp, #12
 8007406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800740a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800740e:	e7d6      	b.n	80073be <__d2b+0x2e>
 8007410:	6161      	str	r1, [r4, #20]
 8007412:	e7e7      	b.n	80073e4 <__d2b+0x54>
 8007414:	a801      	add	r0, sp, #4
 8007416:	f7ff fd61 	bl	8006edc <__lo0bits>
 800741a:	9b01      	ldr	r3, [sp, #4]
 800741c:	6163      	str	r3, [r4, #20]
 800741e:	3020      	adds	r0, #32
 8007420:	2201      	movs	r2, #1
 8007422:	e7e5      	b.n	80073f0 <__d2b+0x60>
 8007424:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007428:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800742c:	6038      	str	r0, [r7, #0]
 800742e:	6918      	ldr	r0, [r3, #16]
 8007430:	f7ff fd34 	bl	8006e9c <__hi0bits>
 8007434:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007438:	e7e2      	b.n	8007400 <__d2b+0x70>
 800743a:	bf00      	nop
 800743c:	08007d24 	.word	0x08007d24
 8007440:	08007d35 	.word	0x08007d35

08007444 <__sfputc_r>:
 8007444:	6893      	ldr	r3, [r2, #8]
 8007446:	3b01      	subs	r3, #1
 8007448:	2b00      	cmp	r3, #0
 800744a:	b410      	push	{r4}
 800744c:	6093      	str	r3, [r2, #8]
 800744e:	da08      	bge.n	8007462 <__sfputc_r+0x1e>
 8007450:	6994      	ldr	r4, [r2, #24]
 8007452:	42a3      	cmp	r3, r4
 8007454:	db01      	blt.n	800745a <__sfputc_r+0x16>
 8007456:	290a      	cmp	r1, #10
 8007458:	d103      	bne.n	8007462 <__sfputc_r+0x1e>
 800745a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800745e:	f000 b9e3 	b.w	8007828 <__swbuf_r>
 8007462:	6813      	ldr	r3, [r2, #0]
 8007464:	1c58      	adds	r0, r3, #1
 8007466:	6010      	str	r0, [r2, #0]
 8007468:	7019      	strb	r1, [r3, #0]
 800746a:	4608      	mov	r0, r1
 800746c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007470:	4770      	bx	lr

08007472 <__sfputs_r>:
 8007472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007474:	4606      	mov	r6, r0
 8007476:	460f      	mov	r7, r1
 8007478:	4614      	mov	r4, r2
 800747a:	18d5      	adds	r5, r2, r3
 800747c:	42ac      	cmp	r4, r5
 800747e:	d101      	bne.n	8007484 <__sfputs_r+0x12>
 8007480:	2000      	movs	r0, #0
 8007482:	e007      	b.n	8007494 <__sfputs_r+0x22>
 8007484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007488:	463a      	mov	r2, r7
 800748a:	4630      	mov	r0, r6
 800748c:	f7ff ffda 	bl	8007444 <__sfputc_r>
 8007490:	1c43      	adds	r3, r0, #1
 8007492:	d1f3      	bne.n	800747c <__sfputs_r+0xa>
 8007494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007498 <_vfiprintf_r>:
 8007498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749c:	460d      	mov	r5, r1
 800749e:	b09d      	sub	sp, #116	; 0x74
 80074a0:	4614      	mov	r4, r2
 80074a2:	4698      	mov	r8, r3
 80074a4:	4606      	mov	r6, r0
 80074a6:	b118      	cbz	r0, 80074b0 <_vfiprintf_r+0x18>
 80074a8:	6a03      	ldr	r3, [r0, #32]
 80074aa:	b90b      	cbnz	r3, 80074b0 <_vfiprintf_r+0x18>
 80074ac:	f7fe fbc6 	bl	8005c3c <__sinit>
 80074b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074b2:	07d9      	lsls	r1, r3, #31
 80074b4:	d405      	bmi.n	80074c2 <_vfiprintf_r+0x2a>
 80074b6:	89ab      	ldrh	r3, [r5, #12]
 80074b8:	059a      	lsls	r2, r3, #22
 80074ba:	d402      	bmi.n	80074c2 <_vfiprintf_r+0x2a>
 80074bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074be:	f7fe fcc6 	bl	8005e4e <__retarget_lock_acquire_recursive>
 80074c2:	89ab      	ldrh	r3, [r5, #12]
 80074c4:	071b      	lsls	r3, r3, #28
 80074c6:	d501      	bpl.n	80074cc <_vfiprintf_r+0x34>
 80074c8:	692b      	ldr	r3, [r5, #16]
 80074ca:	b99b      	cbnz	r3, 80074f4 <_vfiprintf_r+0x5c>
 80074cc:	4629      	mov	r1, r5
 80074ce:	4630      	mov	r0, r6
 80074d0:	f000 f9e8 	bl	80078a4 <__swsetup_r>
 80074d4:	b170      	cbz	r0, 80074f4 <_vfiprintf_r+0x5c>
 80074d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074d8:	07dc      	lsls	r4, r3, #31
 80074da:	d504      	bpl.n	80074e6 <_vfiprintf_r+0x4e>
 80074dc:	f04f 30ff 	mov.w	r0, #4294967295
 80074e0:	b01d      	add	sp, #116	; 0x74
 80074e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e6:	89ab      	ldrh	r3, [r5, #12]
 80074e8:	0598      	lsls	r0, r3, #22
 80074ea:	d4f7      	bmi.n	80074dc <_vfiprintf_r+0x44>
 80074ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074ee:	f7fe fcaf 	bl	8005e50 <__retarget_lock_release_recursive>
 80074f2:	e7f3      	b.n	80074dc <_vfiprintf_r+0x44>
 80074f4:	2300      	movs	r3, #0
 80074f6:	9309      	str	r3, [sp, #36]	; 0x24
 80074f8:	2320      	movs	r3, #32
 80074fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007502:	2330      	movs	r3, #48	; 0x30
 8007504:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80076b8 <_vfiprintf_r+0x220>
 8007508:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800750c:	f04f 0901 	mov.w	r9, #1
 8007510:	4623      	mov	r3, r4
 8007512:	469a      	mov	sl, r3
 8007514:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007518:	b10a      	cbz	r2, 800751e <_vfiprintf_r+0x86>
 800751a:	2a25      	cmp	r2, #37	; 0x25
 800751c:	d1f9      	bne.n	8007512 <_vfiprintf_r+0x7a>
 800751e:	ebba 0b04 	subs.w	fp, sl, r4
 8007522:	d00b      	beq.n	800753c <_vfiprintf_r+0xa4>
 8007524:	465b      	mov	r3, fp
 8007526:	4622      	mov	r2, r4
 8007528:	4629      	mov	r1, r5
 800752a:	4630      	mov	r0, r6
 800752c:	f7ff ffa1 	bl	8007472 <__sfputs_r>
 8007530:	3001      	adds	r0, #1
 8007532:	f000 80a9 	beq.w	8007688 <_vfiprintf_r+0x1f0>
 8007536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007538:	445a      	add	r2, fp
 800753a:	9209      	str	r2, [sp, #36]	; 0x24
 800753c:	f89a 3000 	ldrb.w	r3, [sl]
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 80a1 	beq.w	8007688 <_vfiprintf_r+0x1f0>
 8007546:	2300      	movs	r3, #0
 8007548:	f04f 32ff 	mov.w	r2, #4294967295
 800754c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007550:	f10a 0a01 	add.w	sl, sl, #1
 8007554:	9304      	str	r3, [sp, #16]
 8007556:	9307      	str	r3, [sp, #28]
 8007558:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800755c:	931a      	str	r3, [sp, #104]	; 0x68
 800755e:	4654      	mov	r4, sl
 8007560:	2205      	movs	r2, #5
 8007562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007566:	4854      	ldr	r0, [pc, #336]	; (80076b8 <_vfiprintf_r+0x220>)
 8007568:	f7f8 fe32 	bl	80001d0 <memchr>
 800756c:	9a04      	ldr	r2, [sp, #16]
 800756e:	b9d8      	cbnz	r0, 80075a8 <_vfiprintf_r+0x110>
 8007570:	06d1      	lsls	r1, r2, #27
 8007572:	bf44      	itt	mi
 8007574:	2320      	movmi	r3, #32
 8007576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800757a:	0713      	lsls	r3, r2, #28
 800757c:	bf44      	itt	mi
 800757e:	232b      	movmi	r3, #43	; 0x2b
 8007580:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007584:	f89a 3000 	ldrb.w	r3, [sl]
 8007588:	2b2a      	cmp	r3, #42	; 0x2a
 800758a:	d015      	beq.n	80075b8 <_vfiprintf_r+0x120>
 800758c:	9a07      	ldr	r2, [sp, #28]
 800758e:	4654      	mov	r4, sl
 8007590:	2000      	movs	r0, #0
 8007592:	f04f 0c0a 	mov.w	ip, #10
 8007596:	4621      	mov	r1, r4
 8007598:	f811 3b01 	ldrb.w	r3, [r1], #1
 800759c:	3b30      	subs	r3, #48	; 0x30
 800759e:	2b09      	cmp	r3, #9
 80075a0:	d94d      	bls.n	800763e <_vfiprintf_r+0x1a6>
 80075a2:	b1b0      	cbz	r0, 80075d2 <_vfiprintf_r+0x13a>
 80075a4:	9207      	str	r2, [sp, #28]
 80075a6:	e014      	b.n	80075d2 <_vfiprintf_r+0x13a>
 80075a8:	eba0 0308 	sub.w	r3, r0, r8
 80075ac:	fa09 f303 	lsl.w	r3, r9, r3
 80075b0:	4313      	orrs	r3, r2
 80075b2:	9304      	str	r3, [sp, #16]
 80075b4:	46a2      	mov	sl, r4
 80075b6:	e7d2      	b.n	800755e <_vfiprintf_r+0xc6>
 80075b8:	9b03      	ldr	r3, [sp, #12]
 80075ba:	1d19      	adds	r1, r3, #4
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	9103      	str	r1, [sp, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	bfbb      	ittet	lt
 80075c4:	425b      	neglt	r3, r3
 80075c6:	f042 0202 	orrlt.w	r2, r2, #2
 80075ca:	9307      	strge	r3, [sp, #28]
 80075cc:	9307      	strlt	r3, [sp, #28]
 80075ce:	bfb8      	it	lt
 80075d0:	9204      	strlt	r2, [sp, #16]
 80075d2:	7823      	ldrb	r3, [r4, #0]
 80075d4:	2b2e      	cmp	r3, #46	; 0x2e
 80075d6:	d10c      	bne.n	80075f2 <_vfiprintf_r+0x15a>
 80075d8:	7863      	ldrb	r3, [r4, #1]
 80075da:	2b2a      	cmp	r3, #42	; 0x2a
 80075dc:	d134      	bne.n	8007648 <_vfiprintf_r+0x1b0>
 80075de:	9b03      	ldr	r3, [sp, #12]
 80075e0:	1d1a      	adds	r2, r3, #4
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	9203      	str	r2, [sp, #12]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	bfb8      	it	lt
 80075ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80075ee:	3402      	adds	r4, #2
 80075f0:	9305      	str	r3, [sp, #20]
 80075f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80076c8 <_vfiprintf_r+0x230>
 80075f6:	7821      	ldrb	r1, [r4, #0]
 80075f8:	2203      	movs	r2, #3
 80075fa:	4650      	mov	r0, sl
 80075fc:	f7f8 fde8 	bl	80001d0 <memchr>
 8007600:	b138      	cbz	r0, 8007612 <_vfiprintf_r+0x17a>
 8007602:	9b04      	ldr	r3, [sp, #16]
 8007604:	eba0 000a 	sub.w	r0, r0, sl
 8007608:	2240      	movs	r2, #64	; 0x40
 800760a:	4082      	lsls	r2, r0
 800760c:	4313      	orrs	r3, r2
 800760e:	3401      	adds	r4, #1
 8007610:	9304      	str	r3, [sp, #16]
 8007612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007616:	4829      	ldr	r0, [pc, #164]	; (80076bc <_vfiprintf_r+0x224>)
 8007618:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800761c:	2206      	movs	r2, #6
 800761e:	f7f8 fdd7 	bl	80001d0 <memchr>
 8007622:	2800      	cmp	r0, #0
 8007624:	d03f      	beq.n	80076a6 <_vfiprintf_r+0x20e>
 8007626:	4b26      	ldr	r3, [pc, #152]	; (80076c0 <_vfiprintf_r+0x228>)
 8007628:	bb1b      	cbnz	r3, 8007672 <_vfiprintf_r+0x1da>
 800762a:	9b03      	ldr	r3, [sp, #12]
 800762c:	3307      	adds	r3, #7
 800762e:	f023 0307 	bic.w	r3, r3, #7
 8007632:	3308      	adds	r3, #8
 8007634:	9303      	str	r3, [sp, #12]
 8007636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007638:	443b      	add	r3, r7
 800763a:	9309      	str	r3, [sp, #36]	; 0x24
 800763c:	e768      	b.n	8007510 <_vfiprintf_r+0x78>
 800763e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007642:	460c      	mov	r4, r1
 8007644:	2001      	movs	r0, #1
 8007646:	e7a6      	b.n	8007596 <_vfiprintf_r+0xfe>
 8007648:	2300      	movs	r3, #0
 800764a:	3401      	adds	r4, #1
 800764c:	9305      	str	r3, [sp, #20]
 800764e:	4619      	mov	r1, r3
 8007650:	f04f 0c0a 	mov.w	ip, #10
 8007654:	4620      	mov	r0, r4
 8007656:	f810 2b01 	ldrb.w	r2, [r0], #1
 800765a:	3a30      	subs	r2, #48	; 0x30
 800765c:	2a09      	cmp	r2, #9
 800765e:	d903      	bls.n	8007668 <_vfiprintf_r+0x1d0>
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0c6      	beq.n	80075f2 <_vfiprintf_r+0x15a>
 8007664:	9105      	str	r1, [sp, #20]
 8007666:	e7c4      	b.n	80075f2 <_vfiprintf_r+0x15a>
 8007668:	fb0c 2101 	mla	r1, ip, r1, r2
 800766c:	4604      	mov	r4, r0
 800766e:	2301      	movs	r3, #1
 8007670:	e7f0      	b.n	8007654 <_vfiprintf_r+0x1bc>
 8007672:	ab03      	add	r3, sp, #12
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	462a      	mov	r2, r5
 8007678:	4b12      	ldr	r3, [pc, #72]	; (80076c4 <_vfiprintf_r+0x22c>)
 800767a:	a904      	add	r1, sp, #16
 800767c:	4630      	mov	r0, r6
 800767e:	f7fd fe8b 	bl	8005398 <_printf_float>
 8007682:	4607      	mov	r7, r0
 8007684:	1c78      	adds	r0, r7, #1
 8007686:	d1d6      	bne.n	8007636 <_vfiprintf_r+0x19e>
 8007688:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800768a:	07d9      	lsls	r1, r3, #31
 800768c:	d405      	bmi.n	800769a <_vfiprintf_r+0x202>
 800768e:	89ab      	ldrh	r3, [r5, #12]
 8007690:	059a      	lsls	r2, r3, #22
 8007692:	d402      	bmi.n	800769a <_vfiprintf_r+0x202>
 8007694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007696:	f7fe fbdb 	bl	8005e50 <__retarget_lock_release_recursive>
 800769a:	89ab      	ldrh	r3, [r5, #12]
 800769c:	065b      	lsls	r3, r3, #25
 800769e:	f53f af1d 	bmi.w	80074dc <_vfiprintf_r+0x44>
 80076a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076a4:	e71c      	b.n	80074e0 <_vfiprintf_r+0x48>
 80076a6:	ab03      	add	r3, sp, #12
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	462a      	mov	r2, r5
 80076ac:	4b05      	ldr	r3, [pc, #20]	; (80076c4 <_vfiprintf_r+0x22c>)
 80076ae:	a904      	add	r1, sp, #16
 80076b0:	4630      	mov	r0, r6
 80076b2:	f7fe f915 	bl	80058e0 <_printf_i>
 80076b6:	e7e4      	b.n	8007682 <_vfiprintf_r+0x1ea>
 80076b8:	08007e8c 	.word	0x08007e8c
 80076bc:	08007e96 	.word	0x08007e96
 80076c0:	08005399 	.word	0x08005399
 80076c4:	08007473 	.word	0x08007473
 80076c8:	08007e92 	.word	0x08007e92

080076cc <__sflush_r>:
 80076cc:	898a      	ldrh	r2, [r1, #12]
 80076ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d2:	4605      	mov	r5, r0
 80076d4:	0710      	lsls	r0, r2, #28
 80076d6:	460c      	mov	r4, r1
 80076d8:	d458      	bmi.n	800778c <__sflush_r+0xc0>
 80076da:	684b      	ldr	r3, [r1, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	dc05      	bgt.n	80076ec <__sflush_r+0x20>
 80076e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	dc02      	bgt.n	80076ec <__sflush_r+0x20>
 80076e6:	2000      	movs	r0, #0
 80076e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076ee:	2e00      	cmp	r6, #0
 80076f0:	d0f9      	beq.n	80076e6 <__sflush_r+0x1a>
 80076f2:	2300      	movs	r3, #0
 80076f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076f8:	682f      	ldr	r7, [r5, #0]
 80076fa:	6a21      	ldr	r1, [r4, #32]
 80076fc:	602b      	str	r3, [r5, #0]
 80076fe:	d032      	beq.n	8007766 <__sflush_r+0x9a>
 8007700:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007702:	89a3      	ldrh	r3, [r4, #12]
 8007704:	075a      	lsls	r2, r3, #29
 8007706:	d505      	bpl.n	8007714 <__sflush_r+0x48>
 8007708:	6863      	ldr	r3, [r4, #4]
 800770a:	1ac0      	subs	r0, r0, r3
 800770c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800770e:	b10b      	cbz	r3, 8007714 <__sflush_r+0x48>
 8007710:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007712:	1ac0      	subs	r0, r0, r3
 8007714:	2300      	movs	r3, #0
 8007716:	4602      	mov	r2, r0
 8007718:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800771a:	6a21      	ldr	r1, [r4, #32]
 800771c:	4628      	mov	r0, r5
 800771e:	47b0      	blx	r6
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	89a3      	ldrh	r3, [r4, #12]
 8007724:	d106      	bne.n	8007734 <__sflush_r+0x68>
 8007726:	6829      	ldr	r1, [r5, #0]
 8007728:	291d      	cmp	r1, #29
 800772a:	d82b      	bhi.n	8007784 <__sflush_r+0xb8>
 800772c:	4a29      	ldr	r2, [pc, #164]	; (80077d4 <__sflush_r+0x108>)
 800772e:	410a      	asrs	r2, r1
 8007730:	07d6      	lsls	r6, r2, #31
 8007732:	d427      	bmi.n	8007784 <__sflush_r+0xb8>
 8007734:	2200      	movs	r2, #0
 8007736:	6062      	str	r2, [r4, #4]
 8007738:	04d9      	lsls	r1, r3, #19
 800773a:	6922      	ldr	r2, [r4, #16]
 800773c:	6022      	str	r2, [r4, #0]
 800773e:	d504      	bpl.n	800774a <__sflush_r+0x7e>
 8007740:	1c42      	adds	r2, r0, #1
 8007742:	d101      	bne.n	8007748 <__sflush_r+0x7c>
 8007744:	682b      	ldr	r3, [r5, #0]
 8007746:	b903      	cbnz	r3, 800774a <__sflush_r+0x7e>
 8007748:	6560      	str	r0, [r4, #84]	; 0x54
 800774a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800774c:	602f      	str	r7, [r5, #0]
 800774e:	2900      	cmp	r1, #0
 8007750:	d0c9      	beq.n	80076e6 <__sflush_r+0x1a>
 8007752:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007756:	4299      	cmp	r1, r3
 8007758:	d002      	beq.n	8007760 <__sflush_r+0x94>
 800775a:	4628      	mov	r0, r5
 800775c:	f7ff f9f6 	bl	8006b4c <_free_r>
 8007760:	2000      	movs	r0, #0
 8007762:	6360      	str	r0, [r4, #52]	; 0x34
 8007764:	e7c0      	b.n	80076e8 <__sflush_r+0x1c>
 8007766:	2301      	movs	r3, #1
 8007768:	4628      	mov	r0, r5
 800776a:	47b0      	blx	r6
 800776c:	1c41      	adds	r1, r0, #1
 800776e:	d1c8      	bne.n	8007702 <__sflush_r+0x36>
 8007770:	682b      	ldr	r3, [r5, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0c5      	beq.n	8007702 <__sflush_r+0x36>
 8007776:	2b1d      	cmp	r3, #29
 8007778:	d001      	beq.n	800777e <__sflush_r+0xb2>
 800777a:	2b16      	cmp	r3, #22
 800777c:	d101      	bne.n	8007782 <__sflush_r+0xb6>
 800777e:	602f      	str	r7, [r5, #0]
 8007780:	e7b1      	b.n	80076e6 <__sflush_r+0x1a>
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007788:	81a3      	strh	r3, [r4, #12]
 800778a:	e7ad      	b.n	80076e8 <__sflush_r+0x1c>
 800778c:	690f      	ldr	r7, [r1, #16]
 800778e:	2f00      	cmp	r7, #0
 8007790:	d0a9      	beq.n	80076e6 <__sflush_r+0x1a>
 8007792:	0793      	lsls	r3, r2, #30
 8007794:	680e      	ldr	r6, [r1, #0]
 8007796:	bf08      	it	eq
 8007798:	694b      	ldreq	r3, [r1, #20]
 800779a:	600f      	str	r7, [r1, #0]
 800779c:	bf18      	it	ne
 800779e:	2300      	movne	r3, #0
 80077a0:	eba6 0807 	sub.w	r8, r6, r7
 80077a4:	608b      	str	r3, [r1, #8]
 80077a6:	f1b8 0f00 	cmp.w	r8, #0
 80077aa:	dd9c      	ble.n	80076e6 <__sflush_r+0x1a>
 80077ac:	6a21      	ldr	r1, [r4, #32]
 80077ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077b0:	4643      	mov	r3, r8
 80077b2:	463a      	mov	r2, r7
 80077b4:	4628      	mov	r0, r5
 80077b6:	47b0      	blx	r6
 80077b8:	2800      	cmp	r0, #0
 80077ba:	dc06      	bgt.n	80077ca <__sflush_r+0xfe>
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077c2:	81a3      	strh	r3, [r4, #12]
 80077c4:	f04f 30ff 	mov.w	r0, #4294967295
 80077c8:	e78e      	b.n	80076e8 <__sflush_r+0x1c>
 80077ca:	4407      	add	r7, r0
 80077cc:	eba8 0800 	sub.w	r8, r8, r0
 80077d0:	e7e9      	b.n	80077a6 <__sflush_r+0xda>
 80077d2:	bf00      	nop
 80077d4:	dfbffffe 	.word	0xdfbffffe

080077d8 <_fflush_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	690b      	ldr	r3, [r1, #16]
 80077dc:	4605      	mov	r5, r0
 80077de:	460c      	mov	r4, r1
 80077e0:	b913      	cbnz	r3, 80077e8 <_fflush_r+0x10>
 80077e2:	2500      	movs	r5, #0
 80077e4:	4628      	mov	r0, r5
 80077e6:	bd38      	pop	{r3, r4, r5, pc}
 80077e8:	b118      	cbz	r0, 80077f2 <_fflush_r+0x1a>
 80077ea:	6a03      	ldr	r3, [r0, #32]
 80077ec:	b90b      	cbnz	r3, 80077f2 <_fflush_r+0x1a>
 80077ee:	f7fe fa25 	bl	8005c3c <__sinit>
 80077f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d0f3      	beq.n	80077e2 <_fflush_r+0xa>
 80077fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077fc:	07d0      	lsls	r0, r2, #31
 80077fe:	d404      	bmi.n	800780a <_fflush_r+0x32>
 8007800:	0599      	lsls	r1, r3, #22
 8007802:	d402      	bmi.n	800780a <_fflush_r+0x32>
 8007804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007806:	f7fe fb22 	bl	8005e4e <__retarget_lock_acquire_recursive>
 800780a:	4628      	mov	r0, r5
 800780c:	4621      	mov	r1, r4
 800780e:	f7ff ff5d 	bl	80076cc <__sflush_r>
 8007812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007814:	07da      	lsls	r2, r3, #31
 8007816:	4605      	mov	r5, r0
 8007818:	d4e4      	bmi.n	80077e4 <_fflush_r+0xc>
 800781a:	89a3      	ldrh	r3, [r4, #12]
 800781c:	059b      	lsls	r3, r3, #22
 800781e:	d4e1      	bmi.n	80077e4 <_fflush_r+0xc>
 8007820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007822:	f7fe fb15 	bl	8005e50 <__retarget_lock_release_recursive>
 8007826:	e7dd      	b.n	80077e4 <_fflush_r+0xc>

08007828 <__swbuf_r>:
 8007828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782a:	460e      	mov	r6, r1
 800782c:	4614      	mov	r4, r2
 800782e:	4605      	mov	r5, r0
 8007830:	b118      	cbz	r0, 800783a <__swbuf_r+0x12>
 8007832:	6a03      	ldr	r3, [r0, #32]
 8007834:	b90b      	cbnz	r3, 800783a <__swbuf_r+0x12>
 8007836:	f7fe fa01 	bl	8005c3c <__sinit>
 800783a:	69a3      	ldr	r3, [r4, #24]
 800783c:	60a3      	str	r3, [r4, #8]
 800783e:	89a3      	ldrh	r3, [r4, #12]
 8007840:	071a      	lsls	r2, r3, #28
 8007842:	d525      	bpl.n	8007890 <__swbuf_r+0x68>
 8007844:	6923      	ldr	r3, [r4, #16]
 8007846:	b31b      	cbz	r3, 8007890 <__swbuf_r+0x68>
 8007848:	6823      	ldr	r3, [r4, #0]
 800784a:	6922      	ldr	r2, [r4, #16]
 800784c:	1a98      	subs	r0, r3, r2
 800784e:	6963      	ldr	r3, [r4, #20]
 8007850:	b2f6      	uxtb	r6, r6
 8007852:	4283      	cmp	r3, r0
 8007854:	4637      	mov	r7, r6
 8007856:	dc04      	bgt.n	8007862 <__swbuf_r+0x3a>
 8007858:	4621      	mov	r1, r4
 800785a:	4628      	mov	r0, r5
 800785c:	f7ff ffbc 	bl	80077d8 <_fflush_r>
 8007860:	b9e0      	cbnz	r0, 800789c <__swbuf_r+0x74>
 8007862:	68a3      	ldr	r3, [r4, #8]
 8007864:	3b01      	subs	r3, #1
 8007866:	60a3      	str	r3, [r4, #8]
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	1c5a      	adds	r2, r3, #1
 800786c:	6022      	str	r2, [r4, #0]
 800786e:	701e      	strb	r6, [r3, #0]
 8007870:	6962      	ldr	r2, [r4, #20]
 8007872:	1c43      	adds	r3, r0, #1
 8007874:	429a      	cmp	r2, r3
 8007876:	d004      	beq.n	8007882 <__swbuf_r+0x5a>
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	07db      	lsls	r3, r3, #31
 800787c:	d506      	bpl.n	800788c <__swbuf_r+0x64>
 800787e:	2e0a      	cmp	r6, #10
 8007880:	d104      	bne.n	800788c <__swbuf_r+0x64>
 8007882:	4621      	mov	r1, r4
 8007884:	4628      	mov	r0, r5
 8007886:	f7ff ffa7 	bl	80077d8 <_fflush_r>
 800788a:	b938      	cbnz	r0, 800789c <__swbuf_r+0x74>
 800788c:	4638      	mov	r0, r7
 800788e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007890:	4621      	mov	r1, r4
 8007892:	4628      	mov	r0, r5
 8007894:	f000 f806 	bl	80078a4 <__swsetup_r>
 8007898:	2800      	cmp	r0, #0
 800789a:	d0d5      	beq.n	8007848 <__swbuf_r+0x20>
 800789c:	f04f 37ff 	mov.w	r7, #4294967295
 80078a0:	e7f4      	b.n	800788c <__swbuf_r+0x64>
	...

080078a4 <__swsetup_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4b2a      	ldr	r3, [pc, #168]	; (8007950 <__swsetup_r+0xac>)
 80078a8:	4605      	mov	r5, r0
 80078aa:	6818      	ldr	r0, [r3, #0]
 80078ac:	460c      	mov	r4, r1
 80078ae:	b118      	cbz	r0, 80078b8 <__swsetup_r+0x14>
 80078b0:	6a03      	ldr	r3, [r0, #32]
 80078b2:	b90b      	cbnz	r3, 80078b8 <__swsetup_r+0x14>
 80078b4:	f7fe f9c2 	bl	8005c3c <__sinit>
 80078b8:	89a3      	ldrh	r3, [r4, #12]
 80078ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078be:	0718      	lsls	r0, r3, #28
 80078c0:	d422      	bmi.n	8007908 <__swsetup_r+0x64>
 80078c2:	06d9      	lsls	r1, r3, #27
 80078c4:	d407      	bmi.n	80078d6 <__swsetup_r+0x32>
 80078c6:	2309      	movs	r3, #9
 80078c8:	602b      	str	r3, [r5, #0]
 80078ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078ce:	81a3      	strh	r3, [r4, #12]
 80078d0:	f04f 30ff 	mov.w	r0, #4294967295
 80078d4:	e034      	b.n	8007940 <__swsetup_r+0x9c>
 80078d6:	0758      	lsls	r0, r3, #29
 80078d8:	d512      	bpl.n	8007900 <__swsetup_r+0x5c>
 80078da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078dc:	b141      	cbz	r1, 80078f0 <__swsetup_r+0x4c>
 80078de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078e2:	4299      	cmp	r1, r3
 80078e4:	d002      	beq.n	80078ec <__swsetup_r+0x48>
 80078e6:	4628      	mov	r0, r5
 80078e8:	f7ff f930 	bl	8006b4c <_free_r>
 80078ec:	2300      	movs	r3, #0
 80078ee:	6363      	str	r3, [r4, #52]	; 0x34
 80078f0:	89a3      	ldrh	r3, [r4, #12]
 80078f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078f6:	81a3      	strh	r3, [r4, #12]
 80078f8:	2300      	movs	r3, #0
 80078fa:	6063      	str	r3, [r4, #4]
 80078fc:	6923      	ldr	r3, [r4, #16]
 80078fe:	6023      	str	r3, [r4, #0]
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	f043 0308 	orr.w	r3, r3, #8
 8007906:	81a3      	strh	r3, [r4, #12]
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	b94b      	cbnz	r3, 8007920 <__swsetup_r+0x7c>
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007916:	d003      	beq.n	8007920 <__swsetup_r+0x7c>
 8007918:	4621      	mov	r1, r4
 800791a:	4628      	mov	r0, r5
 800791c:	f000 f8c4 	bl	8007aa8 <__smakebuf_r>
 8007920:	89a0      	ldrh	r0, [r4, #12]
 8007922:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007926:	f010 0301 	ands.w	r3, r0, #1
 800792a:	d00a      	beq.n	8007942 <__swsetup_r+0x9e>
 800792c:	2300      	movs	r3, #0
 800792e:	60a3      	str	r3, [r4, #8]
 8007930:	6963      	ldr	r3, [r4, #20]
 8007932:	425b      	negs	r3, r3
 8007934:	61a3      	str	r3, [r4, #24]
 8007936:	6923      	ldr	r3, [r4, #16]
 8007938:	b943      	cbnz	r3, 800794c <__swsetup_r+0xa8>
 800793a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800793e:	d1c4      	bne.n	80078ca <__swsetup_r+0x26>
 8007940:	bd38      	pop	{r3, r4, r5, pc}
 8007942:	0781      	lsls	r1, r0, #30
 8007944:	bf58      	it	pl
 8007946:	6963      	ldrpl	r3, [r4, #20]
 8007948:	60a3      	str	r3, [r4, #8]
 800794a:	e7f4      	b.n	8007936 <__swsetup_r+0x92>
 800794c:	2000      	movs	r0, #0
 800794e:	e7f7      	b.n	8007940 <__swsetup_r+0x9c>
 8007950:	20000064 	.word	0x20000064

08007954 <_sbrk_r>:
 8007954:	b538      	push	{r3, r4, r5, lr}
 8007956:	4d06      	ldr	r5, [pc, #24]	; (8007970 <_sbrk_r+0x1c>)
 8007958:	2300      	movs	r3, #0
 800795a:	4604      	mov	r4, r0
 800795c:	4608      	mov	r0, r1
 800795e:	602b      	str	r3, [r5, #0]
 8007960:	f7f9 fdd8 	bl	8001514 <_sbrk>
 8007964:	1c43      	adds	r3, r0, #1
 8007966:	d102      	bne.n	800796e <_sbrk_r+0x1a>
 8007968:	682b      	ldr	r3, [r5, #0]
 800796a:	b103      	cbz	r3, 800796e <_sbrk_r+0x1a>
 800796c:	6023      	str	r3, [r4, #0]
 800796e:	bd38      	pop	{r3, r4, r5, pc}
 8007970:	20000420 	.word	0x20000420

08007974 <memcpy>:
 8007974:	440a      	add	r2, r1
 8007976:	4291      	cmp	r1, r2
 8007978:	f100 33ff 	add.w	r3, r0, #4294967295
 800797c:	d100      	bne.n	8007980 <memcpy+0xc>
 800797e:	4770      	bx	lr
 8007980:	b510      	push	{r4, lr}
 8007982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800798a:	4291      	cmp	r1, r2
 800798c:	d1f9      	bne.n	8007982 <memcpy+0xe>
 800798e:	bd10      	pop	{r4, pc}

08007990 <__assert_func>:
 8007990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007992:	4614      	mov	r4, r2
 8007994:	461a      	mov	r2, r3
 8007996:	4b09      	ldr	r3, [pc, #36]	; (80079bc <__assert_func+0x2c>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4605      	mov	r5, r0
 800799c:	68d8      	ldr	r0, [r3, #12]
 800799e:	b14c      	cbz	r4, 80079b4 <__assert_func+0x24>
 80079a0:	4b07      	ldr	r3, [pc, #28]	; (80079c0 <__assert_func+0x30>)
 80079a2:	9100      	str	r1, [sp, #0]
 80079a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079a8:	4906      	ldr	r1, [pc, #24]	; (80079c4 <__assert_func+0x34>)
 80079aa:	462b      	mov	r3, r5
 80079ac:	f000 f844 	bl	8007a38 <fiprintf>
 80079b0:	f000 f8d8 	bl	8007b64 <abort>
 80079b4:	4b04      	ldr	r3, [pc, #16]	; (80079c8 <__assert_func+0x38>)
 80079b6:	461c      	mov	r4, r3
 80079b8:	e7f3      	b.n	80079a2 <__assert_func+0x12>
 80079ba:	bf00      	nop
 80079bc:	20000064 	.word	0x20000064
 80079c0:	08007ea7 	.word	0x08007ea7
 80079c4:	08007eb4 	.word	0x08007eb4
 80079c8:	08007ee2 	.word	0x08007ee2

080079cc <_calloc_r>:
 80079cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079ce:	fba1 2402 	umull	r2, r4, r1, r2
 80079d2:	b94c      	cbnz	r4, 80079e8 <_calloc_r+0x1c>
 80079d4:	4611      	mov	r1, r2
 80079d6:	9201      	str	r2, [sp, #4]
 80079d8:	f7ff f92c 	bl	8006c34 <_malloc_r>
 80079dc:	9a01      	ldr	r2, [sp, #4]
 80079de:	4605      	mov	r5, r0
 80079e0:	b930      	cbnz	r0, 80079f0 <_calloc_r+0x24>
 80079e2:	4628      	mov	r0, r5
 80079e4:	b003      	add	sp, #12
 80079e6:	bd30      	pop	{r4, r5, pc}
 80079e8:	220c      	movs	r2, #12
 80079ea:	6002      	str	r2, [r0, #0]
 80079ec:	2500      	movs	r5, #0
 80079ee:	e7f8      	b.n	80079e2 <_calloc_r+0x16>
 80079f0:	4621      	mov	r1, r4
 80079f2:	f7fe f9ae 	bl	8005d52 <memset>
 80079f6:	e7f4      	b.n	80079e2 <_calloc_r+0x16>

080079f8 <__ascii_mbtowc>:
 80079f8:	b082      	sub	sp, #8
 80079fa:	b901      	cbnz	r1, 80079fe <__ascii_mbtowc+0x6>
 80079fc:	a901      	add	r1, sp, #4
 80079fe:	b142      	cbz	r2, 8007a12 <__ascii_mbtowc+0x1a>
 8007a00:	b14b      	cbz	r3, 8007a16 <__ascii_mbtowc+0x1e>
 8007a02:	7813      	ldrb	r3, [r2, #0]
 8007a04:	600b      	str	r3, [r1, #0]
 8007a06:	7812      	ldrb	r2, [r2, #0]
 8007a08:	1e10      	subs	r0, r2, #0
 8007a0a:	bf18      	it	ne
 8007a0c:	2001      	movne	r0, #1
 8007a0e:	b002      	add	sp, #8
 8007a10:	4770      	bx	lr
 8007a12:	4610      	mov	r0, r2
 8007a14:	e7fb      	b.n	8007a0e <__ascii_mbtowc+0x16>
 8007a16:	f06f 0001 	mvn.w	r0, #1
 8007a1a:	e7f8      	b.n	8007a0e <__ascii_mbtowc+0x16>

08007a1c <__ascii_wctomb>:
 8007a1c:	b149      	cbz	r1, 8007a32 <__ascii_wctomb+0x16>
 8007a1e:	2aff      	cmp	r2, #255	; 0xff
 8007a20:	bf85      	ittet	hi
 8007a22:	238a      	movhi	r3, #138	; 0x8a
 8007a24:	6003      	strhi	r3, [r0, #0]
 8007a26:	700a      	strbls	r2, [r1, #0]
 8007a28:	f04f 30ff 	movhi.w	r0, #4294967295
 8007a2c:	bf98      	it	ls
 8007a2e:	2001      	movls	r0, #1
 8007a30:	4770      	bx	lr
 8007a32:	4608      	mov	r0, r1
 8007a34:	4770      	bx	lr
	...

08007a38 <fiprintf>:
 8007a38:	b40e      	push	{r1, r2, r3}
 8007a3a:	b503      	push	{r0, r1, lr}
 8007a3c:	4601      	mov	r1, r0
 8007a3e:	ab03      	add	r3, sp, #12
 8007a40:	4805      	ldr	r0, [pc, #20]	; (8007a58 <fiprintf+0x20>)
 8007a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a46:	6800      	ldr	r0, [r0, #0]
 8007a48:	9301      	str	r3, [sp, #4]
 8007a4a:	f7ff fd25 	bl	8007498 <_vfiprintf_r>
 8007a4e:	b002      	add	sp, #8
 8007a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a54:	b003      	add	sp, #12
 8007a56:	4770      	bx	lr
 8007a58:	20000064 	.word	0x20000064

08007a5c <__swhatbuf_r>:
 8007a5c:	b570      	push	{r4, r5, r6, lr}
 8007a5e:	460c      	mov	r4, r1
 8007a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a64:	2900      	cmp	r1, #0
 8007a66:	b096      	sub	sp, #88	; 0x58
 8007a68:	4615      	mov	r5, r2
 8007a6a:	461e      	mov	r6, r3
 8007a6c:	da0d      	bge.n	8007a8a <__swhatbuf_r+0x2e>
 8007a6e:	89a3      	ldrh	r3, [r4, #12]
 8007a70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a74:	f04f 0100 	mov.w	r1, #0
 8007a78:	bf0c      	ite	eq
 8007a7a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007a7e:	2340      	movne	r3, #64	; 0x40
 8007a80:	2000      	movs	r0, #0
 8007a82:	6031      	str	r1, [r6, #0]
 8007a84:	602b      	str	r3, [r5, #0]
 8007a86:	b016      	add	sp, #88	; 0x58
 8007a88:	bd70      	pop	{r4, r5, r6, pc}
 8007a8a:	466a      	mov	r2, sp
 8007a8c:	f000 f848 	bl	8007b20 <_fstat_r>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	dbec      	blt.n	8007a6e <__swhatbuf_r+0x12>
 8007a94:	9901      	ldr	r1, [sp, #4]
 8007a96:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007a9a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007a9e:	4259      	negs	r1, r3
 8007aa0:	4159      	adcs	r1, r3
 8007aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aa6:	e7eb      	b.n	8007a80 <__swhatbuf_r+0x24>

08007aa8 <__smakebuf_r>:
 8007aa8:	898b      	ldrh	r3, [r1, #12]
 8007aaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007aac:	079d      	lsls	r5, r3, #30
 8007aae:	4606      	mov	r6, r0
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	d507      	bpl.n	8007ac4 <__smakebuf_r+0x1c>
 8007ab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	6123      	str	r3, [r4, #16]
 8007abc:	2301      	movs	r3, #1
 8007abe:	6163      	str	r3, [r4, #20]
 8007ac0:	b002      	add	sp, #8
 8007ac2:	bd70      	pop	{r4, r5, r6, pc}
 8007ac4:	ab01      	add	r3, sp, #4
 8007ac6:	466a      	mov	r2, sp
 8007ac8:	f7ff ffc8 	bl	8007a5c <__swhatbuf_r>
 8007acc:	9900      	ldr	r1, [sp, #0]
 8007ace:	4605      	mov	r5, r0
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	f7ff f8af 	bl	8006c34 <_malloc_r>
 8007ad6:	b948      	cbnz	r0, 8007aec <__smakebuf_r+0x44>
 8007ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007adc:	059a      	lsls	r2, r3, #22
 8007ade:	d4ef      	bmi.n	8007ac0 <__smakebuf_r+0x18>
 8007ae0:	f023 0303 	bic.w	r3, r3, #3
 8007ae4:	f043 0302 	orr.w	r3, r3, #2
 8007ae8:	81a3      	strh	r3, [r4, #12]
 8007aea:	e7e3      	b.n	8007ab4 <__smakebuf_r+0xc>
 8007aec:	89a3      	ldrh	r3, [r4, #12]
 8007aee:	6020      	str	r0, [r4, #0]
 8007af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af4:	81a3      	strh	r3, [r4, #12]
 8007af6:	9b00      	ldr	r3, [sp, #0]
 8007af8:	6163      	str	r3, [r4, #20]
 8007afa:	9b01      	ldr	r3, [sp, #4]
 8007afc:	6120      	str	r0, [r4, #16]
 8007afe:	b15b      	cbz	r3, 8007b18 <__smakebuf_r+0x70>
 8007b00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b04:	4630      	mov	r0, r6
 8007b06:	f000 f81d 	bl	8007b44 <_isatty_r>
 8007b0a:	b128      	cbz	r0, 8007b18 <__smakebuf_r+0x70>
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	f023 0303 	bic.w	r3, r3, #3
 8007b12:	f043 0301 	orr.w	r3, r3, #1
 8007b16:	81a3      	strh	r3, [r4, #12]
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	431d      	orrs	r5, r3
 8007b1c:	81a5      	strh	r5, [r4, #12]
 8007b1e:	e7cf      	b.n	8007ac0 <__smakebuf_r+0x18>

08007b20 <_fstat_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4d07      	ldr	r5, [pc, #28]	; (8007b40 <_fstat_r+0x20>)
 8007b24:	2300      	movs	r3, #0
 8007b26:	4604      	mov	r4, r0
 8007b28:	4608      	mov	r0, r1
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	602b      	str	r3, [r5, #0]
 8007b2e:	f7f9 fcc8 	bl	80014c2 <_fstat>
 8007b32:	1c43      	adds	r3, r0, #1
 8007b34:	d102      	bne.n	8007b3c <_fstat_r+0x1c>
 8007b36:	682b      	ldr	r3, [r5, #0]
 8007b38:	b103      	cbz	r3, 8007b3c <_fstat_r+0x1c>
 8007b3a:	6023      	str	r3, [r4, #0]
 8007b3c:	bd38      	pop	{r3, r4, r5, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000420 	.word	0x20000420

08007b44 <_isatty_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	4d06      	ldr	r5, [pc, #24]	; (8007b60 <_isatty_r+0x1c>)
 8007b48:	2300      	movs	r3, #0
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	602b      	str	r3, [r5, #0]
 8007b50:	f7f9 fcc7 	bl	80014e2 <_isatty>
 8007b54:	1c43      	adds	r3, r0, #1
 8007b56:	d102      	bne.n	8007b5e <_isatty_r+0x1a>
 8007b58:	682b      	ldr	r3, [r5, #0]
 8007b5a:	b103      	cbz	r3, 8007b5e <_isatty_r+0x1a>
 8007b5c:	6023      	str	r3, [r4, #0]
 8007b5e:	bd38      	pop	{r3, r4, r5, pc}
 8007b60:	20000420 	.word	0x20000420

08007b64 <abort>:
 8007b64:	b508      	push	{r3, lr}
 8007b66:	2006      	movs	r0, #6
 8007b68:	f000 f82c 	bl	8007bc4 <raise>
 8007b6c:	2001      	movs	r0, #1
 8007b6e:	f7f9 fc59 	bl	8001424 <_exit>

08007b72 <_raise_r>:
 8007b72:	291f      	cmp	r1, #31
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	4604      	mov	r4, r0
 8007b78:	460d      	mov	r5, r1
 8007b7a:	d904      	bls.n	8007b86 <_raise_r+0x14>
 8007b7c:	2316      	movs	r3, #22
 8007b7e:	6003      	str	r3, [r0, #0]
 8007b80:	f04f 30ff 	mov.w	r0, #4294967295
 8007b84:	bd38      	pop	{r3, r4, r5, pc}
 8007b86:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007b88:	b112      	cbz	r2, 8007b90 <_raise_r+0x1e>
 8007b8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b8e:	b94b      	cbnz	r3, 8007ba4 <_raise_r+0x32>
 8007b90:	4620      	mov	r0, r4
 8007b92:	f000 f831 	bl	8007bf8 <_getpid_r>
 8007b96:	462a      	mov	r2, r5
 8007b98:	4601      	mov	r1, r0
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ba0:	f000 b818 	b.w	8007bd4 <_kill_r>
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d00a      	beq.n	8007bbe <_raise_r+0x4c>
 8007ba8:	1c59      	adds	r1, r3, #1
 8007baa:	d103      	bne.n	8007bb4 <_raise_r+0x42>
 8007bac:	2316      	movs	r3, #22
 8007bae:	6003      	str	r3, [r0, #0]
 8007bb0:	2001      	movs	r0, #1
 8007bb2:	e7e7      	b.n	8007b84 <_raise_r+0x12>
 8007bb4:	2400      	movs	r4, #0
 8007bb6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007bba:	4628      	mov	r0, r5
 8007bbc:	4798      	blx	r3
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	e7e0      	b.n	8007b84 <_raise_r+0x12>
	...

08007bc4 <raise>:
 8007bc4:	4b02      	ldr	r3, [pc, #8]	; (8007bd0 <raise+0xc>)
 8007bc6:	4601      	mov	r1, r0
 8007bc8:	6818      	ldr	r0, [r3, #0]
 8007bca:	f7ff bfd2 	b.w	8007b72 <_raise_r>
 8007bce:	bf00      	nop
 8007bd0:	20000064 	.word	0x20000064

08007bd4 <_kill_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4d07      	ldr	r5, [pc, #28]	; (8007bf4 <_kill_r+0x20>)
 8007bd8:	2300      	movs	r3, #0
 8007bda:	4604      	mov	r4, r0
 8007bdc:	4608      	mov	r0, r1
 8007bde:	4611      	mov	r1, r2
 8007be0:	602b      	str	r3, [r5, #0]
 8007be2:	f7f9 fc0f 	bl	8001404 <_kill>
 8007be6:	1c43      	adds	r3, r0, #1
 8007be8:	d102      	bne.n	8007bf0 <_kill_r+0x1c>
 8007bea:	682b      	ldr	r3, [r5, #0]
 8007bec:	b103      	cbz	r3, 8007bf0 <_kill_r+0x1c>
 8007bee:	6023      	str	r3, [r4, #0]
 8007bf0:	bd38      	pop	{r3, r4, r5, pc}
 8007bf2:	bf00      	nop
 8007bf4:	20000420 	.word	0x20000420

08007bf8 <_getpid_r>:
 8007bf8:	f7f9 bbfc 	b.w	80013f4 <_getpid>

08007bfc <_init>:
 8007bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfe:	bf00      	nop
 8007c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c02:	bc08      	pop	{r3}
 8007c04:	469e      	mov	lr, r3
 8007c06:	4770      	bx	lr

08007c08 <_fini>:
 8007c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0a:	bf00      	nop
 8007c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c0e:	bc08      	pop	{r3}
 8007c10:	469e      	mov	lr, r3
 8007c12:	4770      	bx	lr
