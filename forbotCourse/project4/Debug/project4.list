
project4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08006840  08006840  00016840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c1c  08006c1c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006c1c  08006c1c  00016c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c24  08006c24  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c24  08006c24  00016c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c28  08006c28  00016c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  200001d4  08006e00  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08006e00  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa48  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019ed  00000000  00000000  0002ac8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  0002c680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000072e  00000000  00000000  0002cff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002667f  00000000  00000000  0002d71e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b68e  00000000  00000000  00053d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e93ab  00000000  00000000  0005f42b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003600  00000000  00000000  001487d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0014bdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006824 	.word	0x08006824

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006824 	.word	0x08006824

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000ecc:	1d39      	adds	r1, r7, #4
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <__io_putchar+0x20>)
 8000ed6:	f002 f9b1 	bl	800323c <HAL_UART_Transmit>
    return 1;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200001f0 	.word	0x200001f0

08000ee8 <line_append>:


void line_append(uint8_t value)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	if (value == '\r' || value == '\n') {
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b0d      	cmp	r3, #13
 8000ef6:	d002      	beq.n	8000efe <line_append+0x16>
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	2b0a      	cmp	r3, #10
 8000efc:	d12c      	bne.n	8000f58 <line_append+0x70>
		// odebraliśmy znak końca linii
		if (line_length > 0) {
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <line_append+0x98>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d038      	beq.n	8000f78 <line_append+0x90>
			// dodajemy 0 na końcu linii
			line_buffer[line_length] = '\0';
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <line_append+0x98>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	; (8000f84 <line_append+0x9c>)
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	54d1      	strb	r1, [r2, r3]
			// przetwarzamy dane
			if (strcmp(line_buffer, "on") == 0) {
 8000f10:	491d      	ldr	r1, [pc, #116]	; (8000f88 <line_append+0xa0>)
 8000f12:	481c      	ldr	r0, [pc, #112]	; (8000f84 <line_append+0x9c>)
 8000f14:	f7ff f95c 	bl	80001d0 <strcmp>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d106      	bne.n	8000f2c <line_append+0x44>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2120      	movs	r1, #32
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f26:	f000 fe03 	bl	8001b30 <HAL_GPIO_WritePin>
 8000f2a:	e011      	b.n	8000f50 <line_append+0x68>
			} else if (strcmp(line_buffer, "off") == 0) {
 8000f2c:	4917      	ldr	r1, [pc, #92]	; (8000f8c <line_append+0xa4>)
 8000f2e:	4815      	ldr	r0, [pc, #84]	; (8000f84 <line_append+0x9c>)
 8000f30:	f7ff f94e 	bl	80001d0 <strcmp>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d106      	bne.n	8000f48 <line_append+0x60>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2120      	movs	r1, #32
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f42:	f000 fdf5 	bl	8001b30 <HAL_GPIO_WritePin>
 8000f46:	e003      	b.n	8000f50 <line_append+0x68>
			} else {
				printf("Nieznane polecenie: %s\n", line_buffer);
 8000f48:	490e      	ldr	r1, [pc, #56]	; (8000f84 <line_append+0x9c>)
 8000f4a:	4811      	ldr	r0, [pc, #68]	; (8000f90 <line_append+0xa8>)
 8000f4c:	f003 fcc0 	bl	80048d0 <iprintf>
			}
			// zaczynamy zbieranie danych od nowa
			line_length = 0;
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <line_append+0x98>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
		if (line_length > 0) {
 8000f56:	e00f      	b.n	8000f78 <line_append+0x90>
		}
	}
	else {
		if (line_length >= LINE_MAX_LENGTH) {
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <line_append+0x98>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b4f      	cmp	r3, #79	; 0x4f
 8000f5e:	d902      	bls.n	8000f66 <line_append+0x7e>
			// za dużo danych, usuwamy wszystko co odebraliśmy dotychczas
			line_length = 0;
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <line_append+0x98>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
		}
		// dopisujemy wartość do bufora
		line_buffer[line_length++] = value;
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <line_append+0x98>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	4904      	ldr	r1, [pc, #16]	; (8000f80 <line_append+0x98>)
 8000f6e:	600a      	str	r2, [r1, #0]
 8000f70:	4904      	ldr	r1, [pc, #16]	; (8000f84 <line_append+0x9c>)
 8000f72:	79fa      	ldrb	r2, [r7, #7]
 8000f74:	54ca      	strb	r2, [r1, r3]
	}
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200002cc 	.word	0x200002cc
 8000f84:	20000278 	.word	0x20000278
 8000f88:	08006840 	.word	0x08006840
 8000f8c:	08006844 	.word	0x08006844
 8000f90:	08006848 	.word	0x08006848

08000f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9a:	f000 fabd 	bl	8001518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9e:	f000 f81d 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa2:	f000 f8a1 	bl	80010e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fa6:	f000 f86b 	bl	8001080 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  uint8_t value;
	 if (HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK) {
 8000faa:	1df9      	adds	r1, r7, #7
 8000fac:	2300      	movs	r3, #0
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <main+0x3c>)
 8000fb2:	f002 f9cd 	bl	8003350 <HAL_UART_Receive>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1f6      	bne.n	8000faa <main+0x16>
	 	line_append(value);
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff92 	bl	8000ee8 <line_append>
	 	printf("Nieznane polecenie: %s\n", line_buffer);
 8000fc4:	4903      	ldr	r1, [pc, #12]	; (8000fd4 <main+0x40>)
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <main+0x44>)
 8000fc8:	f003 fc82 	bl	80048d0 <iprintf>
  {
 8000fcc:	e7ed      	b.n	8000faa <main+0x16>
 8000fce:	bf00      	nop
 8000fd0:	200001f0 	.word	0x200001f0
 8000fd4:	20000278 	.word	0x20000278
 8000fd8:	08006848 	.word	0x08006848

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b096      	sub	sp, #88	; 0x58
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	2244      	movs	r2, #68	; 0x44
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f003 fcc5 	bl	800497a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ffe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001002:	f000 fdbb 	bl	8001b7c <HAL_PWREx_ControlVoltageScaling>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800100c:	f000 f8d2 	bl	80011b4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001010:	2302      	movs	r3, #2
 8001012:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001018:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800101a:	2310      	movs	r3, #16
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101e:	2302      	movs	r3, #2
 8001020:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001022:	2302      	movs	r3, #2
 8001024:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001026:	2301      	movs	r3, #1
 8001028:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800102a:	230a      	movs	r3, #10
 800102c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800102e:	2307      	movs	r3, #7
 8001030:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001032:	2302      	movs	r3, #2
 8001034:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001036:	2302      	movs	r3, #2
 8001038:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fdf2 	bl	8001c28 <HAL_RCC_OscConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800104a:	f000 f8b3 	bl	80011b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104e:	230f      	movs	r3, #15
 8001050:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001052:	2303      	movs	r3, #3
 8001054:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001062:	463b      	mov	r3, r7
 8001064:	2104      	movs	r1, #4
 8001066:	4618      	mov	r0, r3
 8001068:	f001 f9ba 	bl	80023e0 <HAL_RCC_ClockConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001072:	f000 f89f 	bl	80011b4 <Error_Handler>
  }
}
 8001076:	bf00      	nop
 8001078:	3758      	adds	r7, #88	; 0x58
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_USART2_UART_Init+0x60>)
 8001086:	4a17      	ldr	r2, [pc, #92]	; (80010e4 <MX_USART2_UART_Init+0x64>)
 8001088:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_USART2_UART_Init+0x60>)
 800108c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001090:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_USART2_UART_Init+0x60>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_USART2_UART_Init+0x60>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <MX_USART2_UART_Init+0x60>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_USART2_UART_Init+0x60>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <MX_USART2_UART_Init+0x60>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_USART2_UART_Init+0x60>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <MX_USART2_UART_Init+0x60>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <MX_USART2_UART_Init+0x60>)
 80010be:	2210      	movs	r2, #16
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <MX_USART2_UART_Init+0x60>)
 80010c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010c8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_USART2_UART_Init+0x60>)
 80010cc:	f002 f868 	bl	80031a0 <HAL_UART_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80010d6:	f000 f86d 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200001f0 	.word	0x200001f0
 80010e4:	40004400 	.word	0x40004400

080010e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <MX_GPIO_Init+0xc4>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	4a2a      	ldr	r2, [pc, #168]	; (80011ac <MX_GPIO_Init+0xc4>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <MX_GPIO_Init+0xc4>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001116:	4b25      	ldr	r3, [pc, #148]	; (80011ac <MX_GPIO_Init+0xc4>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a24      	ldr	r2, [pc, #144]	; (80011ac <MX_GPIO_Init+0xc4>)
 800111c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b22      	ldr	r3, [pc, #136]	; (80011ac <MX_GPIO_Init+0xc4>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <MX_GPIO_Init+0xc4>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <MX_GPIO_Init+0xc4>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <MX_GPIO_Init+0xc4>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <MX_GPIO_Init+0xc4>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	4a18      	ldr	r2, [pc, #96]	; (80011ac <MX_GPIO_Init+0xc4>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <MX_GPIO_Init+0xc4>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2120      	movs	r1, #32
 8001162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001166:	f000 fce3 	bl	8001b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800116a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001170:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <MX_GPIO_Init+0xc8>)
 8001182:	f000 fb2b 	bl	80017dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001186:	2320      	movs	r3, #32
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a0:	f000 fb1c 	bl	80017dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	; 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000
 80011b0:	48000800 	.word	0x48000800

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011bc:	e7fe      	b.n	80011bc <Error_Handler+0x8>
	...

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <HAL_MspInit+0x44>)
 80011c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ca:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <HAL_MspInit+0x44>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6613      	str	r3, [r2, #96]	; 0x60
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <HAL_MspInit+0x44>)
 80011d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_MspInit+0x44>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	4a08      	ldr	r2, [pc, #32]	; (8001204 <HAL_MspInit+0x44>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_MspInit+0x44>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000

08001208 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b0ac      	sub	sp, #176	; 0xb0
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2288      	movs	r2, #136	; 0x88
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f003 fba6 	bl	800497a <memset>
  if(huart->Instance==USART2)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a21      	ldr	r2, [pc, #132]	; (80012b8 <HAL_UART_MspInit+0xb0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d13b      	bne.n	80012b0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001238:	2302      	movs	r3, #2
 800123a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800123c:	2300      	movs	r3, #0
 800123e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4618      	mov	r0, r3
 8001246:	f001 faef 	bl	8002828 <HAL_RCCEx_PeriphCLKConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001250:	f7ff ffb0 	bl	80011b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_UART_MspInit+0xb4>)
 8001256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001258:	4a18      	ldr	r2, [pc, #96]	; (80012bc <HAL_UART_MspInit+0xb4>)
 800125a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125e:	6593      	str	r3, [r2, #88]	; 0x58
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_UART_MspInit+0xb4>)
 8001262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_UART_MspInit+0xb4>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001270:	4a12      	ldr	r2, [pc, #72]	; (80012bc <HAL_UART_MspInit+0xb4>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001278:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_UART_MspInit+0xb4>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001284:	230c      	movs	r3, #12
 8001286:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800129c:	2307      	movs	r3, #7
 800129e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012a6:	4619      	mov	r1, r3
 80012a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ac:	f000 fa96 	bl	80017dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012b0:	bf00      	nop
 80012b2:	37b0      	adds	r7, #176	; 0xb0
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40004400 	.word	0x40004400
 80012bc:	40021000 	.word	0x40021000

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c4:	e7fe      	b.n	80012c4 <NMI_Handler+0x4>

080012c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <MemManage_Handler+0x4>

080012d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <BusFault_Handler+0x4>

080012d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <UsageFault_Handler+0x4>

080012de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130c:	f000 f960 	bl	80015d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}

08001314 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return 1;
 8001318:	2301      	movs	r3, #1
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <_kill>:

int _kill(int pid, int sig)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800132e:	f003 fb77 	bl	8004a20 <__errno>
 8001332:	4603      	mov	r3, r0
 8001334:	2216      	movs	r2, #22
 8001336:	601a      	str	r2, [r3, #0]
  return -1;
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_exit>:

void _exit (int status)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ffe7 	bl	8001324 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001356:	e7fe      	b.n	8001356 <_exit+0x12>

08001358 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	e00a      	b.n	8001380 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800136a:	f3af 8000 	nop.w
 800136e:	4601      	mov	r1, r0
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	60ba      	str	r2, [r7, #8]
 8001376:	b2ca      	uxtb	r2, r1
 8001378:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	dbf0      	blt.n	800136a <_read+0x12>
  }

  return len;
 8001388:	687b      	ldr	r3, [r7, #4]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	e009      	b.n	80013b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	60ba      	str	r2, [r7, #8]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fd89 	bl	8000ec4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	dbf1      	blt.n	80013a4 <_write+0x12>
  }
  return len;
 80013c0:	687b      	ldr	r3, [r7, #4]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_close>:

int _close(int file)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f2:	605a      	str	r2, [r3, #4]
  return 0;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <_isatty>:

int _isatty(int file)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800143c:	4a14      	ldr	r2, [pc, #80]	; (8001490 <_sbrk+0x5c>)
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <_sbrk+0x60>)
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <_sbrk+0x64>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <_sbrk+0x68>)
 8001454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	429a      	cmp	r2, r3
 8001462:	d207      	bcs.n	8001474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001464:	f003 fadc 	bl	8004a20 <__errno>
 8001468:	4603      	mov	r3, r0
 800146a:	220c      	movs	r2, #12
 800146c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	e009      	b.n	8001488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <_sbrk+0x64>)
 8001484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001486:	68fb      	ldr	r3, [r7, #12]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20018000 	.word	0x20018000
 8001494:	00000400 	.word	0x00000400
 8001498:	200002d0 	.word	0x200002d0
 800149c:	20000428 	.word	0x20000428

080014a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <SystemInit+0x20>)
 80014a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <SystemInit+0x20>)
 80014ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014c8:	f7ff ffea 	bl	80014a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <LoopForever+0x6>)
  ldr r1, =_edata
 80014ce:	490d      	ldr	r1, [pc, #52]	; (8001504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014d0:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <LoopForever+0xe>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d4:	e002      	b.n	80014dc <LoopCopyDataInit>

080014d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014da:	3304      	adds	r3, #4

080014dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e0:	d3f9      	bcc.n	80014d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <LoopForever+0x12>)
  ldr r4, =_ebss
 80014e4:	4c0a      	ldr	r4, [pc, #40]	; (8001510 <LoopForever+0x16>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e8:	e001      	b.n	80014ee <LoopFillZerobss>

080014ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ec:	3204      	adds	r2, #4

080014ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f0:	d3fb      	bcc.n	80014ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014f2:	f003 fa9b 	bl	8004a2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014f6:	f7ff fd4d 	bl	8000f94 <main>

080014fa <LoopForever>:

LoopForever:
    b LoopForever
 80014fa:	e7fe      	b.n	80014fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001504:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001508:	08006c2c 	.word	0x08006c2c
  ldr r2, =_sbss
 800150c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001510:	20000424 	.word	0x20000424

08001514 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC1_2_IRQHandler>
	...

08001518 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_Init+0x3c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_Init+0x3c>)
 8001528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152e:	2003      	movs	r0, #3
 8001530:	f000 f920 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001534:	2000      	movs	r0, #0
 8001536:	f000 f80f 	bl	8001558 <HAL_InitTick>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	71fb      	strb	r3, [r7, #7]
 8001544:	e001      	b.n	800154a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001546:	f7ff fe3b 	bl	80011c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800154a:	79fb      	ldrb	r3, [r7, #7]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40022000 	.word	0x40022000

08001558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_InitTick+0x6c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d023      	beq.n	80015b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <HAL_InitTick+0x70>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <HAL_InitTick+0x6c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	fbb3 f3f1 	udiv	r3, r3, r1
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f91d 	bl	80017c2 <HAL_SYSTICK_Config>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10f      	bne.n	80015ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b0f      	cmp	r3, #15
 8001592:	d809      	bhi.n	80015a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001594:	2200      	movs	r2, #0
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f000 f8f5 	bl	800178a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015a0:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <HAL_InitTick+0x74>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e007      	b.n	80015b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e004      	b.n	80015b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	e001      	b.n	80015b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000008 	.word	0x20000008
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000004 	.word	0x20000004

080015d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_IncTick+0x20>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_IncTick+0x24>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <HAL_IncTick+0x24>)
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000008 	.word	0x20000008
 80015f4:	200002d4 	.word	0x200002d4

080015f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return uwTick;
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <HAL_GetTick+0x14>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	200002d4 	.word	0x200002d4

08001610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800162c:	4013      	ands	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800163c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001642:	4a04      	ldr	r2, [pc, #16]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	60d3      	str	r3, [r2, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <__NVIC_GetPriorityGrouping+0x18>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0307 	and.w	r3, r3, #7
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	6039      	str	r1, [r7, #0]
 800167e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	2b00      	cmp	r3, #0
 8001686:	db0a      	blt.n	800169e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	b2da      	uxtb	r2, r3
 800168c:	490c      	ldr	r1, [pc, #48]	; (80016c0 <__NVIC_SetPriority+0x4c>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	0112      	lsls	r2, r2, #4
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	440b      	add	r3, r1
 8001698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800169c:	e00a      	b.n	80016b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4908      	ldr	r1, [pc, #32]	; (80016c4 <__NVIC_SetPriority+0x50>)
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	3b04      	subs	r3, #4
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	440b      	add	r3, r1
 80016b2:	761a      	strb	r2, [r3, #24]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000e100 	.word	0xe000e100
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f1c3 0307 	rsb	r3, r3, #7
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	bf28      	it	cs
 80016e6:	2304      	movcs	r3, #4
 80016e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3304      	adds	r3, #4
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	d902      	bls.n	80016f8 <NVIC_EncodePriority+0x30>
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3b03      	subs	r3, #3
 80016f6:	e000      	b.n	80016fa <NVIC_EncodePriority+0x32>
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	401a      	ands	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001710:	f04f 31ff 	mov.w	r1, #4294967295
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	fa01 f303 	lsl.w	r3, r1, r3
 800171a:	43d9      	mvns	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	4313      	orrs	r3, r2
         );
}
 8001722:	4618      	mov	r0, r3
 8001724:	3724      	adds	r7, #36	; 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001740:	d301      	bcc.n	8001746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001742:	2301      	movs	r3, #1
 8001744:	e00f      	b.n	8001766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <SysTick_Config+0x40>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174e:	210f      	movs	r1, #15
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f7ff ff8e 	bl	8001674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <SysTick_Config+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SysTick_Config+0x40>)
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff47 	bl	8001610 <__NVIC_SetPriorityGrouping>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800179c:	f7ff ff5c 	bl	8001658 <__NVIC_GetPriorityGrouping>
 80017a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7ff ff8e 	bl	80016c8 <NVIC_EncodePriority>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff5d 	bl	8001674 <__NVIC_SetPriority>
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffb0 	bl	8001730 <SysTick_Config>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017dc:	b480      	push	{r7}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ea:	e17f      	b.n	8001aec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2101      	movs	r1, #1
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	fa01 f303 	lsl.w	r3, r1, r3
 80017f8:	4013      	ands	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 8171 	beq.w	8001ae6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b01      	cmp	r3, #1
 800180e:	d005      	beq.n	800181c <HAL_GPIO_Init+0x40>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d130      	bne.n	800187e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001852:	2201      	movs	r2, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f003 0201 	and.w	r2, r3, #1
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b03      	cmp	r3, #3
 8001888:	d118      	bne.n	80018bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001890:	2201      	movs	r2, #1
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	08db      	lsrs	r3, r3, #3
 80018a6:	f003 0201 	and.w	r2, r3, #1
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d017      	beq.n	80018f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d123      	bne.n	800194c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	08da      	lsrs	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3208      	adds	r2, #8
 800190c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	08da      	lsrs	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3208      	adds	r2, #8
 8001946:	6939      	ldr	r1, [r7, #16]
 8001948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80ac 	beq.w	8001ae6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	4b5f      	ldr	r3, [pc, #380]	; (8001b0c <HAL_GPIO_Init+0x330>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001992:	4a5e      	ldr	r2, [pc, #376]	; (8001b0c <HAL_GPIO_Init+0x330>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6613      	str	r3, [r2, #96]	; 0x60
 800199a:	4b5c      	ldr	r3, [pc, #368]	; (8001b0c <HAL_GPIO_Init+0x330>)
 800199c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019a6:	4a5a      	ldr	r2, [pc, #360]	; (8001b10 <HAL_GPIO_Init+0x334>)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	220f      	movs	r2, #15
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019d0:	d025      	beq.n	8001a1e <HAL_GPIO_Init+0x242>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4f      	ldr	r2, [pc, #316]	; (8001b14 <HAL_GPIO_Init+0x338>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d01f      	beq.n	8001a1a <HAL_GPIO_Init+0x23e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4e      	ldr	r2, [pc, #312]	; (8001b18 <HAL_GPIO_Init+0x33c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d019      	beq.n	8001a16 <HAL_GPIO_Init+0x23a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4d      	ldr	r2, [pc, #308]	; (8001b1c <HAL_GPIO_Init+0x340>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d013      	beq.n	8001a12 <HAL_GPIO_Init+0x236>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4c      	ldr	r2, [pc, #304]	; (8001b20 <HAL_GPIO_Init+0x344>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d00d      	beq.n	8001a0e <HAL_GPIO_Init+0x232>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4b      	ldr	r2, [pc, #300]	; (8001b24 <HAL_GPIO_Init+0x348>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d007      	beq.n	8001a0a <HAL_GPIO_Init+0x22e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4a      	ldr	r2, [pc, #296]	; (8001b28 <HAL_GPIO_Init+0x34c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d101      	bne.n	8001a06 <HAL_GPIO_Init+0x22a>
 8001a02:	2306      	movs	r3, #6
 8001a04:	e00c      	b.n	8001a20 <HAL_GPIO_Init+0x244>
 8001a06:	2307      	movs	r3, #7
 8001a08:	e00a      	b.n	8001a20 <HAL_GPIO_Init+0x244>
 8001a0a:	2305      	movs	r3, #5
 8001a0c:	e008      	b.n	8001a20 <HAL_GPIO_Init+0x244>
 8001a0e:	2304      	movs	r3, #4
 8001a10:	e006      	b.n	8001a20 <HAL_GPIO_Init+0x244>
 8001a12:	2303      	movs	r3, #3
 8001a14:	e004      	b.n	8001a20 <HAL_GPIO_Init+0x244>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e002      	b.n	8001a20 <HAL_GPIO_Init+0x244>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <HAL_GPIO_Init+0x244>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	f002 0203 	and.w	r2, r2, #3
 8001a26:	0092      	lsls	r2, r2, #2
 8001a28:	4093      	lsls	r3, r2
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a30:	4937      	ldr	r1, [pc, #220]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	089b      	lsrs	r3, r3, #2
 8001a36:	3302      	adds	r3, #2
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a3e:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <HAL_GPIO_Init+0x350>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a62:	4a32      	ldr	r2, [pc, #200]	; (8001b2c <HAL_GPIO_Init+0x350>)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a68:	4b30      	ldr	r3, [pc, #192]	; (8001b2c <HAL_GPIO_Init+0x350>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a8c:	4a27      	ldr	r2, [pc, #156]	; (8001b2c <HAL_GPIO_Init+0x350>)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a92:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <HAL_GPIO_Init+0x350>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ab6:	4a1d      	ldr	r2, [pc, #116]	; (8001b2c <HAL_GPIO_Init+0x350>)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_GPIO_Init+0x350>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ae0:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <HAL_GPIO_Init+0x350>)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa22 f303 	lsr.w	r3, r2, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f47f ae78 	bne.w	80017ec <HAL_GPIO_Init+0x10>
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	371c      	adds	r7, #28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010000 	.word	0x40010000
 8001b14:	48000400 	.word	0x48000400
 8001b18:	48000800 	.word	0x48000800
 8001b1c:	48000c00 	.word	0x48000c00
 8001b20:	48001000 	.word	0x48001000
 8001b24:	48001400 	.word	0x48001400
 8001b28:	48001800 	.word	0x48001800
 8001b2c:	40010400 	.word	0x40010400

08001b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b40:	787b      	ldrb	r3, [r7, #1]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b46:	887a      	ldrh	r2, [r7, #2]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b4c:	e002      	b.n	8001b54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b4e:	887a      	ldrh	r2, [r7, #2]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40007000 	.word	0x40007000

08001b7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b8a:	d130      	bne.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b8c:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b98:	d038      	beq.n	8001c0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b9a:	4b20      	ldr	r3, [pc, #128]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ba2:	4a1e      	ldr	r2, [pc, #120]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001baa:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2232      	movs	r2, #50	; 0x32
 8001bb0:	fb02 f303 	mul.w	r3, r2, r3
 8001bb4:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	0c9b      	lsrs	r3, r3, #18
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bc0:	e002      	b.n	8001bc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd4:	d102      	bne.n	8001bdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f2      	bne.n	8001bc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be8:	d110      	bne.n	8001c0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e00f      	b.n	8001c0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bfa:	d007      	beq.n	8001c0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bfc:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c04:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40007000 	.word	0x40007000
 8001c20:	20000000 	.word	0x20000000
 8001c24:	431bde83 	.word	0x431bde83

08001c28 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e3ca      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c3a:	4b97      	ldr	r3, [pc, #604]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c44:	4b94      	ldr	r3, [pc, #592]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 80e4 	beq.w	8001e24 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <HAL_RCC_OscConfig+0x4a>
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2b0c      	cmp	r3, #12
 8001c66:	f040 808b 	bne.w	8001d80 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	f040 8087 	bne.w	8001d80 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c72:	4b89      	ldr	r3, [pc, #548]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d005      	beq.n	8001c8a <HAL_RCC_OscConfig+0x62>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e3a2      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1a      	ldr	r2, [r3, #32]
 8001c8e:	4b82      	ldr	r3, [pc, #520]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d004      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x7c>
 8001c9a:	4b7f      	ldr	r3, [pc, #508]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca2:	e005      	b.n	8001cb0 <HAL_RCC_OscConfig+0x88>
 8001ca4:	4b7c      	ldr	r3, [pc, #496]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001caa:	091b      	lsrs	r3, r3, #4
 8001cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d223      	bcs.n	8001cfc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 fd55 	bl	8002768 <RCC_SetFlashLatencyFromMSIRange>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e383      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc8:	4b73      	ldr	r3, [pc, #460]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a72      	ldr	r2, [pc, #456]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001cce:	f043 0308 	orr.w	r3, r3, #8
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b70      	ldr	r3, [pc, #448]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	496d      	ldr	r1, [pc, #436]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ce6:	4b6c      	ldr	r3, [pc, #432]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	4968      	ldr	r1, [pc, #416]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
 8001cfa:	e025      	b.n	8001d48 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cfc:	4b66      	ldr	r3, [pc, #408]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a65      	ldr	r2, [pc, #404]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001d02:	f043 0308 	orr.w	r3, r3, #8
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4960      	ldr	r1, [pc, #384]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d1a:	4b5f      	ldr	r3, [pc, #380]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	495b      	ldr	r1, [pc, #364]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 fd15 	bl	8002768 <RCC_SetFlashLatencyFromMSIRange>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e343      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d48:	f000 fc4a 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b52      	ldr	r3, [pc, #328]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	091b      	lsrs	r3, r3, #4
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	4950      	ldr	r1, [pc, #320]	; (8001e9c <HAL_RCC_OscConfig+0x274>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	fa22 f303 	lsr.w	r3, r2, r3
 8001d64:	4a4e      	ldr	r2, [pc, #312]	; (8001ea0 <HAL_RCC_OscConfig+0x278>)
 8001d66:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d68:	4b4e      	ldr	r3, [pc, #312]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fbf3 	bl	8001558 <HAL_InitTick>
 8001d72:	4603      	mov	r3, r0
 8001d74:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d052      	beq.n	8001e22 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	e327      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d032      	beq.n	8001dee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d88:	4b43      	ldr	r3, [pc, #268]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a42      	ldr	r2, [pc, #264]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d94:	f7ff fc30 	bl	80015f8 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fc2c 	bl	80015f8 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e310      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dae:	4b3a      	ldr	r3, [pc, #232]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dba:	4b37      	ldr	r3, [pc, #220]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a36      	ldr	r2, [pc, #216]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	f043 0308 	orr.w	r3, r3, #8
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4931      	ldr	r1, [pc, #196]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd8:	4b2f      	ldr	r3, [pc, #188]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	492c      	ldr	r1, [pc, #176]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
 8001dec:	e01a      	b.n	8001e24 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dee:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a29      	ldr	r2, [pc, #164]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fbfd 	bl	80015f8 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e02:	f7ff fbf9 	bl	80015f8 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e2dd      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e14:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f0      	bne.n	8001e02 <HAL_RCC_OscConfig+0x1da>
 8001e20:	e000      	b.n	8001e24 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e22:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d074      	beq.n	8001f1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d005      	beq.n	8001e42 <HAL_RCC_OscConfig+0x21a>
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	2b0c      	cmp	r3, #12
 8001e3a:	d10e      	bne.n	8001e5a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d10b      	bne.n	8001e5a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d064      	beq.n	8001f18 <HAL_RCC_OscConfig+0x2f0>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d160      	bne.n	8001f18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e2ba      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x24a>
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	e026      	b.n	8001ec0 <HAL_RCC_OscConfig+0x298>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e7a:	d115      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x280>
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a05      	ldr	r2, [pc, #20]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a02      	ldr	r2, [pc, #8]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	e014      	b.n	8001ec0 <HAL_RCC_OscConfig+0x298>
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	08006860 	.word	0x08006860
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	20000004 	.word	0x20000004
 8001ea8:	4ba0      	ldr	r3, [pc, #640]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a9f      	ldr	r2, [pc, #636]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8001eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b9d      	ldr	r3, [pc, #628]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a9c      	ldr	r2, [pc, #624]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8001eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fb96 	bl	80015f8 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7ff fb92 	bl	80015f8 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	; 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e276      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee2:	4b92      	ldr	r3, [pc, #584]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x2a8>
 8001eee:	e014      	b.n	8001f1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fb82 	bl	80015f8 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7ff fb7e 	bl	80015f8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	; 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e262      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f0a:	4b88      	ldr	r3, [pc, #544]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x2d0>
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d060      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_OscConfig+0x310>
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	d119      	bne.n	8001f66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d116      	bne.n	8001f66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f38:	4b7c      	ldr	r3, [pc, #496]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_OscConfig+0x328>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e23f      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f50:	4b76      	ldr	r3, [pc, #472]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	061b      	lsls	r3, r3, #24
 8001f5e:	4973      	ldr	r1, [pc, #460]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f64:	e040      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d023      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f6e:	4b6f      	ldr	r3, [pc, #444]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a6e      	ldr	r2, [pc, #440]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7ff fb3d 	bl	80015f8 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f82:	f7ff fb39 	bl	80015f8 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e21d      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f94:	4b65      	ldr	r3, [pc, #404]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa0:	4b62      	ldr	r3, [pc, #392]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	061b      	lsls	r3, r3, #24
 8001fae:	495f      	ldr	r1, [pc, #380]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
 8001fb4:	e018      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb6:	4b5d      	ldr	r3, [pc, #372]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a5c      	ldr	r2, [pc, #368]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8001fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc2:	f7ff fb19 	bl	80015f8 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fca:	f7ff fb15 	bl	80015f8 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e1f9      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fdc:	4b53      	ldr	r3, [pc, #332]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f0      	bne.n	8001fca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d03c      	beq.n	800206e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01c      	beq.n	8002036 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffc:	4b4b      	ldr	r3, [pc, #300]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8001ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002002:	4a4a      	ldr	r2, [pc, #296]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200c:	f7ff faf4 	bl	80015f8 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002014:	f7ff faf0 	bl	80015f8 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e1d4      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002026:	4b41      	ldr	r3, [pc, #260]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8002028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0ef      	beq.n	8002014 <HAL_RCC_OscConfig+0x3ec>
 8002034:	e01b      	b.n	800206e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002036:	4b3d      	ldr	r3, [pc, #244]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8002038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800203c:	4a3b      	ldr	r2, [pc, #236]	; (800212c <HAL_RCC_OscConfig+0x504>)
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002046:	f7ff fad7 	bl	80015f8 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204e:	f7ff fad3 	bl	80015f8 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e1b7      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002060:	4b32      	ldr	r3, [pc, #200]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8002062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1ef      	bne.n	800204e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 80a6 	beq.w	80021c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002080:	4b2a      	ldr	r3, [pc, #168]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10d      	bne.n	80020a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208c:	4b27      	ldr	r3, [pc, #156]	; (800212c <HAL_RCC_OscConfig+0x504>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	4a26      	ldr	r2, [pc, #152]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8002092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002096:	6593      	str	r3, [r2, #88]	; 0x58
 8002098:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_RCC_OscConfig+0x504>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a4:	2301      	movs	r3, #1
 80020a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a8:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_RCC_OscConfig+0x508>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d118      	bne.n	80020e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b4:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <HAL_RCC_OscConfig+0x508>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1d      	ldr	r2, [pc, #116]	; (8002130 <HAL_RCC_OscConfig+0x508>)
 80020ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c0:	f7ff fa9a 	bl	80015f8 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c8:	f7ff fa96 	bl	80015f8 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e17a      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <HAL_RCC_OscConfig+0x508>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d108      	bne.n	8002100 <HAL_RCC_OscConfig+0x4d8>
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <HAL_RCC_OscConfig+0x504>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	4a0d      	ldr	r2, [pc, #52]	; (800212c <HAL_RCC_OscConfig+0x504>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020fe:	e029      	b.n	8002154 <HAL_RCC_OscConfig+0x52c>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b05      	cmp	r3, #5
 8002106:	d115      	bne.n	8002134 <HAL_RCC_OscConfig+0x50c>
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_RCC_OscConfig+0x504>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210e:	4a07      	ldr	r2, [pc, #28]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <HAL_RCC_OscConfig+0x504>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	4a03      	ldr	r2, [pc, #12]	; (800212c <HAL_RCC_OscConfig+0x504>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002128:	e014      	b.n	8002154 <HAL_RCC_OscConfig+0x52c>
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	40007000 	.word	0x40007000
 8002134:	4b9c      	ldr	r3, [pc, #624]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213a:	4a9b      	ldr	r2, [pc, #620]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002144:	4b98      	ldr	r3, [pc, #608]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214a:	4a97      	ldr	r2, [pc, #604]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 800214c:	f023 0304 	bic.w	r3, r3, #4
 8002150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d016      	beq.n	800218a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215c:	f7ff fa4c 	bl	80015f8 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002162:	e00a      	b.n	800217a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002164:	f7ff fa48 	bl	80015f8 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e12a      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217a:	4b8b      	ldr	r3, [pc, #556]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 800217c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0ed      	beq.n	8002164 <HAL_RCC_OscConfig+0x53c>
 8002188:	e015      	b.n	80021b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218a:	f7ff fa35 	bl	80015f8 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7ff fa31 	bl	80015f8 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e113      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021a8:	4b7f      	ldr	r3, [pc, #508]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1ed      	bne.n	8002192 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021b6:	7ffb      	ldrb	r3, [r7, #31]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d105      	bne.n	80021c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021bc:	4b7a      	ldr	r3, [pc, #488]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	4a79      	ldr	r2, [pc, #484]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 80021c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80fe 	beq.w	80023ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	f040 80d0 	bne.w	800237c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021dc:	4b72      	ldr	r3, [pc, #456]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f003 0203 	and.w	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d130      	bne.n	8002252 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	3b01      	subs	r3, #1
 80021fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fe:	429a      	cmp	r2, r3
 8002200:	d127      	bne.n	8002252 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d11f      	bne.n	8002252 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800221c:	2a07      	cmp	r2, #7
 800221e:	bf14      	ite	ne
 8002220:	2201      	movne	r2, #1
 8002222:	2200      	moveq	r2, #0
 8002224:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002226:	4293      	cmp	r3, r2
 8002228:	d113      	bne.n	8002252 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	085b      	lsrs	r3, r3, #1
 8002236:	3b01      	subs	r3, #1
 8002238:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d109      	bne.n	8002252 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	085b      	lsrs	r3, r3, #1
 800224a:	3b01      	subs	r3, #1
 800224c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800224e:	429a      	cmp	r2, r3
 8002250:	d06e      	beq.n	8002330 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	2b0c      	cmp	r3, #12
 8002256:	d069      	beq.n	800232c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002258:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d105      	bne.n	8002270 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002264:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0ad      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002274:	4b4c      	ldr	r3, [pc, #304]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a4b      	ldr	r2, [pc, #300]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 800227a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800227e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002280:	f7ff f9ba 	bl	80015f8 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002288:	f7ff f9b6 	bl	80015f8 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e09a      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800229a:	4b43      	ldr	r3, [pc, #268]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a6:	4b40      	ldr	r3, [pc, #256]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	4b40      	ldr	r3, [pc, #256]	; (80023ac <HAL_RCC_OscConfig+0x784>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022b6:	3a01      	subs	r2, #1
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	4311      	orrs	r1, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022c0:	0212      	lsls	r2, r2, #8
 80022c2:	4311      	orrs	r1, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022c8:	0852      	lsrs	r2, r2, #1
 80022ca:	3a01      	subs	r2, #1
 80022cc:	0552      	lsls	r2, r2, #21
 80022ce:	4311      	orrs	r1, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022d4:	0852      	lsrs	r2, r2, #1
 80022d6:	3a01      	subs	r2, #1
 80022d8:	0652      	lsls	r2, r2, #25
 80022da:	4311      	orrs	r1, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022e0:	0912      	lsrs	r2, r2, #4
 80022e2:	0452      	lsls	r2, r2, #17
 80022e4:	430a      	orrs	r2, r1
 80022e6:	4930      	ldr	r1, [pc, #192]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022ec:	4b2e      	ldr	r3, [pc, #184]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a2d      	ldr	r2, [pc, #180]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 80022f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022f8:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4a2a      	ldr	r2, [pc, #168]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 80022fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002302:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002304:	f7ff f978 	bl	80015f8 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230c:	f7ff f974 	bl	80015f8 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e058      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800231e:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800232a:	e050      	b.n	80023ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e04f      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d148      	bne.n	80023ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800233c:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a19      	ldr	r2, [pc, #100]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 8002342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002346:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002348:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4a16      	ldr	r2, [pc, #88]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 800234e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002352:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002354:	f7ff f950 	bl	80015f8 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235c:	f7ff f94c 	bl	80015f8 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e030      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0x734>
 800237a:	e028      	b.n	80023ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2b0c      	cmp	r3, #12
 8002380:	d023      	beq.n	80023ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <HAL_RCC_OscConfig+0x780>)
 8002388:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800238c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238e:	f7ff f933 	bl	80015f8 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002394:	e00c      	b.n	80023b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002396:	f7ff f92f 	bl	80015f8 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d905      	bls.n	80023b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e013      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
 80023a8:	40021000 	.word	0x40021000
 80023ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_RCC_OscConfig+0x7b0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1ec      	bne.n	8002396 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_RCC_OscConfig+0x7b0>)
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	4905      	ldr	r1, [pc, #20]	; (80023d8 <HAL_RCC_OscConfig+0x7b0>)
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_RCC_OscConfig+0x7b4>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	60cb      	str	r3, [r1, #12]
 80023c8:	e001      	b.n	80023ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3720      	adds	r7, #32
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	feeefffc 	.word	0xfeeefffc

080023e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0e7      	b.n	80025c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023f4:	4b75      	ldr	r3, [pc, #468]	; (80025cc <HAL_RCC_ClockConfig+0x1ec>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d910      	bls.n	8002424 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b72      	ldr	r3, [pc, #456]	; (80025cc <HAL_RCC_ClockConfig+0x1ec>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 0207 	bic.w	r2, r3, #7
 800240a:	4970      	ldr	r1, [pc, #448]	; (80025cc <HAL_RCC_ClockConfig+0x1ec>)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	4b6e      	ldr	r3, [pc, #440]	; (80025cc <HAL_RCC_ClockConfig+0x1ec>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0cf      	b.n	80025c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d010      	beq.n	8002452 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	4b66      	ldr	r3, [pc, #408]	; (80025d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800243c:	429a      	cmp	r2, r3
 800243e:	d908      	bls.n	8002452 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002440:	4b63      	ldr	r3, [pc, #396]	; (80025d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4960      	ldr	r1, [pc, #384]	; (80025d0 <HAL_RCC_ClockConfig+0x1f0>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d04c      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b03      	cmp	r3, #3
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002466:	4b5a      	ldr	r3, [pc, #360]	; (80025d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d121      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e0a6      	b.n	80025c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d107      	bne.n	800248e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800247e:	4b54      	ldr	r3, [pc, #336]	; (80025d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d115      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e09a      	b.n	80025c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002496:	4b4e      	ldr	r3, [pc, #312]	; (80025d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e08e      	b.n	80025c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024a6:	4b4a      	ldr	r3, [pc, #296]	; (80025d0 <HAL_RCC_ClockConfig+0x1f0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e086      	b.n	80025c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024b6:	4b46      	ldr	r3, [pc, #280]	; (80025d0 <HAL_RCC_ClockConfig+0x1f0>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f023 0203 	bic.w	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4943      	ldr	r1, [pc, #268]	; (80025d0 <HAL_RCC_ClockConfig+0x1f0>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c8:	f7ff f896 	bl	80015f8 <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d0:	f7ff f892 	bl	80015f8 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	; 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e06e      	b.n	80025c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	4b3a      	ldr	r3, [pc, #232]	; (80025d0 <HAL_RCC_ClockConfig+0x1f0>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 020c 	and.w	r2, r3, #12
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d1eb      	bne.n	80024d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d010      	beq.n	8002526 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <HAL_RCC_ClockConfig+0x1f0>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002510:	429a      	cmp	r2, r3
 8002512:	d208      	bcs.n	8002526 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002514:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	492b      	ldr	r1, [pc, #172]	; (80025d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002526:	4b29      	ldr	r3, [pc, #164]	; (80025cc <HAL_RCC_ClockConfig+0x1ec>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d210      	bcs.n	8002556 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002534:	4b25      	ldr	r3, [pc, #148]	; (80025cc <HAL_RCC_ClockConfig+0x1ec>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f023 0207 	bic.w	r2, r3, #7
 800253c:	4923      	ldr	r1, [pc, #140]	; (80025cc <HAL_RCC_ClockConfig+0x1ec>)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	4313      	orrs	r3, r2
 8002542:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002544:	4b21      	ldr	r3, [pc, #132]	; (80025cc <HAL_RCC_ClockConfig+0x1ec>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d001      	beq.n	8002556 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e036      	b.n	80025c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d008      	beq.n	8002574 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002562:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	4918      	ldr	r1, [pc, #96]	; (80025d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002570:	4313      	orrs	r3, r2
 8002572:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d009      	beq.n	8002594 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002580:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4910      	ldr	r1, [pc, #64]	; (80025d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002590:	4313      	orrs	r3, r2
 8002592:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002594:	f000 f824 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_RCC_ClockConfig+0x1f0>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	091b      	lsrs	r3, r3, #4
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	490b      	ldr	r1, [pc, #44]	; (80025d4 <HAL_RCC_ClockConfig+0x1f4>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
 80025b0:	4a09      	ldr	r2, [pc, #36]	; (80025d8 <HAL_RCC_ClockConfig+0x1f8>)
 80025b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <HAL_RCC_ClockConfig+0x1fc>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe ffcd 	bl	8001558 <HAL_InitTick>
 80025be:	4603      	mov	r3, r0
 80025c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80025c2:	7afb      	ldrb	r3, [r7, #11]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40022000 	.word	0x40022000
 80025d0:	40021000 	.word	0x40021000
 80025d4:	08006860 	.word	0x08006860
 80025d8:	20000000 	.word	0x20000000
 80025dc:	20000004 	.word	0x20000004

080025e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	; 0x24
 80025e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ee:	4b3e      	ldr	r3, [pc, #248]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025f8:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0x34>
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	2b0c      	cmp	r3, #12
 800260c:	d121      	bne.n	8002652 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d11e      	bne.n	8002652 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002614:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d107      	bne.n	8002630 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002620:	4b31      	ldr	r3, [pc, #196]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	e005      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002630:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800263c:	4a2b      	ldr	r2, [pc, #172]	; (80026ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002644:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10d      	bne.n	8002668 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002650:	e00a      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	2b04      	cmp	r3, #4
 8002656:	d102      	bne.n	800265e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800265a:	61bb      	str	r3, [r7, #24]
 800265c:	e004      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d101      	bne.n	8002668 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002664:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002666:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	2b0c      	cmp	r3, #12
 800266c:	d134      	bne.n	80026d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800266e:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d003      	beq.n	8002686 <HAL_RCC_GetSysClockFreq+0xa6>
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d003      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0xac>
 8002684:	e005      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002686:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002688:	617b      	str	r3, [r7, #20]
      break;
 800268a:	e005      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800268e:	617b      	str	r3, [r7, #20]
      break;
 8002690:	e002      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	617b      	str	r3, [r7, #20]
      break;
 8002696:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002698:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	3301      	adds	r3, #1
 80026a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	fb03 f202 	mul.w	r2, r3, r2
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026be:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	0e5b      	lsrs	r3, r3, #25
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	3301      	adds	r3, #1
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026d8:	69bb      	ldr	r3, [r7, #24]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3724      	adds	r7, #36	; 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
 80026ec:	08006878 	.word	0x08006878
 80026f0:	00f42400 	.word	0x00f42400
 80026f4:	007a1200 	.word	0x007a1200

080026f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <HAL_RCC_GetHCLKFreq+0x14>)
 80026fe:	681b      	ldr	r3, [r3, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000000 	.word	0x20000000

08002710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002714:	f7ff fff0 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_RCC_GetPCLK1Freq+0x24>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	0a1b      	lsrs	r3, r3, #8
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	4904      	ldr	r1, [pc, #16]	; (8002738 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	08006870 	.word	0x08006870

0800273c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002740:	f7ff ffda 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	0adb      	lsrs	r3, r3, #11
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4904      	ldr	r1, [pc, #16]	; (8002764 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002752:	5ccb      	ldrb	r3, [r1, r3]
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000
 8002764:	08006870 	.word	0x08006870

08002768 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002774:	4b2a      	ldr	r3, [pc, #168]	; (8002820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002780:	f7ff f9ee 	bl	8001b60 <HAL_PWREx_GetVoltageRange>
 8002784:	6178      	str	r0, [r7, #20]
 8002786:	e014      	b.n	80027b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002788:	4b25      	ldr	r3, [pc, #148]	; (8002820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800278a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278c:	4a24      	ldr	r2, [pc, #144]	; (8002820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800278e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002792:	6593      	str	r3, [r2, #88]	; 0x58
 8002794:	4b22      	ldr	r3, [pc, #136]	; (8002820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027a0:	f7ff f9de 	bl	8001b60 <HAL_PWREx_GetVoltageRange>
 80027a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027a6:	4b1e      	ldr	r3, [pc, #120]	; (8002820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	4a1d      	ldr	r2, [pc, #116]	; (8002820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027b8:	d10b      	bne.n	80027d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b80      	cmp	r3, #128	; 0x80
 80027be:	d919      	bls.n	80027f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2ba0      	cmp	r3, #160	; 0xa0
 80027c4:	d902      	bls.n	80027cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027c6:	2302      	movs	r3, #2
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	e013      	b.n	80027f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027cc:	2301      	movs	r3, #1
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	e010      	b.n	80027f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b80      	cmp	r3, #128	; 0x80
 80027d6:	d902      	bls.n	80027de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027d8:	2303      	movs	r3, #3
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	e00a      	b.n	80027f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b80      	cmp	r3, #128	; 0x80
 80027e2:	d102      	bne.n	80027ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027e4:	2302      	movs	r3, #2
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	e004      	b.n	80027f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b70      	cmp	r3, #112	; 0x70
 80027ee:	d101      	bne.n	80027f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027f0:	2301      	movs	r3, #1
 80027f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f023 0207 	bic.w	r2, r3, #7
 80027fc:	4909      	ldr	r1, [pc, #36]	; (8002824 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002804:	4b07      	ldr	r3, [pc, #28]	; (8002824 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	429a      	cmp	r2, r3
 8002810:	d001      	beq.n	8002816 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000
 8002824:	40022000 	.word	0x40022000

08002828 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002830:	2300      	movs	r3, #0
 8002832:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002834:	2300      	movs	r3, #0
 8002836:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002840:	2b00      	cmp	r3, #0
 8002842:	d041      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002848:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800284c:	d02a      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800284e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002852:	d824      	bhi.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002854:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002858:	d008      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800285a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800285e:	d81e      	bhi.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002868:	d010      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800286a:	e018      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800286c:	4b86      	ldr	r3, [pc, #536]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4a85      	ldr	r2, [pc, #532]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002876:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002878:	e015      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3304      	adds	r3, #4
 800287e:	2100      	movs	r1, #0
 8002880:	4618      	mov	r0, r3
 8002882:	f000 fabb 	bl	8002dfc <RCCEx_PLLSAI1_Config>
 8002886:	4603      	mov	r3, r0
 8002888:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800288a:	e00c      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3320      	adds	r3, #32
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fba6 	bl	8002fe4 <RCCEx_PLLSAI2_Config>
 8002898:	4603      	mov	r3, r0
 800289a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800289c:	e003      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	74fb      	strb	r3, [r7, #19]
      break;
 80028a2:	e000      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028a6:	7cfb      	ldrb	r3, [r7, #19]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10b      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028ac:	4b76      	ldr	r3, [pc, #472]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ba:	4973      	ldr	r1, [pc, #460]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028c2:	e001      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c4:	7cfb      	ldrb	r3, [r7, #19]
 80028c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d041      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028dc:	d02a      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80028de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028e2:	d824      	bhi.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028e8:	d008      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028ee:	d81e      	bhi.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80028f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f8:	d010      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028fa:	e018      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028fc:	4b62      	ldr	r3, [pc, #392]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a61      	ldr	r2, [pc, #388]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002906:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002908:	e015      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3304      	adds	r3, #4
 800290e:	2100      	movs	r1, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fa73 	bl	8002dfc <RCCEx_PLLSAI1_Config>
 8002916:	4603      	mov	r3, r0
 8002918:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800291a:	e00c      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3320      	adds	r3, #32
 8002920:	2100      	movs	r1, #0
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fb5e 	bl	8002fe4 <RCCEx_PLLSAI2_Config>
 8002928:	4603      	mov	r3, r0
 800292a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800292c:	e003      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	74fb      	strb	r3, [r7, #19]
      break;
 8002932:	e000      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002936:	7cfb      	ldrb	r3, [r7, #19]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10b      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800293c:	4b52      	ldr	r3, [pc, #328]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002942:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800294a:	494f      	ldr	r1, [pc, #316]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002952:	e001      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002954:	7cfb      	ldrb	r3, [r7, #19]
 8002956:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80a0 	beq.w	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800297a:	2300      	movs	r3, #0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00d      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002980:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002984:	4a40      	ldr	r2, [pc, #256]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298a:	6593      	str	r3, [r2, #88]	; 0x58
 800298c:	4b3e      	ldr	r3, [pc, #248]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002998:	2301      	movs	r3, #1
 800299a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800299c:	4b3b      	ldr	r3, [pc, #236]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a3a      	ldr	r2, [pc, #232]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029a8:	f7fe fe26 	bl	80015f8 <HAL_GetTick>
 80029ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029ae:	e009      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b0:	f7fe fe22 	bl	80015f8 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d902      	bls.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	74fb      	strb	r3, [r7, #19]
        break;
 80029c2:	e005      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029c4:	4b31      	ldr	r3, [pc, #196]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0ef      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d15c      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029d6:	4b2c      	ldr	r3, [pc, #176]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01f      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d019      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029f4:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a00:	4b21      	ldr	r3, [pc, #132]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a06:	4a20      	ldr	r2, [pc, #128]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a10:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	4a1c      	ldr	r2, [pc, #112]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a20:	4a19      	ldr	r2, [pc, #100]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d016      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a32:	f7fe fde1 	bl	80015f8 <HAL_GetTick>
 8002a36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a38:	e00b      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3a:	f7fe fddd 	bl	80015f8 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d902      	bls.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	74fb      	strb	r3, [r7, #19]
            break;
 8002a50:	e006      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0ec      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a66:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a76:	4904      	ldr	r1, [pc, #16]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a7e:	e009      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a80:	7cfb      	ldrb	r3, [r7, #19]
 8002a82:	74bb      	strb	r3, [r7, #18]
 8002a84:	e006      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a90:	7cfb      	ldrb	r3, [r7, #19]
 8002a92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a94:	7c7b      	ldrb	r3, [r7, #17]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d105      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9a:	4b9e      	ldr	r3, [pc, #632]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	4a9d      	ldr	r2, [pc, #628]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ab2:	4b98      	ldr	r3, [pc, #608]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab8:	f023 0203 	bic.w	r2, r3, #3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac0:	4994      	ldr	r1, [pc, #592]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ad4:	4b8f      	ldr	r3, [pc, #572]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ada:	f023 020c 	bic.w	r2, r3, #12
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae2:	498c      	ldr	r1, [pc, #560]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002af6:	4b87      	ldr	r3, [pc, #540]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	4983      	ldr	r1, [pc, #524]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b18:	4b7e      	ldr	r3, [pc, #504]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	497b      	ldr	r1, [pc, #492]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b3a:	4b76      	ldr	r3, [pc, #472]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b48:	4972      	ldr	r1, [pc, #456]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b5c:	4b6d      	ldr	r3, [pc, #436]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6a:	496a      	ldr	r1, [pc, #424]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b7e:	4b65      	ldr	r3, [pc, #404]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8c:	4961      	ldr	r1, [pc, #388]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ba0:	4b5c      	ldr	r3, [pc, #368]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bae:	4959      	ldr	r1, [pc, #356]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bc2:	4b54      	ldr	r3, [pc, #336]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd0:	4950      	ldr	r1, [pc, #320]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00a      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002be4:	4b4b      	ldr	r3, [pc, #300]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf2:	4948      	ldr	r1, [pc, #288]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c06:	4b43      	ldr	r3, [pc, #268]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c14:	493f      	ldr	r1, [pc, #252]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d028      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c28:	4b3a      	ldr	r3, [pc, #232]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c36:	4937      	ldr	r1, [pc, #220]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c46:	d106      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c48:	4b32      	ldr	r3, [pc, #200]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4a31      	ldr	r2, [pc, #196]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c52:	60d3      	str	r3, [r2, #12]
 8002c54:	e011      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c5e:	d10c      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3304      	adds	r3, #4
 8002c64:	2101      	movs	r1, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f8c8 	bl	8002dfc <RCCEx_PLLSAI1_Config>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c70:	7cfb      	ldrb	r3, [r7, #19]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c76:	7cfb      	ldrb	r3, [r7, #19]
 8002c78:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d028      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c86:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	491f      	ldr	r1, [pc, #124]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ca4:	d106      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca6:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	4a1a      	ldr	r2, [pc, #104]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cb0:	60d3      	str	r3, [r2, #12]
 8002cb2:	e011      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 f899 	bl	8002dfc <RCCEx_PLLSAI1_Config>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cce:	7cfb      	ldrb	r3, [r7, #19]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002cd4:	7cfb      	ldrb	r3, [r7, #19]
 8002cd6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d02b      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf2:	4908      	ldr	r1, [pc, #32]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d02:	d109      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4a02      	ldr	r2, [pc, #8]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d0e:	60d3      	str	r3, [r2, #12]
 8002d10:	e014      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3304      	adds	r3, #4
 8002d26:	2101      	movs	r1, #1
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 f867 	bl	8002dfc <RCCEx_PLLSAI1_Config>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d38:	7cfb      	ldrb	r3, [r7, #19]
 8002d3a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d02f      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d48:	4b2b      	ldr	r3, [pc, #172]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d56:	4928      	ldr	r1, [pc, #160]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d66:	d10d      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f844 	bl	8002dfc <RCCEx_PLLSAI1_Config>
 8002d74:	4603      	mov	r3, r0
 8002d76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d78:	7cfb      	ldrb	r3, [r7, #19]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d014      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d7e:	7cfb      	ldrb	r3, [r7, #19]
 8002d80:	74bb      	strb	r3, [r7, #18]
 8002d82:	e011      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3320      	adds	r3, #32
 8002d92:	2102      	movs	r1, #2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 f925 	bl	8002fe4 <RCCEx_PLLSAI2_Config>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d9e:	7cfb      	ldrb	r3, [r7, #19]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002da4:	7cfb      	ldrb	r3, [r7, #19]
 8002da6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002db4:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dc2:	490d      	ldr	r1, [pc, #52]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00b      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ddc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002de6:	4904      	ldr	r1, [pc, #16]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002dee:	7cbb      	ldrb	r3, [r7, #18]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000

08002dfc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e0a:	4b75      	ldr	r3, [pc, #468]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d018      	beq.n	8002e48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e16:	4b72      	ldr	r3, [pc, #456]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 0203 	and.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d10d      	bne.n	8002e42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
       ||
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e2e:	4b6c      	ldr	r3, [pc, #432]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	091b      	lsrs	r3, r3, #4
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d047      	beq.n	8002ed2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	73fb      	strb	r3, [r7, #15]
 8002e46:	e044      	b.n	8002ed2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d018      	beq.n	8002e82 <RCCEx_PLLSAI1_Config+0x86>
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d825      	bhi.n	8002ea0 <RCCEx_PLLSAI1_Config+0xa4>
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d002      	beq.n	8002e5e <RCCEx_PLLSAI1_Config+0x62>
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d009      	beq.n	8002e70 <RCCEx_PLLSAI1_Config+0x74>
 8002e5c:	e020      	b.n	8002ea0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e5e:	4b60      	ldr	r3, [pc, #384]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d11d      	bne.n	8002ea6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e6e:	e01a      	b.n	8002ea6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e70:	4b5b      	ldr	r3, [pc, #364]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d116      	bne.n	8002eaa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e80:	e013      	b.n	8002eaa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e82:	4b57      	ldr	r3, [pc, #348]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10f      	bne.n	8002eae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e8e:	4b54      	ldr	r3, [pc, #336]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e9e:	e006      	b.n	8002eae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea4:	e004      	b.n	8002eb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ea6:	bf00      	nop
 8002ea8:	e002      	b.n	8002eb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eaa:	bf00      	nop
 8002eac:	e000      	b.n	8002eb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eae:	bf00      	nop
    }

    if(status == HAL_OK)
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10d      	bne.n	8002ed2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eb6:	4b4a      	ldr	r3, [pc, #296]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6819      	ldr	r1, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	4944      	ldr	r1, [pc, #272]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d17d      	bne.n	8002fd4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ed8:	4b41      	ldr	r3, [pc, #260]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a40      	ldr	r2, [pc, #256]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ede:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ee2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee4:	f7fe fb88 	bl	80015f8 <HAL_GetTick>
 8002ee8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002eea:	e009      	b.n	8002f00 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eec:	f7fe fb84 	bl	80015f8 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d902      	bls.n	8002f00 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	73fb      	strb	r3, [r7, #15]
        break;
 8002efe:	e005      	b.n	8002f0c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f00:	4b37      	ldr	r3, [pc, #220]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1ef      	bne.n	8002eec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d160      	bne.n	8002fd4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d111      	bne.n	8002f3c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f18:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6892      	ldr	r2, [r2, #8]
 8002f28:	0211      	lsls	r1, r2, #8
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	68d2      	ldr	r2, [r2, #12]
 8002f2e:	0912      	lsrs	r2, r2, #4
 8002f30:	0452      	lsls	r2, r2, #17
 8002f32:	430a      	orrs	r2, r1
 8002f34:	492a      	ldr	r1, [pc, #168]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	610b      	str	r3, [r1, #16]
 8002f3a:	e027      	b.n	8002f8c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d112      	bne.n	8002f68 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f42:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6892      	ldr	r2, [r2, #8]
 8002f52:	0211      	lsls	r1, r2, #8
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6912      	ldr	r2, [r2, #16]
 8002f58:	0852      	lsrs	r2, r2, #1
 8002f5a:	3a01      	subs	r2, #1
 8002f5c:	0552      	lsls	r2, r2, #21
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	491f      	ldr	r1, [pc, #124]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	610b      	str	r3, [r1, #16]
 8002f66:	e011      	b.n	8002f8c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f68:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6892      	ldr	r2, [r2, #8]
 8002f78:	0211      	lsls	r1, r2, #8
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6952      	ldr	r2, [r2, #20]
 8002f7e:	0852      	lsrs	r2, r2, #1
 8002f80:	3a01      	subs	r2, #1
 8002f82:	0652      	lsls	r2, r2, #25
 8002f84:	430a      	orrs	r2, r1
 8002f86:	4916      	ldr	r1, [pc, #88]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f8c:	4b14      	ldr	r3, [pc, #80]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a13      	ldr	r2, [pc, #76]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f98:	f7fe fb2e 	bl	80015f8 <HAL_GetTick>
 8002f9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f9e:	e009      	b.n	8002fb4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fa0:	f7fe fb2a 	bl	80015f8 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d902      	bls.n	8002fb4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	73fb      	strb	r3, [r7, #15]
          break;
 8002fb2:	e005      	b.n	8002fc0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ef      	beq.n	8002fa0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fc6:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	4904      	ldr	r1, [pc, #16]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000

08002fe4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ff2:	4b6a      	ldr	r3, [pc, #424]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d018      	beq.n	8003030 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ffe:	4b67      	ldr	r3, [pc, #412]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f003 0203 	and.w	r2, r3, #3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d10d      	bne.n	800302a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
       ||
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003016:	4b61      	ldr	r3, [pc, #388]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
       ||
 8003026:	429a      	cmp	r2, r3
 8003028:	d047      	beq.n	80030ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	73fb      	strb	r3, [r7, #15]
 800302e:	e044      	b.n	80030ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b03      	cmp	r3, #3
 8003036:	d018      	beq.n	800306a <RCCEx_PLLSAI2_Config+0x86>
 8003038:	2b03      	cmp	r3, #3
 800303a:	d825      	bhi.n	8003088 <RCCEx_PLLSAI2_Config+0xa4>
 800303c:	2b01      	cmp	r3, #1
 800303e:	d002      	beq.n	8003046 <RCCEx_PLLSAI2_Config+0x62>
 8003040:	2b02      	cmp	r3, #2
 8003042:	d009      	beq.n	8003058 <RCCEx_PLLSAI2_Config+0x74>
 8003044:	e020      	b.n	8003088 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003046:	4b55      	ldr	r3, [pc, #340]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d11d      	bne.n	800308e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003056:	e01a      	b.n	800308e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003058:	4b50      	ldr	r3, [pc, #320]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003060:	2b00      	cmp	r3, #0
 8003062:	d116      	bne.n	8003092 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003068:	e013      	b.n	8003092 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800306a:	4b4c      	ldr	r3, [pc, #304]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10f      	bne.n	8003096 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003076:	4b49      	ldr	r3, [pc, #292]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003086:	e006      	b.n	8003096 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
      break;
 800308c:	e004      	b.n	8003098 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800308e:	bf00      	nop
 8003090:	e002      	b.n	8003098 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003092:	bf00      	nop
 8003094:	e000      	b.n	8003098 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003096:	bf00      	nop
    }

    if(status == HAL_OK)
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10d      	bne.n	80030ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800309e:	4b3f      	ldr	r3, [pc, #252]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6819      	ldr	r1, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	430b      	orrs	r3, r1
 80030b4:	4939      	ldr	r1, [pc, #228]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d167      	bne.n	8003190 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80030c0:	4b36      	ldr	r3, [pc, #216]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a35      	ldr	r2, [pc, #212]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030cc:	f7fe fa94 	bl	80015f8 <HAL_GetTick>
 80030d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030d2:	e009      	b.n	80030e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030d4:	f7fe fa90 	bl	80015f8 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d902      	bls.n	80030e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	73fb      	strb	r3, [r7, #15]
        break;
 80030e6:	e005      	b.n	80030f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030e8:	4b2c      	ldr	r3, [pc, #176]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1ef      	bne.n	80030d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d14a      	bne.n	8003190 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d111      	bne.n	8003124 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003100:	4b26      	ldr	r3, [pc, #152]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6892      	ldr	r2, [r2, #8]
 8003110:	0211      	lsls	r1, r2, #8
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68d2      	ldr	r2, [r2, #12]
 8003116:	0912      	lsrs	r2, r2, #4
 8003118:	0452      	lsls	r2, r2, #17
 800311a:	430a      	orrs	r2, r1
 800311c:	491f      	ldr	r1, [pc, #124]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 800311e:	4313      	orrs	r3, r2
 8003120:	614b      	str	r3, [r1, #20]
 8003122:	e011      	b.n	8003148 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003124:	4b1d      	ldr	r3, [pc, #116]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800312c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6892      	ldr	r2, [r2, #8]
 8003134:	0211      	lsls	r1, r2, #8
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6912      	ldr	r2, [r2, #16]
 800313a:	0852      	lsrs	r2, r2, #1
 800313c:	3a01      	subs	r2, #1
 800313e:	0652      	lsls	r2, r2, #25
 8003140:	430a      	orrs	r2, r1
 8003142:	4916      	ldr	r1, [pc, #88]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003144:	4313      	orrs	r3, r2
 8003146:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003148:	4b14      	ldr	r3, [pc, #80]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a13      	ldr	r2, [pc, #76]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 800314e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003152:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003154:	f7fe fa50 	bl	80015f8 <HAL_GetTick>
 8003158:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800315a:	e009      	b.n	8003170 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800315c:	f7fe fa4c 	bl	80015f8 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d902      	bls.n	8003170 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	73fb      	strb	r3, [r7, #15]
          break;
 800316e:	e005      	b.n	800317c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0ef      	beq.n	800315c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003182:	4b06      	ldr	r3, [pc, #24]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	4904      	ldr	r1, [pc, #16]	; (800319c <RCCEx_PLLSAI2_Config+0x1b8>)
 800318c:	4313      	orrs	r3, r2
 800318e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003190:	7bfb      	ldrb	r3, [r7, #15]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000

080031a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e040      	b.n	8003234 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fe f820 	bl	8001208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2224      	movs	r2, #36	; 0x24
 80031cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0201 	bic.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fc34 	bl	8003a54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f979 	bl	80034e4 <UART_SetConfig>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e01b      	b.n	8003234 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800320a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800321a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fcb3 	bl	8003b98 <UART_CheckIdleState>
 8003232:	4603      	mov	r3, r0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	; 0x28
 8003240:	af02      	add	r7, sp, #8
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	4613      	mov	r3, r2
 800324a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003250:	2b20      	cmp	r3, #32
 8003252:	d178      	bne.n	8003346 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_UART_Transmit+0x24>
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e071      	b.n	8003348 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2221      	movs	r2, #33	; 0x21
 8003270:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003272:	f7fe f9c1 	bl	80015f8 <HAL_GetTick>
 8003276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	88fa      	ldrh	r2, [r7, #6]
 800327c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	88fa      	ldrh	r2, [r7, #6]
 8003284:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003290:	d108      	bne.n	80032a4 <HAL_UART_Transmit+0x68>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d104      	bne.n	80032a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	e003      	b.n	80032ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032ac:	e030      	b.n	8003310 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2200      	movs	r2, #0
 80032b6:	2180      	movs	r1, #128	; 0x80
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 fd15 	bl	8003ce8 <UART_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d004      	beq.n	80032ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e03c      	b.n	8003348 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10b      	bne.n	80032ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	881a      	ldrh	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032e0:	b292      	uxth	r2, r2
 80032e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	3302      	adds	r3, #2
 80032e8:	61bb      	str	r3, [r7, #24]
 80032ea:	e008      	b.n	80032fe <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	781a      	ldrb	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	b292      	uxth	r2, r2
 80032f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	3301      	adds	r3, #1
 80032fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003304:	b29b      	uxth	r3, r3
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1c8      	bne.n	80032ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2200      	movs	r2, #0
 8003324:	2140      	movs	r1, #64	; 0x40
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 fcde 	bl	8003ce8 <UART_WaitOnFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d004      	beq.n	800333c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e005      	b.n	8003348 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	e000      	b.n	8003348 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003346:	2302      	movs	r3, #2
  }
}
 8003348:	4618      	mov	r0, r3
 800334a:	3720      	adds	r7, #32
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	; 0x28
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003366:	2b20      	cmp	r3, #32
 8003368:	f040 80b6 	bne.w	80034d8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <HAL_UART_Receive+0x28>
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0ae      	b.n	80034da <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2222      	movs	r2, #34	; 0x22
 8003388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003392:	f7fe f931 	bl	80015f8 <HAL_GetTick>
 8003396:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	88fa      	ldrh	r2, [r7, #6]
 800339c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	88fa      	ldrh	r2, [r7, #6]
 80033a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b0:	d10e      	bne.n	80033d0 <HAL_UART_Receive+0x80>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d105      	bne.n	80033c6 <HAL_UART_Receive+0x76>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80033c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033c4:	e02d      	b.n	8003422 <HAL_UART_Receive+0xd2>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	22ff      	movs	r2, #255	; 0xff
 80033ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033ce:	e028      	b.n	8003422 <HAL_UART_Receive+0xd2>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10d      	bne.n	80033f4 <HAL_UART_Receive+0xa4>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d104      	bne.n	80033ea <HAL_UART_Receive+0x9a>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	22ff      	movs	r2, #255	; 0xff
 80033e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033e8:	e01b      	b.n	8003422 <HAL_UART_Receive+0xd2>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	227f      	movs	r2, #127	; 0x7f
 80033ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033f2:	e016      	b.n	8003422 <HAL_UART_Receive+0xd2>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033fc:	d10d      	bne.n	800341a <HAL_UART_Receive+0xca>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d104      	bne.n	8003410 <HAL_UART_Receive+0xc0>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	227f      	movs	r2, #127	; 0x7f
 800340a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800340e:	e008      	b.n	8003422 <HAL_UART_Receive+0xd2>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	223f      	movs	r2, #63	; 0x3f
 8003414:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003418:	e003      	b.n	8003422 <HAL_UART_Receive+0xd2>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003428:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003432:	d108      	bne.n	8003446 <HAL_UART_Receive+0xf6>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d104      	bne.n	8003446 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800343c:	2300      	movs	r3, #0
 800343e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	61bb      	str	r3, [r7, #24]
 8003444:	e003      	b.n	800344e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800344a:	2300      	movs	r3, #0
 800344c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800344e:	e037      	b.n	80034c0 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2200      	movs	r2, #0
 8003458:	2120      	movs	r1, #32
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 fc44 	bl	8003ce8 <UART_WaitOnFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e033      	b.n	80034da <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10c      	bne.n	8003492 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800347e:	b29a      	uxth	r2, r3
 8003480:	8a7b      	ldrh	r3, [r7, #18]
 8003482:	4013      	ands	r3, r2
 8003484:	b29a      	uxth	r2, r3
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	3302      	adds	r3, #2
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	e00d      	b.n	80034ae <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003498:	b29b      	uxth	r3, r3
 800349a:	b2da      	uxtb	r2, r3
 800349c:	8a7b      	ldrh	r3, [r7, #18]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	4013      	ands	r3, r2
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	3301      	adds	r3, #1
 80034ac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1c1      	bne.n	8003450 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	e000      	b.n	80034da <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80034d8:	2302      	movs	r3, #2
  }
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3720      	adds	r7, #32
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e8:	b08a      	sub	sp, #40	; 0x28
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	431a      	orrs	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	431a      	orrs	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	4313      	orrs	r3, r2
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	4ba4      	ldr	r3, [pc, #656]	; (80037a4 <UART_SetConfig+0x2c0>)
 8003514:	4013      	ands	r3, r2
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	6812      	ldr	r2, [r2, #0]
 800351a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800351c:	430b      	orrs	r3, r1
 800351e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a99      	ldr	r2, [pc, #612]	; (80037a8 <UART_SetConfig+0x2c4>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d004      	beq.n	8003550 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354c:	4313      	orrs	r3, r2
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003560:	430a      	orrs	r2, r1
 8003562:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a90      	ldr	r2, [pc, #576]	; (80037ac <UART_SetConfig+0x2c8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d126      	bne.n	80035bc <UART_SetConfig+0xd8>
 800356e:	4b90      	ldr	r3, [pc, #576]	; (80037b0 <UART_SetConfig+0x2cc>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	2b03      	cmp	r3, #3
 800357a:	d81b      	bhi.n	80035b4 <UART_SetConfig+0xd0>
 800357c:	a201      	add	r2, pc, #4	; (adr r2, 8003584 <UART_SetConfig+0xa0>)
 800357e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003582:	bf00      	nop
 8003584:	08003595 	.word	0x08003595
 8003588:	080035a5 	.word	0x080035a5
 800358c:	0800359d 	.word	0x0800359d
 8003590:	080035ad 	.word	0x080035ad
 8003594:	2301      	movs	r3, #1
 8003596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359a:	e116      	b.n	80037ca <UART_SetConfig+0x2e6>
 800359c:	2302      	movs	r3, #2
 800359e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035a2:	e112      	b.n	80037ca <UART_SetConfig+0x2e6>
 80035a4:	2304      	movs	r3, #4
 80035a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035aa:	e10e      	b.n	80037ca <UART_SetConfig+0x2e6>
 80035ac:	2308      	movs	r3, #8
 80035ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035b2:	e10a      	b.n	80037ca <UART_SetConfig+0x2e6>
 80035b4:	2310      	movs	r3, #16
 80035b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ba:	e106      	b.n	80037ca <UART_SetConfig+0x2e6>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a7c      	ldr	r2, [pc, #496]	; (80037b4 <UART_SetConfig+0x2d0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d138      	bne.n	8003638 <UART_SetConfig+0x154>
 80035c6:	4b7a      	ldr	r3, [pc, #488]	; (80037b0 <UART_SetConfig+0x2cc>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035cc:	f003 030c 	and.w	r3, r3, #12
 80035d0:	2b0c      	cmp	r3, #12
 80035d2:	d82d      	bhi.n	8003630 <UART_SetConfig+0x14c>
 80035d4:	a201      	add	r2, pc, #4	; (adr r2, 80035dc <UART_SetConfig+0xf8>)
 80035d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035da:	bf00      	nop
 80035dc:	08003611 	.word	0x08003611
 80035e0:	08003631 	.word	0x08003631
 80035e4:	08003631 	.word	0x08003631
 80035e8:	08003631 	.word	0x08003631
 80035ec:	08003621 	.word	0x08003621
 80035f0:	08003631 	.word	0x08003631
 80035f4:	08003631 	.word	0x08003631
 80035f8:	08003631 	.word	0x08003631
 80035fc:	08003619 	.word	0x08003619
 8003600:	08003631 	.word	0x08003631
 8003604:	08003631 	.word	0x08003631
 8003608:	08003631 	.word	0x08003631
 800360c:	08003629 	.word	0x08003629
 8003610:	2300      	movs	r3, #0
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003616:	e0d8      	b.n	80037ca <UART_SetConfig+0x2e6>
 8003618:	2302      	movs	r3, #2
 800361a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361e:	e0d4      	b.n	80037ca <UART_SetConfig+0x2e6>
 8003620:	2304      	movs	r3, #4
 8003622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003626:	e0d0      	b.n	80037ca <UART_SetConfig+0x2e6>
 8003628:	2308      	movs	r3, #8
 800362a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362e:	e0cc      	b.n	80037ca <UART_SetConfig+0x2e6>
 8003630:	2310      	movs	r3, #16
 8003632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003636:	e0c8      	b.n	80037ca <UART_SetConfig+0x2e6>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a5e      	ldr	r2, [pc, #376]	; (80037b8 <UART_SetConfig+0x2d4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d125      	bne.n	800368e <UART_SetConfig+0x1aa>
 8003642:	4b5b      	ldr	r3, [pc, #364]	; (80037b0 <UART_SetConfig+0x2cc>)
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003648:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800364c:	2b30      	cmp	r3, #48	; 0x30
 800364e:	d016      	beq.n	800367e <UART_SetConfig+0x19a>
 8003650:	2b30      	cmp	r3, #48	; 0x30
 8003652:	d818      	bhi.n	8003686 <UART_SetConfig+0x1a2>
 8003654:	2b20      	cmp	r3, #32
 8003656:	d00a      	beq.n	800366e <UART_SetConfig+0x18a>
 8003658:	2b20      	cmp	r3, #32
 800365a:	d814      	bhi.n	8003686 <UART_SetConfig+0x1a2>
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <UART_SetConfig+0x182>
 8003660:	2b10      	cmp	r3, #16
 8003662:	d008      	beq.n	8003676 <UART_SetConfig+0x192>
 8003664:	e00f      	b.n	8003686 <UART_SetConfig+0x1a2>
 8003666:	2300      	movs	r3, #0
 8003668:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800366c:	e0ad      	b.n	80037ca <UART_SetConfig+0x2e6>
 800366e:	2302      	movs	r3, #2
 8003670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003674:	e0a9      	b.n	80037ca <UART_SetConfig+0x2e6>
 8003676:	2304      	movs	r3, #4
 8003678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367c:	e0a5      	b.n	80037ca <UART_SetConfig+0x2e6>
 800367e:	2308      	movs	r3, #8
 8003680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003684:	e0a1      	b.n	80037ca <UART_SetConfig+0x2e6>
 8003686:	2310      	movs	r3, #16
 8003688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800368c:	e09d      	b.n	80037ca <UART_SetConfig+0x2e6>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a4a      	ldr	r2, [pc, #296]	; (80037bc <UART_SetConfig+0x2d8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d125      	bne.n	80036e4 <UART_SetConfig+0x200>
 8003698:	4b45      	ldr	r3, [pc, #276]	; (80037b0 <UART_SetConfig+0x2cc>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036a2:	2bc0      	cmp	r3, #192	; 0xc0
 80036a4:	d016      	beq.n	80036d4 <UART_SetConfig+0x1f0>
 80036a6:	2bc0      	cmp	r3, #192	; 0xc0
 80036a8:	d818      	bhi.n	80036dc <UART_SetConfig+0x1f8>
 80036aa:	2b80      	cmp	r3, #128	; 0x80
 80036ac:	d00a      	beq.n	80036c4 <UART_SetConfig+0x1e0>
 80036ae:	2b80      	cmp	r3, #128	; 0x80
 80036b0:	d814      	bhi.n	80036dc <UART_SetConfig+0x1f8>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <UART_SetConfig+0x1d8>
 80036b6:	2b40      	cmp	r3, #64	; 0x40
 80036b8:	d008      	beq.n	80036cc <UART_SetConfig+0x1e8>
 80036ba:	e00f      	b.n	80036dc <UART_SetConfig+0x1f8>
 80036bc:	2300      	movs	r3, #0
 80036be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036c2:	e082      	b.n	80037ca <UART_SetConfig+0x2e6>
 80036c4:	2302      	movs	r3, #2
 80036c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ca:	e07e      	b.n	80037ca <UART_SetConfig+0x2e6>
 80036cc:	2304      	movs	r3, #4
 80036ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d2:	e07a      	b.n	80037ca <UART_SetConfig+0x2e6>
 80036d4:	2308      	movs	r3, #8
 80036d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036da:	e076      	b.n	80037ca <UART_SetConfig+0x2e6>
 80036dc:	2310      	movs	r3, #16
 80036de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e2:	e072      	b.n	80037ca <UART_SetConfig+0x2e6>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a35      	ldr	r2, [pc, #212]	; (80037c0 <UART_SetConfig+0x2dc>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d12a      	bne.n	8003744 <UART_SetConfig+0x260>
 80036ee:	4b30      	ldr	r3, [pc, #192]	; (80037b0 <UART_SetConfig+0x2cc>)
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036fc:	d01a      	beq.n	8003734 <UART_SetConfig+0x250>
 80036fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003702:	d81b      	bhi.n	800373c <UART_SetConfig+0x258>
 8003704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003708:	d00c      	beq.n	8003724 <UART_SetConfig+0x240>
 800370a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800370e:	d815      	bhi.n	800373c <UART_SetConfig+0x258>
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <UART_SetConfig+0x238>
 8003714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003718:	d008      	beq.n	800372c <UART_SetConfig+0x248>
 800371a:	e00f      	b.n	800373c <UART_SetConfig+0x258>
 800371c:	2300      	movs	r3, #0
 800371e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003722:	e052      	b.n	80037ca <UART_SetConfig+0x2e6>
 8003724:	2302      	movs	r3, #2
 8003726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800372a:	e04e      	b.n	80037ca <UART_SetConfig+0x2e6>
 800372c:	2304      	movs	r3, #4
 800372e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003732:	e04a      	b.n	80037ca <UART_SetConfig+0x2e6>
 8003734:	2308      	movs	r3, #8
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800373a:	e046      	b.n	80037ca <UART_SetConfig+0x2e6>
 800373c:	2310      	movs	r3, #16
 800373e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003742:	e042      	b.n	80037ca <UART_SetConfig+0x2e6>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a17      	ldr	r2, [pc, #92]	; (80037a8 <UART_SetConfig+0x2c4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d13a      	bne.n	80037c4 <UART_SetConfig+0x2e0>
 800374e:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <UART_SetConfig+0x2cc>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003754:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003758:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800375c:	d01a      	beq.n	8003794 <UART_SetConfig+0x2b0>
 800375e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003762:	d81b      	bhi.n	800379c <UART_SetConfig+0x2b8>
 8003764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003768:	d00c      	beq.n	8003784 <UART_SetConfig+0x2a0>
 800376a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800376e:	d815      	bhi.n	800379c <UART_SetConfig+0x2b8>
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <UART_SetConfig+0x298>
 8003774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003778:	d008      	beq.n	800378c <UART_SetConfig+0x2a8>
 800377a:	e00f      	b.n	800379c <UART_SetConfig+0x2b8>
 800377c:	2300      	movs	r3, #0
 800377e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003782:	e022      	b.n	80037ca <UART_SetConfig+0x2e6>
 8003784:	2302      	movs	r3, #2
 8003786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378a:	e01e      	b.n	80037ca <UART_SetConfig+0x2e6>
 800378c:	2304      	movs	r3, #4
 800378e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003792:	e01a      	b.n	80037ca <UART_SetConfig+0x2e6>
 8003794:	2308      	movs	r3, #8
 8003796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379a:	e016      	b.n	80037ca <UART_SetConfig+0x2e6>
 800379c:	2310      	movs	r3, #16
 800379e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a2:	e012      	b.n	80037ca <UART_SetConfig+0x2e6>
 80037a4:	efff69f3 	.word	0xefff69f3
 80037a8:	40008000 	.word	0x40008000
 80037ac:	40013800 	.word	0x40013800
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40004400 	.word	0x40004400
 80037b8:	40004800 	.word	0x40004800
 80037bc:	40004c00 	.word	0x40004c00
 80037c0:	40005000 	.word	0x40005000
 80037c4:	2310      	movs	r3, #16
 80037c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a9f      	ldr	r2, [pc, #636]	; (8003a4c <UART_SetConfig+0x568>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d17a      	bne.n	80038ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d824      	bhi.n	8003826 <UART_SetConfig+0x342>
 80037dc:	a201      	add	r2, pc, #4	; (adr r2, 80037e4 <UART_SetConfig+0x300>)
 80037de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e2:	bf00      	nop
 80037e4:	08003809 	.word	0x08003809
 80037e8:	08003827 	.word	0x08003827
 80037ec:	08003811 	.word	0x08003811
 80037f0:	08003827 	.word	0x08003827
 80037f4:	08003817 	.word	0x08003817
 80037f8:	08003827 	.word	0x08003827
 80037fc:	08003827 	.word	0x08003827
 8003800:	08003827 	.word	0x08003827
 8003804:	0800381f 	.word	0x0800381f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003808:	f7fe ff82 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 800380c:	61f8      	str	r0, [r7, #28]
        break;
 800380e:	e010      	b.n	8003832 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003810:	4b8f      	ldr	r3, [pc, #572]	; (8003a50 <UART_SetConfig+0x56c>)
 8003812:	61fb      	str	r3, [r7, #28]
        break;
 8003814:	e00d      	b.n	8003832 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003816:	f7fe fee3 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 800381a:	61f8      	str	r0, [r7, #28]
        break;
 800381c:	e009      	b.n	8003832 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800381e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003822:	61fb      	str	r3, [r7, #28]
        break;
 8003824:	e005      	b.n	8003832 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003830:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80fb 	beq.w	8003a30 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	4413      	add	r3, r2
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	429a      	cmp	r2, r3
 8003848:	d305      	bcc.n	8003856 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003850:	69fa      	ldr	r2, [r7, #28]
 8003852:	429a      	cmp	r2, r3
 8003854:	d903      	bls.n	800385e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800385c:	e0e8      	b.n	8003a30 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	2200      	movs	r2, #0
 8003862:	461c      	mov	r4, r3
 8003864:	4615      	mov	r5, r2
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	022b      	lsls	r3, r5, #8
 8003870:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003874:	0222      	lsls	r2, r4, #8
 8003876:	68f9      	ldr	r1, [r7, #12]
 8003878:	6849      	ldr	r1, [r1, #4]
 800387a:	0849      	lsrs	r1, r1, #1
 800387c:	2000      	movs	r0, #0
 800387e:	4688      	mov	r8, r1
 8003880:	4681      	mov	r9, r0
 8003882:	eb12 0a08 	adds.w	sl, r2, r8
 8003886:	eb43 0b09 	adc.w	fp, r3, r9
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	603b      	str	r3, [r7, #0]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003898:	4650      	mov	r0, sl
 800389a:	4659      	mov	r1, fp
 800389c:	f7fd f994 	bl	8000bc8 <__aeabi_uldivmod>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4613      	mov	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ae:	d308      	bcc.n	80038c2 <UART_SetConfig+0x3de>
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b6:	d204      	bcs.n	80038c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	60da      	str	r2, [r3, #12]
 80038c0:	e0b6      	b.n	8003a30 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038c8:	e0b2      	b.n	8003a30 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d2:	d15e      	bne.n	8003992 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80038d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d828      	bhi.n	800392e <UART_SetConfig+0x44a>
 80038dc:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <UART_SetConfig+0x400>)
 80038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	08003909 	.word	0x08003909
 80038e8:	08003911 	.word	0x08003911
 80038ec:	08003919 	.word	0x08003919
 80038f0:	0800392f 	.word	0x0800392f
 80038f4:	0800391f 	.word	0x0800391f
 80038f8:	0800392f 	.word	0x0800392f
 80038fc:	0800392f 	.word	0x0800392f
 8003900:	0800392f 	.word	0x0800392f
 8003904:	08003927 	.word	0x08003927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003908:	f7fe ff02 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 800390c:	61f8      	str	r0, [r7, #28]
        break;
 800390e:	e014      	b.n	800393a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003910:	f7fe ff14 	bl	800273c <HAL_RCC_GetPCLK2Freq>
 8003914:	61f8      	str	r0, [r7, #28]
        break;
 8003916:	e010      	b.n	800393a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003918:	4b4d      	ldr	r3, [pc, #308]	; (8003a50 <UART_SetConfig+0x56c>)
 800391a:	61fb      	str	r3, [r7, #28]
        break;
 800391c:	e00d      	b.n	800393a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800391e:	f7fe fe5f 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8003922:	61f8      	str	r0, [r7, #28]
        break;
 8003924:	e009      	b.n	800393a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800392a:	61fb      	str	r3, [r7, #28]
        break;
 800392c:	e005      	b.n	800393a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003938:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d077      	beq.n	8003a30 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	005a      	lsls	r2, r3, #1
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	085b      	lsrs	r3, r3, #1
 800394a:	441a      	add	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b0f      	cmp	r3, #15
 800395a:	d916      	bls.n	800398a <UART_SetConfig+0x4a6>
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003962:	d212      	bcs.n	800398a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	b29b      	uxth	r3, r3
 8003968:	f023 030f 	bic.w	r3, r3, #15
 800396c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	085b      	lsrs	r3, r3, #1
 8003972:	b29b      	uxth	r3, r3
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	b29a      	uxth	r2, r3
 800397a:	8afb      	ldrh	r3, [r7, #22]
 800397c:	4313      	orrs	r3, r2
 800397e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	8afa      	ldrh	r2, [r7, #22]
 8003986:	60da      	str	r2, [r3, #12]
 8003988:	e052      	b.n	8003a30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003990:	e04e      	b.n	8003a30 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003992:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003996:	2b08      	cmp	r3, #8
 8003998:	d827      	bhi.n	80039ea <UART_SetConfig+0x506>
 800399a:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <UART_SetConfig+0x4bc>)
 800399c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a0:	080039c5 	.word	0x080039c5
 80039a4:	080039cd 	.word	0x080039cd
 80039a8:	080039d5 	.word	0x080039d5
 80039ac:	080039eb 	.word	0x080039eb
 80039b0:	080039db 	.word	0x080039db
 80039b4:	080039eb 	.word	0x080039eb
 80039b8:	080039eb 	.word	0x080039eb
 80039bc:	080039eb 	.word	0x080039eb
 80039c0:	080039e3 	.word	0x080039e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c4:	f7fe fea4 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 80039c8:	61f8      	str	r0, [r7, #28]
        break;
 80039ca:	e014      	b.n	80039f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039cc:	f7fe feb6 	bl	800273c <HAL_RCC_GetPCLK2Freq>
 80039d0:	61f8      	str	r0, [r7, #28]
        break;
 80039d2:	e010      	b.n	80039f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039d4:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <UART_SetConfig+0x56c>)
 80039d6:	61fb      	str	r3, [r7, #28]
        break;
 80039d8:	e00d      	b.n	80039f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039da:	f7fe fe01 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 80039de:	61f8      	str	r0, [r7, #28]
        break;
 80039e0:	e009      	b.n	80039f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039e6:	61fb      	str	r3, [r7, #28]
        break;
 80039e8:	e005      	b.n	80039f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039f4:	bf00      	nop
    }

    if (pclk != 0U)
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d019      	beq.n	8003a30 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	085a      	lsrs	r2, r3, #1
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	441a      	add	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b0f      	cmp	r3, #15
 8003a14:	d909      	bls.n	8003a2a <UART_SetConfig+0x546>
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1c:	d205      	bcs.n	8003a2a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60da      	str	r2, [r3, #12]
 8003a28:	e002      	b.n	8003a30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3728      	adds	r7, #40	; 0x28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40008000 	.word	0x40008000
 8003a50:	00f42400 	.word	0x00f42400

08003a54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00a      	beq.n	8003a7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d01a      	beq.n	8003b6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b52:	d10a      	bne.n	8003b6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	605a      	str	r2, [r3, #4]
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b098      	sub	sp, #96	; 0x60
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ba8:	f7fd fd26 	bl	80015f8 <HAL_GetTick>
 8003bac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d12e      	bne.n	8003c1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f88c 	bl	8003ce8 <UART_WaitOnFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d021      	beq.n	8003c1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bea:	653b      	str	r3, [r7, #80]	; 0x50
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8003bf6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e6      	bne.n	8003bd6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e062      	b.n	8003ce0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d149      	bne.n	8003cbc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c30:	2200      	movs	r2, #0
 8003c32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f856 	bl	8003ce8 <UART_WaitOnFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d03c      	beq.n	8003cbc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	e853 3f00 	ldrex	r3, [r3]
 8003c4e:	623b      	str	r3, [r7, #32]
   return(result);
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c60:	633b      	str	r3, [r7, #48]	; 0x30
 8003c62:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c68:	e841 2300 	strex	r3, r2, [r1]
 8003c6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1e6      	bne.n	8003c42 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3308      	adds	r3, #8
 8003c7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0301 	bic.w	r3, r3, #1
 8003c8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3308      	adds	r3, #8
 8003c92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c94:	61fa      	str	r2, [r7, #28]
 8003c96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	69b9      	ldr	r1, [r7, #24]
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	e841 2300 	strex	r3, r2, [r1]
 8003ca0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e5      	bne.n	8003c74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e011      	b.n	8003ce0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3758      	adds	r7, #88	; 0x58
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf8:	e049      	b.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d00:	d045      	beq.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d02:	f7fd fc79 	bl	80015f8 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d302      	bcc.n	8003d18 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e048      	b.n	8003dae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d031      	beq.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d110      	bne.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2208      	movs	r2, #8
 8003d3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f838 	bl	8003db6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2208      	movs	r2, #8
 8003d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e029      	b.n	8003dae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d68:	d111      	bne.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f81e 	bl	8003db6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e00f      	b.n	8003dae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4013      	ands	r3, r2
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	bf0c      	ite	eq
 8003d9e:	2301      	moveq	r3, #1
 8003da0:	2300      	movne	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	461a      	mov	r2, r3
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d0a6      	beq.n	8003cfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b095      	sub	sp, #84	; 0x54
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ddc:	643b      	str	r3, [r7, #64]	; 0x40
 8003dde:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003de2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003de4:	e841 2300 	strex	r3, r2, [r1]
 8003de8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e6      	bne.n	8003dbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3308      	adds	r3, #8
 8003df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	e853 3f00 	ldrex	r3, [r3]
 8003dfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f023 0301 	bic.w	r3, r3, #1
 8003e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e18:	e841 2300 	strex	r3, r2, [r1]
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e5      	bne.n	8003df0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d118      	bne.n	8003e5e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f023 0310 	bic.w	r3, r3, #16
 8003e40:	647b      	str	r3, [r7, #68]	; 0x44
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e4a:	61bb      	str	r3, [r7, #24]
 8003e4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	6979      	ldr	r1, [r7, #20]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	613b      	str	r3, [r7, #16]
   return(result);
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e6      	bne.n	8003e2c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e72:	bf00      	nop
 8003e74:	3754      	adds	r7, #84	; 0x54
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <__cvt>:
 8003e7e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e82:	ec55 4b10 	vmov	r4, r5, d0
 8003e86:	2d00      	cmp	r5, #0
 8003e88:	460e      	mov	r6, r1
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	462b      	mov	r3, r5
 8003e8e:	bfbb      	ittet	lt
 8003e90:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003e94:	461d      	movlt	r5, r3
 8003e96:	2300      	movge	r3, #0
 8003e98:	232d      	movlt	r3, #45	; 0x2d
 8003e9a:	700b      	strb	r3, [r1, #0]
 8003e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e9e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003ea2:	4691      	mov	r9, r2
 8003ea4:	f023 0820 	bic.w	r8, r3, #32
 8003ea8:	bfbc      	itt	lt
 8003eaa:	4622      	movlt	r2, r4
 8003eac:	4614      	movlt	r4, r2
 8003eae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003eb2:	d005      	beq.n	8003ec0 <__cvt+0x42>
 8003eb4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003eb8:	d100      	bne.n	8003ebc <__cvt+0x3e>
 8003eba:	3601      	adds	r6, #1
 8003ebc:	2102      	movs	r1, #2
 8003ebe:	e000      	b.n	8003ec2 <__cvt+0x44>
 8003ec0:	2103      	movs	r1, #3
 8003ec2:	ab03      	add	r3, sp, #12
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	ab02      	add	r3, sp, #8
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	ec45 4b10 	vmov	d0, r4, r5
 8003ece:	4653      	mov	r3, sl
 8003ed0:	4632      	mov	r2, r6
 8003ed2:	f000 fe5d 	bl	8004b90 <_dtoa_r>
 8003ed6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003eda:	4607      	mov	r7, r0
 8003edc:	d102      	bne.n	8003ee4 <__cvt+0x66>
 8003ede:	f019 0f01 	tst.w	r9, #1
 8003ee2:	d022      	beq.n	8003f2a <__cvt+0xac>
 8003ee4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ee8:	eb07 0906 	add.w	r9, r7, r6
 8003eec:	d110      	bne.n	8003f10 <__cvt+0x92>
 8003eee:	783b      	ldrb	r3, [r7, #0]
 8003ef0:	2b30      	cmp	r3, #48	; 0x30
 8003ef2:	d10a      	bne.n	8003f0a <__cvt+0x8c>
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	4620      	mov	r0, r4
 8003efa:	4629      	mov	r1, r5
 8003efc:	f7fc fdf4 	bl	8000ae8 <__aeabi_dcmpeq>
 8003f00:	b918      	cbnz	r0, 8003f0a <__cvt+0x8c>
 8003f02:	f1c6 0601 	rsb	r6, r6, #1
 8003f06:	f8ca 6000 	str.w	r6, [sl]
 8003f0a:	f8da 3000 	ldr.w	r3, [sl]
 8003f0e:	4499      	add	r9, r3
 8003f10:	2200      	movs	r2, #0
 8003f12:	2300      	movs	r3, #0
 8003f14:	4620      	mov	r0, r4
 8003f16:	4629      	mov	r1, r5
 8003f18:	f7fc fde6 	bl	8000ae8 <__aeabi_dcmpeq>
 8003f1c:	b108      	cbz	r0, 8003f22 <__cvt+0xa4>
 8003f1e:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f22:	2230      	movs	r2, #48	; 0x30
 8003f24:	9b03      	ldr	r3, [sp, #12]
 8003f26:	454b      	cmp	r3, r9
 8003f28:	d307      	bcc.n	8003f3a <__cvt+0xbc>
 8003f2a:	9b03      	ldr	r3, [sp, #12]
 8003f2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f2e:	1bdb      	subs	r3, r3, r7
 8003f30:	4638      	mov	r0, r7
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	b004      	add	sp, #16
 8003f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f3a:	1c59      	adds	r1, r3, #1
 8003f3c:	9103      	str	r1, [sp, #12]
 8003f3e:	701a      	strb	r2, [r3, #0]
 8003f40:	e7f0      	b.n	8003f24 <__cvt+0xa6>

08003f42 <__exponent>:
 8003f42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f44:	4603      	mov	r3, r0
 8003f46:	2900      	cmp	r1, #0
 8003f48:	bfb8      	it	lt
 8003f4a:	4249      	neglt	r1, r1
 8003f4c:	f803 2b02 	strb.w	r2, [r3], #2
 8003f50:	bfb4      	ite	lt
 8003f52:	222d      	movlt	r2, #45	; 0x2d
 8003f54:	222b      	movge	r2, #43	; 0x2b
 8003f56:	2909      	cmp	r1, #9
 8003f58:	7042      	strb	r2, [r0, #1]
 8003f5a:	dd2a      	ble.n	8003fb2 <__exponent+0x70>
 8003f5c:	f10d 0207 	add.w	r2, sp, #7
 8003f60:	4617      	mov	r7, r2
 8003f62:	260a      	movs	r6, #10
 8003f64:	4694      	mov	ip, r2
 8003f66:	fb91 f5f6 	sdiv	r5, r1, r6
 8003f6a:	fb06 1415 	mls	r4, r6, r5, r1
 8003f6e:	3430      	adds	r4, #48	; 0x30
 8003f70:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003f74:	460c      	mov	r4, r1
 8003f76:	2c63      	cmp	r4, #99	; 0x63
 8003f78:	f102 32ff 	add.w	r2, r2, #4294967295
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	dcf1      	bgt.n	8003f64 <__exponent+0x22>
 8003f80:	3130      	adds	r1, #48	; 0x30
 8003f82:	f1ac 0402 	sub.w	r4, ip, #2
 8003f86:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003f8a:	1c41      	adds	r1, r0, #1
 8003f8c:	4622      	mov	r2, r4
 8003f8e:	42ba      	cmp	r2, r7
 8003f90:	d30a      	bcc.n	8003fa8 <__exponent+0x66>
 8003f92:	f10d 0209 	add.w	r2, sp, #9
 8003f96:	eba2 020c 	sub.w	r2, r2, ip
 8003f9a:	42bc      	cmp	r4, r7
 8003f9c:	bf88      	it	hi
 8003f9e:	2200      	movhi	r2, #0
 8003fa0:	4413      	add	r3, r2
 8003fa2:	1a18      	subs	r0, r3, r0
 8003fa4:	b003      	add	sp, #12
 8003fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fa8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003fac:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003fb0:	e7ed      	b.n	8003f8e <__exponent+0x4c>
 8003fb2:	2330      	movs	r3, #48	; 0x30
 8003fb4:	3130      	adds	r1, #48	; 0x30
 8003fb6:	7083      	strb	r3, [r0, #2]
 8003fb8:	70c1      	strb	r1, [r0, #3]
 8003fba:	1d03      	adds	r3, r0, #4
 8003fbc:	e7f1      	b.n	8003fa2 <__exponent+0x60>
	...

08003fc0 <_printf_float>:
 8003fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc4:	ed2d 8b02 	vpush	{d8}
 8003fc8:	b08d      	sub	sp, #52	; 0x34
 8003fca:	460c      	mov	r4, r1
 8003fcc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003fd0:	4616      	mov	r6, r2
 8003fd2:	461f      	mov	r7, r3
 8003fd4:	4605      	mov	r5, r0
 8003fd6:	f000 fcd9 	bl	800498c <_localeconv_r>
 8003fda:	f8d0 a000 	ldr.w	sl, [r0]
 8003fde:	4650      	mov	r0, sl
 8003fe0:	f7fc f956 	bl	8000290 <strlen>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	9305      	str	r3, [sp, #20]
 8003fec:	f8d8 3000 	ldr.w	r3, [r8]
 8003ff0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003ff4:	3307      	adds	r3, #7
 8003ff6:	f023 0307 	bic.w	r3, r3, #7
 8003ffa:	f103 0208 	add.w	r2, r3, #8
 8003ffe:	f8c8 2000 	str.w	r2, [r8]
 8004002:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004006:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800400a:	9307      	str	r3, [sp, #28]
 800400c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004010:	ee08 0a10 	vmov	s16, r0
 8004014:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004018:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800401c:	4b9e      	ldr	r3, [pc, #632]	; (8004298 <_printf_float+0x2d8>)
 800401e:	f04f 32ff 	mov.w	r2, #4294967295
 8004022:	f7fc fd93 	bl	8000b4c <__aeabi_dcmpun>
 8004026:	bb88      	cbnz	r0, 800408c <_printf_float+0xcc>
 8004028:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800402c:	4b9a      	ldr	r3, [pc, #616]	; (8004298 <_printf_float+0x2d8>)
 800402e:	f04f 32ff 	mov.w	r2, #4294967295
 8004032:	f7fc fd6d 	bl	8000b10 <__aeabi_dcmple>
 8004036:	bb48      	cbnz	r0, 800408c <_printf_float+0xcc>
 8004038:	2200      	movs	r2, #0
 800403a:	2300      	movs	r3, #0
 800403c:	4640      	mov	r0, r8
 800403e:	4649      	mov	r1, r9
 8004040:	f7fc fd5c 	bl	8000afc <__aeabi_dcmplt>
 8004044:	b110      	cbz	r0, 800404c <_printf_float+0x8c>
 8004046:	232d      	movs	r3, #45	; 0x2d
 8004048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800404c:	4a93      	ldr	r2, [pc, #588]	; (800429c <_printf_float+0x2dc>)
 800404e:	4b94      	ldr	r3, [pc, #592]	; (80042a0 <_printf_float+0x2e0>)
 8004050:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004054:	bf94      	ite	ls
 8004056:	4690      	movls	r8, r2
 8004058:	4698      	movhi	r8, r3
 800405a:	2303      	movs	r3, #3
 800405c:	6123      	str	r3, [r4, #16]
 800405e:	9b05      	ldr	r3, [sp, #20]
 8004060:	f023 0304 	bic.w	r3, r3, #4
 8004064:	6023      	str	r3, [r4, #0]
 8004066:	f04f 0900 	mov.w	r9, #0
 800406a:	9700      	str	r7, [sp, #0]
 800406c:	4633      	mov	r3, r6
 800406e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004070:	4621      	mov	r1, r4
 8004072:	4628      	mov	r0, r5
 8004074:	f000 f9da 	bl	800442c <_printf_common>
 8004078:	3001      	adds	r0, #1
 800407a:	f040 8090 	bne.w	800419e <_printf_float+0x1de>
 800407e:	f04f 30ff 	mov.w	r0, #4294967295
 8004082:	b00d      	add	sp, #52	; 0x34
 8004084:	ecbd 8b02 	vpop	{d8}
 8004088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408c:	4642      	mov	r2, r8
 800408e:	464b      	mov	r3, r9
 8004090:	4640      	mov	r0, r8
 8004092:	4649      	mov	r1, r9
 8004094:	f7fc fd5a 	bl	8000b4c <__aeabi_dcmpun>
 8004098:	b140      	cbz	r0, 80040ac <_printf_float+0xec>
 800409a:	464b      	mov	r3, r9
 800409c:	2b00      	cmp	r3, #0
 800409e:	bfbc      	itt	lt
 80040a0:	232d      	movlt	r3, #45	; 0x2d
 80040a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80040a6:	4a7f      	ldr	r2, [pc, #508]	; (80042a4 <_printf_float+0x2e4>)
 80040a8:	4b7f      	ldr	r3, [pc, #508]	; (80042a8 <_printf_float+0x2e8>)
 80040aa:	e7d1      	b.n	8004050 <_printf_float+0x90>
 80040ac:	6863      	ldr	r3, [r4, #4]
 80040ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80040b2:	9206      	str	r2, [sp, #24]
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	d13f      	bne.n	8004138 <_printf_float+0x178>
 80040b8:	2306      	movs	r3, #6
 80040ba:	6063      	str	r3, [r4, #4]
 80040bc:	9b05      	ldr	r3, [sp, #20]
 80040be:	6861      	ldr	r1, [r4, #4]
 80040c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80040c4:	2300      	movs	r3, #0
 80040c6:	9303      	str	r3, [sp, #12]
 80040c8:	ab0a      	add	r3, sp, #40	; 0x28
 80040ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80040ce:	ab09      	add	r3, sp, #36	; 0x24
 80040d0:	ec49 8b10 	vmov	d0, r8, r9
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	6022      	str	r2, [r4, #0]
 80040d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80040dc:	4628      	mov	r0, r5
 80040de:	f7ff fece 	bl	8003e7e <__cvt>
 80040e2:	9b06      	ldr	r3, [sp, #24]
 80040e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040e6:	2b47      	cmp	r3, #71	; 0x47
 80040e8:	4680      	mov	r8, r0
 80040ea:	d108      	bne.n	80040fe <_printf_float+0x13e>
 80040ec:	1cc8      	adds	r0, r1, #3
 80040ee:	db02      	blt.n	80040f6 <_printf_float+0x136>
 80040f0:	6863      	ldr	r3, [r4, #4]
 80040f2:	4299      	cmp	r1, r3
 80040f4:	dd41      	ble.n	800417a <_printf_float+0x1ba>
 80040f6:	f1ab 0302 	sub.w	r3, fp, #2
 80040fa:	fa5f fb83 	uxtb.w	fp, r3
 80040fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004102:	d820      	bhi.n	8004146 <_printf_float+0x186>
 8004104:	3901      	subs	r1, #1
 8004106:	465a      	mov	r2, fp
 8004108:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800410c:	9109      	str	r1, [sp, #36]	; 0x24
 800410e:	f7ff ff18 	bl	8003f42 <__exponent>
 8004112:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004114:	1813      	adds	r3, r2, r0
 8004116:	2a01      	cmp	r2, #1
 8004118:	4681      	mov	r9, r0
 800411a:	6123      	str	r3, [r4, #16]
 800411c:	dc02      	bgt.n	8004124 <_printf_float+0x164>
 800411e:	6822      	ldr	r2, [r4, #0]
 8004120:	07d2      	lsls	r2, r2, #31
 8004122:	d501      	bpl.n	8004128 <_printf_float+0x168>
 8004124:	3301      	adds	r3, #1
 8004126:	6123      	str	r3, [r4, #16]
 8004128:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800412c:	2b00      	cmp	r3, #0
 800412e:	d09c      	beq.n	800406a <_printf_float+0xaa>
 8004130:	232d      	movs	r3, #45	; 0x2d
 8004132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004136:	e798      	b.n	800406a <_printf_float+0xaa>
 8004138:	9a06      	ldr	r2, [sp, #24]
 800413a:	2a47      	cmp	r2, #71	; 0x47
 800413c:	d1be      	bne.n	80040bc <_printf_float+0xfc>
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1bc      	bne.n	80040bc <_printf_float+0xfc>
 8004142:	2301      	movs	r3, #1
 8004144:	e7b9      	b.n	80040ba <_printf_float+0xfa>
 8004146:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800414a:	d118      	bne.n	800417e <_printf_float+0x1be>
 800414c:	2900      	cmp	r1, #0
 800414e:	6863      	ldr	r3, [r4, #4]
 8004150:	dd0b      	ble.n	800416a <_printf_float+0x1aa>
 8004152:	6121      	str	r1, [r4, #16]
 8004154:	b913      	cbnz	r3, 800415c <_printf_float+0x19c>
 8004156:	6822      	ldr	r2, [r4, #0]
 8004158:	07d0      	lsls	r0, r2, #31
 800415a:	d502      	bpl.n	8004162 <_printf_float+0x1a2>
 800415c:	3301      	adds	r3, #1
 800415e:	440b      	add	r3, r1
 8004160:	6123      	str	r3, [r4, #16]
 8004162:	65a1      	str	r1, [r4, #88]	; 0x58
 8004164:	f04f 0900 	mov.w	r9, #0
 8004168:	e7de      	b.n	8004128 <_printf_float+0x168>
 800416a:	b913      	cbnz	r3, 8004172 <_printf_float+0x1b2>
 800416c:	6822      	ldr	r2, [r4, #0]
 800416e:	07d2      	lsls	r2, r2, #31
 8004170:	d501      	bpl.n	8004176 <_printf_float+0x1b6>
 8004172:	3302      	adds	r3, #2
 8004174:	e7f4      	b.n	8004160 <_printf_float+0x1a0>
 8004176:	2301      	movs	r3, #1
 8004178:	e7f2      	b.n	8004160 <_printf_float+0x1a0>
 800417a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800417e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004180:	4299      	cmp	r1, r3
 8004182:	db05      	blt.n	8004190 <_printf_float+0x1d0>
 8004184:	6823      	ldr	r3, [r4, #0]
 8004186:	6121      	str	r1, [r4, #16]
 8004188:	07d8      	lsls	r0, r3, #31
 800418a:	d5ea      	bpl.n	8004162 <_printf_float+0x1a2>
 800418c:	1c4b      	adds	r3, r1, #1
 800418e:	e7e7      	b.n	8004160 <_printf_float+0x1a0>
 8004190:	2900      	cmp	r1, #0
 8004192:	bfd4      	ite	le
 8004194:	f1c1 0202 	rsble	r2, r1, #2
 8004198:	2201      	movgt	r2, #1
 800419a:	4413      	add	r3, r2
 800419c:	e7e0      	b.n	8004160 <_printf_float+0x1a0>
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	055a      	lsls	r2, r3, #21
 80041a2:	d407      	bmi.n	80041b4 <_printf_float+0x1f4>
 80041a4:	6923      	ldr	r3, [r4, #16]
 80041a6:	4642      	mov	r2, r8
 80041a8:	4631      	mov	r1, r6
 80041aa:	4628      	mov	r0, r5
 80041ac:	47b8      	blx	r7
 80041ae:	3001      	adds	r0, #1
 80041b0:	d12c      	bne.n	800420c <_printf_float+0x24c>
 80041b2:	e764      	b.n	800407e <_printf_float+0xbe>
 80041b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80041b8:	f240 80e0 	bls.w	800437c <_printf_float+0x3bc>
 80041bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041c0:	2200      	movs	r2, #0
 80041c2:	2300      	movs	r3, #0
 80041c4:	f7fc fc90 	bl	8000ae8 <__aeabi_dcmpeq>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d034      	beq.n	8004236 <_printf_float+0x276>
 80041cc:	4a37      	ldr	r2, [pc, #220]	; (80042ac <_printf_float+0x2ec>)
 80041ce:	2301      	movs	r3, #1
 80041d0:	4631      	mov	r1, r6
 80041d2:	4628      	mov	r0, r5
 80041d4:	47b8      	blx	r7
 80041d6:	3001      	adds	r0, #1
 80041d8:	f43f af51 	beq.w	800407e <_printf_float+0xbe>
 80041dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041e0:	429a      	cmp	r2, r3
 80041e2:	db02      	blt.n	80041ea <_printf_float+0x22a>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	07d8      	lsls	r0, r3, #31
 80041e8:	d510      	bpl.n	800420c <_printf_float+0x24c>
 80041ea:	ee18 3a10 	vmov	r3, s16
 80041ee:	4652      	mov	r2, sl
 80041f0:	4631      	mov	r1, r6
 80041f2:	4628      	mov	r0, r5
 80041f4:	47b8      	blx	r7
 80041f6:	3001      	adds	r0, #1
 80041f8:	f43f af41 	beq.w	800407e <_printf_float+0xbe>
 80041fc:	f04f 0800 	mov.w	r8, #0
 8004200:	f104 091a 	add.w	r9, r4, #26
 8004204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004206:	3b01      	subs	r3, #1
 8004208:	4543      	cmp	r3, r8
 800420a:	dc09      	bgt.n	8004220 <_printf_float+0x260>
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	079b      	lsls	r3, r3, #30
 8004210:	f100 8107 	bmi.w	8004422 <_printf_float+0x462>
 8004214:	68e0      	ldr	r0, [r4, #12]
 8004216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004218:	4298      	cmp	r0, r3
 800421a:	bfb8      	it	lt
 800421c:	4618      	movlt	r0, r3
 800421e:	e730      	b.n	8004082 <_printf_float+0xc2>
 8004220:	2301      	movs	r3, #1
 8004222:	464a      	mov	r2, r9
 8004224:	4631      	mov	r1, r6
 8004226:	4628      	mov	r0, r5
 8004228:	47b8      	blx	r7
 800422a:	3001      	adds	r0, #1
 800422c:	f43f af27 	beq.w	800407e <_printf_float+0xbe>
 8004230:	f108 0801 	add.w	r8, r8, #1
 8004234:	e7e6      	b.n	8004204 <_printf_float+0x244>
 8004236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004238:	2b00      	cmp	r3, #0
 800423a:	dc39      	bgt.n	80042b0 <_printf_float+0x2f0>
 800423c:	4a1b      	ldr	r2, [pc, #108]	; (80042ac <_printf_float+0x2ec>)
 800423e:	2301      	movs	r3, #1
 8004240:	4631      	mov	r1, r6
 8004242:	4628      	mov	r0, r5
 8004244:	47b8      	blx	r7
 8004246:	3001      	adds	r0, #1
 8004248:	f43f af19 	beq.w	800407e <_printf_float+0xbe>
 800424c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004250:	4313      	orrs	r3, r2
 8004252:	d102      	bne.n	800425a <_printf_float+0x29a>
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	07d9      	lsls	r1, r3, #31
 8004258:	d5d8      	bpl.n	800420c <_printf_float+0x24c>
 800425a:	ee18 3a10 	vmov	r3, s16
 800425e:	4652      	mov	r2, sl
 8004260:	4631      	mov	r1, r6
 8004262:	4628      	mov	r0, r5
 8004264:	47b8      	blx	r7
 8004266:	3001      	adds	r0, #1
 8004268:	f43f af09 	beq.w	800407e <_printf_float+0xbe>
 800426c:	f04f 0900 	mov.w	r9, #0
 8004270:	f104 0a1a 	add.w	sl, r4, #26
 8004274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004276:	425b      	negs	r3, r3
 8004278:	454b      	cmp	r3, r9
 800427a:	dc01      	bgt.n	8004280 <_printf_float+0x2c0>
 800427c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800427e:	e792      	b.n	80041a6 <_printf_float+0x1e6>
 8004280:	2301      	movs	r3, #1
 8004282:	4652      	mov	r2, sl
 8004284:	4631      	mov	r1, r6
 8004286:	4628      	mov	r0, r5
 8004288:	47b8      	blx	r7
 800428a:	3001      	adds	r0, #1
 800428c:	f43f aef7 	beq.w	800407e <_printf_float+0xbe>
 8004290:	f109 0901 	add.w	r9, r9, #1
 8004294:	e7ee      	b.n	8004274 <_printf_float+0x2b4>
 8004296:	bf00      	nop
 8004298:	7fefffff 	.word	0x7fefffff
 800429c:	080068a8 	.word	0x080068a8
 80042a0:	080068ac 	.word	0x080068ac
 80042a4:	080068b0 	.word	0x080068b0
 80042a8:	080068b4 	.word	0x080068b4
 80042ac:	080068b8 	.word	0x080068b8
 80042b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042b4:	429a      	cmp	r2, r3
 80042b6:	bfa8      	it	ge
 80042b8:	461a      	movge	r2, r3
 80042ba:	2a00      	cmp	r2, #0
 80042bc:	4691      	mov	r9, r2
 80042be:	dc37      	bgt.n	8004330 <_printf_float+0x370>
 80042c0:	f04f 0b00 	mov.w	fp, #0
 80042c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042c8:	f104 021a 	add.w	r2, r4, #26
 80042cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042ce:	9305      	str	r3, [sp, #20]
 80042d0:	eba3 0309 	sub.w	r3, r3, r9
 80042d4:	455b      	cmp	r3, fp
 80042d6:	dc33      	bgt.n	8004340 <_printf_float+0x380>
 80042d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042dc:	429a      	cmp	r2, r3
 80042de:	db3b      	blt.n	8004358 <_printf_float+0x398>
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	07da      	lsls	r2, r3, #31
 80042e4:	d438      	bmi.n	8004358 <_printf_float+0x398>
 80042e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80042ea:	eba2 0903 	sub.w	r9, r2, r3
 80042ee:	9b05      	ldr	r3, [sp, #20]
 80042f0:	1ad2      	subs	r2, r2, r3
 80042f2:	4591      	cmp	r9, r2
 80042f4:	bfa8      	it	ge
 80042f6:	4691      	movge	r9, r2
 80042f8:	f1b9 0f00 	cmp.w	r9, #0
 80042fc:	dc35      	bgt.n	800436a <_printf_float+0x3aa>
 80042fe:	f04f 0800 	mov.w	r8, #0
 8004302:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004306:	f104 0a1a 	add.w	sl, r4, #26
 800430a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800430e:	1a9b      	subs	r3, r3, r2
 8004310:	eba3 0309 	sub.w	r3, r3, r9
 8004314:	4543      	cmp	r3, r8
 8004316:	f77f af79 	ble.w	800420c <_printf_float+0x24c>
 800431a:	2301      	movs	r3, #1
 800431c:	4652      	mov	r2, sl
 800431e:	4631      	mov	r1, r6
 8004320:	4628      	mov	r0, r5
 8004322:	47b8      	blx	r7
 8004324:	3001      	adds	r0, #1
 8004326:	f43f aeaa 	beq.w	800407e <_printf_float+0xbe>
 800432a:	f108 0801 	add.w	r8, r8, #1
 800432e:	e7ec      	b.n	800430a <_printf_float+0x34a>
 8004330:	4613      	mov	r3, r2
 8004332:	4631      	mov	r1, r6
 8004334:	4642      	mov	r2, r8
 8004336:	4628      	mov	r0, r5
 8004338:	47b8      	blx	r7
 800433a:	3001      	adds	r0, #1
 800433c:	d1c0      	bne.n	80042c0 <_printf_float+0x300>
 800433e:	e69e      	b.n	800407e <_printf_float+0xbe>
 8004340:	2301      	movs	r3, #1
 8004342:	4631      	mov	r1, r6
 8004344:	4628      	mov	r0, r5
 8004346:	9205      	str	r2, [sp, #20]
 8004348:	47b8      	blx	r7
 800434a:	3001      	adds	r0, #1
 800434c:	f43f ae97 	beq.w	800407e <_printf_float+0xbe>
 8004350:	9a05      	ldr	r2, [sp, #20]
 8004352:	f10b 0b01 	add.w	fp, fp, #1
 8004356:	e7b9      	b.n	80042cc <_printf_float+0x30c>
 8004358:	ee18 3a10 	vmov	r3, s16
 800435c:	4652      	mov	r2, sl
 800435e:	4631      	mov	r1, r6
 8004360:	4628      	mov	r0, r5
 8004362:	47b8      	blx	r7
 8004364:	3001      	adds	r0, #1
 8004366:	d1be      	bne.n	80042e6 <_printf_float+0x326>
 8004368:	e689      	b.n	800407e <_printf_float+0xbe>
 800436a:	9a05      	ldr	r2, [sp, #20]
 800436c:	464b      	mov	r3, r9
 800436e:	4442      	add	r2, r8
 8004370:	4631      	mov	r1, r6
 8004372:	4628      	mov	r0, r5
 8004374:	47b8      	blx	r7
 8004376:	3001      	adds	r0, #1
 8004378:	d1c1      	bne.n	80042fe <_printf_float+0x33e>
 800437a:	e680      	b.n	800407e <_printf_float+0xbe>
 800437c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800437e:	2a01      	cmp	r2, #1
 8004380:	dc01      	bgt.n	8004386 <_printf_float+0x3c6>
 8004382:	07db      	lsls	r3, r3, #31
 8004384:	d53a      	bpl.n	80043fc <_printf_float+0x43c>
 8004386:	2301      	movs	r3, #1
 8004388:	4642      	mov	r2, r8
 800438a:	4631      	mov	r1, r6
 800438c:	4628      	mov	r0, r5
 800438e:	47b8      	blx	r7
 8004390:	3001      	adds	r0, #1
 8004392:	f43f ae74 	beq.w	800407e <_printf_float+0xbe>
 8004396:	ee18 3a10 	vmov	r3, s16
 800439a:	4652      	mov	r2, sl
 800439c:	4631      	mov	r1, r6
 800439e:	4628      	mov	r0, r5
 80043a0:	47b8      	blx	r7
 80043a2:	3001      	adds	r0, #1
 80043a4:	f43f ae6b 	beq.w	800407e <_printf_float+0xbe>
 80043a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043ac:	2200      	movs	r2, #0
 80043ae:	2300      	movs	r3, #0
 80043b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80043b4:	f7fc fb98 	bl	8000ae8 <__aeabi_dcmpeq>
 80043b8:	b9d8      	cbnz	r0, 80043f2 <_printf_float+0x432>
 80043ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 80043be:	f108 0201 	add.w	r2, r8, #1
 80043c2:	4631      	mov	r1, r6
 80043c4:	4628      	mov	r0, r5
 80043c6:	47b8      	blx	r7
 80043c8:	3001      	adds	r0, #1
 80043ca:	d10e      	bne.n	80043ea <_printf_float+0x42a>
 80043cc:	e657      	b.n	800407e <_printf_float+0xbe>
 80043ce:	2301      	movs	r3, #1
 80043d0:	4652      	mov	r2, sl
 80043d2:	4631      	mov	r1, r6
 80043d4:	4628      	mov	r0, r5
 80043d6:	47b8      	blx	r7
 80043d8:	3001      	adds	r0, #1
 80043da:	f43f ae50 	beq.w	800407e <_printf_float+0xbe>
 80043de:	f108 0801 	add.w	r8, r8, #1
 80043e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043e4:	3b01      	subs	r3, #1
 80043e6:	4543      	cmp	r3, r8
 80043e8:	dcf1      	bgt.n	80043ce <_printf_float+0x40e>
 80043ea:	464b      	mov	r3, r9
 80043ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80043f0:	e6da      	b.n	80041a8 <_printf_float+0x1e8>
 80043f2:	f04f 0800 	mov.w	r8, #0
 80043f6:	f104 0a1a 	add.w	sl, r4, #26
 80043fa:	e7f2      	b.n	80043e2 <_printf_float+0x422>
 80043fc:	2301      	movs	r3, #1
 80043fe:	4642      	mov	r2, r8
 8004400:	e7df      	b.n	80043c2 <_printf_float+0x402>
 8004402:	2301      	movs	r3, #1
 8004404:	464a      	mov	r2, r9
 8004406:	4631      	mov	r1, r6
 8004408:	4628      	mov	r0, r5
 800440a:	47b8      	blx	r7
 800440c:	3001      	adds	r0, #1
 800440e:	f43f ae36 	beq.w	800407e <_printf_float+0xbe>
 8004412:	f108 0801 	add.w	r8, r8, #1
 8004416:	68e3      	ldr	r3, [r4, #12]
 8004418:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800441a:	1a5b      	subs	r3, r3, r1
 800441c:	4543      	cmp	r3, r8
 800441e:	dcf0      	bgt.n	8004402 <_printf_float+0x442>
 8004420:	e6f8      	b.n	8004214 <_printf_float+0x254>
 8004422:	f04f 0800 	mov.w	r8, #0
 8004426:	f104 0919 	add.w	r9, r4, #25
 800442a:	e7f4      	b.n	8004416 <_printf_float+0x456>

0800442c <_printf_common>:
 800442c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004430:	4616      	mov	r6, r2
 8004432:	4699      	mov	r9, r3
 8004434:	688a      	ldr	r2, [r1, #8]
 8004436:	690b      	ldr	r3, [r1, #16]
 8004438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800443c:	4293      	cmp	r3, r2
 800443e:	bfb8      	it	lt
 8004440:	4613      	movlt	r3, r2
 8004442:	6033      	str	r3, [r6, #0]
 8004444:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004448:	4607      	mov	r7, r0
 800444a:	460c      	mov	r4, r1
 800444c:	b10a      	cbz	r2, 8004452 <_printf_common+0x26>
 800444e:	3301      	adds	r3, #1
 8004450:	6033      	str	r3, [r6, #0]
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	0699      	lsls	r1, r3, #26
 8004456:	bf42      	ittt	mi
 8004458:	6833      	ldrmi	r3, [r6, #0]
 800445a:	3302      	addmi	r3, #2
 800445c:	6033      	strmi	r3, [r6, #0]
 800445e:	6825      	ldr	r5, [r4, #0]
 8004460:	f015 0506 	ands.w	r5, r5, #6
 8004464:	d106      	bne.n	8004474 <_printf_common+0x48>
 8004466:	f104 0a19 	add.w	sl, r4, #25
 800446a:	68e3      	ldr	r3, [r4, #12]
 800446c:	6832      	ldr	r2, [r6, #0]
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	42ab      	cmp	r3, r5
 8004472:	dc26      	bgt.n	80044c2 <_printf_common+0x96>
 8004474:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004478:	1e13      	subs	r3, r2, #0
 800447a:	6822      	ldr	r2, [r4, #0]
 800447c:	bf18      	it	ne
 800447e:	2301      	movne	r3, #1
 8004480:	0692      	lsls	r2, r2, #26
 8004482:	d42b      	bmi.n	80044dc <_printf_common+0xb0>
 8004484:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004488:	4649      	mov	r1, r9
 800448a:	4638      	mov	r0, r7
 800448c:	47c0      	blx	r8
 800448e:	3001      	adds	r0, #1
 8004490:	d01e      	beq.n	80044d0 <_printf_common+0xa4>
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	6922      	ldr	r2, [r4, #16]
 8004496:	f003 0306 	and.w	r3, r3, #6
 800449a:	2b04      	cmp	r3, #4
 800449c:	bf02      	ittt	eq
 800449e:	68e5      	ldreq	r5, [r4, #12]
 80044a0:	6833      	ldreq	r3, [r6, #0]
 80044a2:	1aed      	subeq	r5, r5, r3
 80044a4:	68a3      	ldr	r3, [r4, #8]
 80044a6:	bf0c      	ite	eq
 80044a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044ac:	2500      	movne	r5, #0
 80044ae:	4293      	cmp	r3, r2
 80044b0:	bfc4      	itt	gt
 80044b2:	1a9b      	subgt	r3, r3, r2
 80044b4:	18ed      	addgt	r5, r5, r3
 80044b6:	2600      	movs	r6, #0
 80044b8:	341a      	adds	r4, #26
 80044ba:	42b5      	cmp	r5, r6
 80044bc:	d11a      	bne.n	80044f4 <_printf_common+0xc8>
 80044be:	2000      	movs	r0, #0
 80044c0:	e008      	b.n	80044d4 <_printf_common+0xa8>
 80044c2:	2301      	movs	r3, #1
 80044c4:	4652      	mov	r2, sl
 80044c6:	4649      	mov	r1, r9
 80044c8:	4638      	mov	r0, r7
 80044ca:	47c0      	blx	r8
 80044cc:	3001      	adds	r0, #1
 80044ce:	d103      	bne.n	80044d8 <_printf_common+0xac>
 80044d0:	f04f 30ff 	mov.w	r0, #4294967295
 80044d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d8:	3501      	adds	r5, #1
 80044da:	e7c6      	b.n	800446a <_printf_common+0x3e>
 80044dc:	18e1      	adds	r1, r4, r3
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	2030      	movs	r0, #48	; 0x30
 80044e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044e6:	4422      	add	r2, r4
 80044e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044f0:	3302      	adds	r3, #2
 80044f2:	e7c7      	b.n	8004484 <_printf_common+0x58>
 80044f4:	2301      	movs	r3, #1
 80044f6:	4622      	mov	r2, r4
 80044f8:	4649      	mov	r1, r9
 80044fa:	4638      	mov	r0, r7
 80044fc:	47c0      	blx	r8
 80044fe:	3001      	adds	r0, #1
 8004500:	d0e6      	beq.n	80044d0 <_printf_common+0xa4>
 8004502:	3601      	adds	r6, #1
 8004504:	e7d9      	b.n	80044ba <_printf_common+0x8e>
	...

08004508 <_printf_i>:
 8004508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800450c:	7e0f      	ldrb	r7, [r1, #24]
 800450e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004510:	2f78      	cmp	r7, #120	; 0x78
 8004512:	4691      	mov	r9, r2
 8004514:	4680      	mov	r8, r0
 8004516:	460c      	mov	r4, r1
 8004518:	469a      	mov	sl, r3
 800451a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800451e:	d807      	bhi.n	8004530 <_printf_i+0x28>
 8004520:	2f62      	cmp	r7, #98	; 0x62
 8004522:	d80a      	bhi.n	800453a <_printf_i+0x32>
 8004524:	2f00      	cmp	r7, #0
 8004526:	f000 80d4 	beq.w	80046d2 <_printf_i+0x1ca>
 800452a:	2f58      	cmp	r7, #88	; 0x58
 800452c:	f000 80c0 	beq.w	80046b0 <_printf_i+0x1a8>
 8004530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004534:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004538:	e03a      	b.n	80045b0 <_printf_i+0xa8>
 800453a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800453e:	2b15      	cmp	r3, #21
 8004540:	d8f6      	bhi.n	8004530 <_printf_i+0x28>
 8004542:	a101      	add	r1, pc, #4	; (adr r1, 8004548 <_printf_i+0x40>)
 8004544:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004548:	080045a1 	.word	0x080045a1
 800454c:	080045b5 	.word	0x080045b5
 8004550:	08004531 	.word	0x08004531
 8004554:	08004531 	.word	0x08004531
 8004558:	08004531 	.word	0x08004531
 800455c:	08004531 	.word	0x08004531
 8004560:	080045b5 	.word	0x080045b5
 8004564:	08004531 	.word	0x08004531
 8004568:	08004531 	.word	0x08004531
 800456c:	08004531 	.word	0x08004531
 8004570:	08004531 	.word	0x08004531
 8004574:	080046b9 	.word	0x080046b9
 8004578:	080045e1 	.word	0x080045e1
 800457c:	08004673 	.word	0x08004673
 8004580:	08004531 	.word	0x08004531
 8004584:	08004531 	.word	0x08004531
 8004588:	080046db 	.word	0x080046db
 800458c:	08004531 	.word	0x08004531
 8004590:	080045e1 	.word	0x080045e1
 8004594:	08004531 	.word	0x08004531
 8004598:	08004531 	.word	0x08004531
 800459c:	0800467b 	.word	0x0800467b
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	1d1a      	adds	r2, r3, #4
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	602a      	str	r2, [r5, #0]
 80045a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045b0:	2301      	movs	r3, #1
 80045b2:	e09f      	b.n	80046f4 <_printf_i+0x1ec>
 80045b4:	6820      	ldr	r0, [r4, #0]
 80045b6:	682b      	ldr	r3, [r5, #0]
 80045b8:	0607      	lsls	r7, r0, #24
 80045ba:	f103 0104 	add.w	r1, r3, #4
 80045be:	6029      	str	r1, [r5, #0]
 80045c0:	d501      	bpl.n	80045c6 <_printf_i+0xbe>
 80045c2:	681e      	ldr	r6, [r3, #0]
 80045c4:	e003      	b.n	80045ce <_printf_i+0xc6>
 80045c6:	0646      	lsls	r6, r0, #25
 80045c8:	d5fb      	bpl.n	80045c2 <_printf_i+0xba>
 80045ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80045ce:	2e00      	cmp	r6, #0
 80045d0:	da03      	bge.n	80045da <_printf_i+0xd2>
 80045d2:	232d      	movs	r3, #45	; 0x2d
 80045d4:	4276      	negs	r6, r6
 80045d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045da:	485a      	ldr	r0, [pc, #360]	; (8004744 <_printf_i+0x23c>)
 80045dc:	230a      	movs	r3, #10
 80045de:	e012      	b.n	8004606 <_printf_i+0xfe>
 80045e0:	682b      	ldr	r3, [r5, #0]
 80045e2:	6820      	ldr	r0, [r4, #0]
 80045e4:	1d19      	adds	r1, r3, #4
 80045e6:	6029      	str	r1, [r5, #0]
 80045e8:	0605      	lsls	r5, r0, #24
 80045ea:	d501      	bpl.n	80045f0 <_printf_i+0xe8>
 80045ec:	681e      	ldr	r6, [r3, #0]
 80045ee:	e002      	b.n	80045f6 <_printf_i+0xee>
 80045f0:	0641      	lsls	r1, r0, #25
 80045f2:	d5fb      	bpl.n	80045ec <_printf_i+0xe4>
 80045f4:	881e      	ldrh	r6, [r3, #0]
 80045f6:	4853      	ldr	r0, [pc, #332]	; (8004744 <_printf_i+0x23c>)
 80045f8:	2f6f      	cmp	r7, #111	; 0x6f
 80045fa:	bf0c      	ite	eq
 80045fc:	2308      	moveq	r3, #8
 80045fe:	230a      	movne	r3, #10
 8004600:	2100      	movs	r1, #0
 8004602:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004606:	6865      	ldr	r5, [r4, #4]
 8004608:	60a5      	str	r5, [r4, #8]
 800460a:	2d00      	cmp	r5, #0
 800460c:	bfa2      	ittt	ge
 800460e:	6821      	ldrge	r1, [r4, #0]
 8004610:	f021 0104 	bicge.w	r1, r1, #4
 8004614:	6021      	strge	r1, [r4, #0]
 8004616:	b90e      	cbnz	r6, 800461c <_printf_i+0x114>
 8004618:	2d00      	cmp	r5, #0
 800461a:	d04b      	beq.n	80046b4 <_printf_i+0x1ac>
 800461c:	4615      	mov	r5, r2
 800461e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004622:	fb03 6711 	mls	r7, r3, r1, r6
 8004626:	5dc7      	ldrb	r7, [r0, r7]
 8004628:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800462c:	4637      	mov	r7, r6
 800462e:	42bb      	cmp	r3, r7
 8004630:	460e      	mov	r6, r1
 8004632:	d9f4      	bls.n	800461e <_printf_i+0x116>
 8004634:	2b08      	cmp	r3, #8
 8004636:	d10b      	bne.n	8004650 <_printf_i+0x148>
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	07de      	lsls	r6, r3, #31
 800463c:	d508      	bpl.n	8004650 <_printf_i+0x148>
 800463e:	6923      	ldr	r3, [r4, #16]
 8004640:	6861      	ldr	r1, [r4, #4]
 8004642:	4299      	cmp	r1, r3
 8004644:	bfde      	ittt	le
 8004646:	2330      	movle	r3, #48	; 0x30
 8004648:	f805 3c01 	strble.w	r3, [r5, #-1]
 800464c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004650:	1b52      	subs	r2, r2, r5
 8004652:	6122      	str	r2, [r4, #16]
 8004654:	f8cd a000 	str.w	sl, [sp]
 8004658:	464b      	mov	r3, r9
 800465a:	aa03      	add	r2, sp, #12
 800465c:	4621      	mov	r1, r4
 800465e:	4640      	mov	r0, r8
 8004660:	f7ff fee4 	bl	800442c <_printf_common>
 8004664:	3001      	adds	r0, #1
 8004666:	d14a      	bne.n	80046fe <_printf_i+0x1f6>
 8004668:	f04f 30ff 	mov.w	r0, #4294967295
 800466c:	b004      	add	sp, #16
 800466e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	f043 0320 	orr.w	r3, r3, #32
 8004678:	6023      	str	r3, [r4, #0]
 800467a:	4833      	ldr	r0, [pc, #204]	; (8004748 <_printf_i+0x240>)
 800467c:	2778      	movs	r7, #120	; 0x78
 800467e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	6829      	ldr	r1, [r5, #0]
 8004686:	061f      	lsls	r7, r3, #24
 8004688:	f851 6b04 	ldr.w	r6, [r1], #4
 800468c:	d402      	bmi.n	8004694 <_printf_i+0x18c>
 800468e:	065f      	lsls	r7, r3, #25
 8004690:	bf48      	it	mi
 8004692:	b2b6      	uxthmi	r6, r6
 8004694:	07df      	lsls	r7, r3, #31
 8004696:	bf48      	it	mi
 8004698:	f043 0320 	orrmi.w	r3, r3, #32
 800469c:	6029      	str	r1, [r5, #0]
 800469e:	bf48      	it	mi
 80046a0:	6023      	strmi	r3, [r4, #0]
 80046a2:	b91e      	cbnz	r6, 80046ac <_printf_i+0x1a4>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	f023 0320 	bic.w	r3, r3, #32
 80046aa:	6023      	str	r3, [r4, #0]
 80046ac:	2310      	movs	r3, #16
 80046ae:	e7a7      	b.n	8004600 <_printf_i+0xf8>
 80046b0:	4824      	ldr	r0, [pc, #144]	; (8004744 <_printf_i+0x23c>)
 80046b2:	e7e4      	b.n	800467e <_printf_i+0x176>
 80046b4:	4615      	mov	r5, r2
 80046b6:	e7bd      	b.n	8004634 <_printf_i+0x12c>
 80046b8:	682b      	ldr	r3, [r5, #0]
 80046ba:	6826      	ldr	r6, [r4, #0]
 80046bc:	6961      	ldr	r1, [r4, #20]
 80046be:	1d18      	adds	r0, r3, #4
 80046c0:	6028      	str	r0, [r5, #0]
 80046c2:	0635      	lsls	r5, r6, #24
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	d501      	bpl.n	80046cc <_printf_i+0x1c4>
 80046c8:	6019      	str	r1, [r3, #0]
 80046ca:	e002      	b.n	80046d2 <_printf_i+0x1ca>
 80046cc:	0670      	lsls	r0, r6, #25
 80046ce:	d5fb      	bpl.n	80046c8 <_printf_i+0x1c0>
 80046d0:	8019      	strh	r1, [r3, #0]
 80046d2:	2300      	movs	r3, #0
 80046d4:	6123      	str	r3, [r4, #16]
 80046d6:	4615      	mov	r5, r2
 80046d8:	e7bc      	b.n	8004654 <_printf_i+0x14c>
 80046da:	682b      	ldr	r3, [r5, #0]
 80046dc:	1d1a      	adds	r2, r3, #4
 80046de:	602a      	str	r2, [r5, #0]
 80046e0:	681d      	ldr	r5, [r3, #0]
 80046e2:	6862      	ldr	r2, [r4, #4]
 80046e4:	2100      	movs	r1, #0
 80046e6:	4628      	mov	r0, r5
 80046e8:	f7fb fd82 	bl	80001f0 <memchr>
 80046ec:	b108      	cbz	r0, 80046f2 <_printf_i+0x1ea>
 80046ee:	1b40      	subs	r0, r0, r5
 80046f0:	6060      	str	r0, [r4, #4]
 80046f2:	6863      	ldr	r3, [r4, #4]
 80046f4:	6123      	str	r3, [r4, #16]
 80046f6:	2300      	movs	r3, #0
 80046f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046fc:	e7aa      	b.n	8004654 <_printf_i+0x14c>
 80046fe:	6923      	ldr	r3, [r4, #16]
 8004700:	462a      	mov	r2, r5
 8004702:	4649      	mov	r1, r9
 8004704:	4640      	mov	r0, r8
 8004706:	47d0      	blx	sl
 8004708:	3001      	adds	r0, #1
 800470a:	d0ad      	beq.n	8004668 <_printf_i+0x160>
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	079b      	lsls	r3, r3, #30
 8004710:	d413      	bmi.n	800473a <_printf_i+0x232>
 8004712:	68e0      	ldr	r0, [r4, #12]
 8004714:	9b03      	ldr	r3, [sp, #12]
 8004716:	4298      	cmp	r0, r3
 8004718:	bfb8      	it	lt
 800471a:	4618      	movlt	r0, r3
 800471c:	e7a6      	b.n	800466c <_printf_i+0x164>
 800471e:	2301      	movs	r3, #1
 8004720:	4632      	mov	r2, r6
 8004722:	4649      	mov	r1, r9
 8004724:	4640      	mov	r0, r8
 8004726:	47d0      	blx	sl
 8004728:	3001      	adds	r0, #1
 800472a:	d09d      	beq.n	8004668 <_printf_i+0x160>
 800472c:	3501      	adds	r5, #1
 800472e:	68e3      	ldr	r3, [r4, #12]
 8004730:	9903      	ldr	r1, [sp, #12]
 8004732:	1a5b      	subs	r3, r3, r1
 8004734:	42ab      	cmp	r3, r5
 8004736:	dcf2      	bgt.n	800471e <_printf_i+0x216>
 8004738:	e7eb      	b.n	8004712 <_printf_i+0x20a>
 800473a:	2500      	movs	r5, #0
 800473c:	f104 0619 	add.w	r6, r4, #25
 8004740:	e7f5      	b.n	800472e <_printf_i+0x226>
 8004742:	bf00      	nop
 8004744:	080068ba 	.word	0x080068ba
 8004748:	080068cb 	.word	0x080068cb

0800474c <std>:
 800474c:	2300      	movs	r3, #0
 800474e:	b510      	push	{r4, lr}
 8004750:	4604      	mov	r4, r0
 8004752:	e9c0 3300 	strd	r3, r3, [r0]
 8004756:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800475a:	6083      	str	r3, [r0, #8]
 800475c:	8181      	strh	r1, [r0, #12]
 800475e:	6643      	str	r3, [r0, #100]	; 0x64
 8004760:	81c2      	strh	r2, [r0, #14]
 8004762:	6183      	str	r3, [r0, #24]
 8004764:	4619      	mov	r1, r3
 8004766:	2208      	movs	r2, #8
 8004768:	305c      	adds	r0, #92	; 0x5c
 800476a:	f000 f906 	bl	800497a <memset>
 800476e:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <std+0x58>)
 8004770:	6263      	str	r3, [r4, #36]	; 0x24
 8004772:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <std+0x5c>)
 8004774:	62a3      	str	r3, [r4, #40]	; 0x28
 8004776:	4b0d      	ldr	r3, [pc, #52]	; (80047ac <std+0x60>)
 8004778:	62e3      	str	r3, [r4, #44]	; 0x2c
 800477a:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <std+0x64>)
 800477c:	6323      	str	r3, [r4, #48]	; 0x30
 800477e:	4b0d      	ldr	r3, [pc, #52]	; (80047b4 <std+0x68>)
 8004780:	6224      	str	r4, [r4, #32]
 8004782:	429c      	cmp	r4, r3
 8004784:	d006      	beq.n	8004794 <std+0x48>
 8004786:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800478a:	4294      	cmp	r4, r2
 800478c:	d002      	beq.n	8004794 <std+0x48>
 800478e:	33d0      	adds	r3, #208	; 0xd0
 8004790:	429c      	cmp	r4, r3
 8004792:	d105      	bne.n	80047a0 <std+0x54>
 8004794:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800479c:	f000 b96a 	b.w	8004a74 <__retarget_lock_init_recursive>
 80047a0:	bd10      	pop	{r4, pc}
 80047a2:	bf00      	nop
 80047a4:	080048f5 	.word	0x080048f5
 80047a8:	08004917 	.word	0x08004917
 80047ac:	0800494f 	.word	0x0800494f
 80047b0:	08004973 	.word	0x08004973
 80047b4:	200002d8 	.word	0x200002d8

080047b8 <stdio_exit_handler>:
 80047b8:	4a02      	ldr	r2, [pc, #8]	; (80047c4 <stdio_exit_handler+0xc>)
 80047ba:	4903      	ldr	r1, [pc, #12]	; (80047c8 <stdio_exit_handler+0x10>)
 80047bc:	4803      	ldr	r0, [pc, #12]	; (80047cc <stdio_exit_handler+0x14>)
 80047be:	f000 b869 	b.w	8004894 <_fwalk_sglue>
 80047c2:	bf00      	nop
 80047c4:	2000000c 	.word	0x2000000c
 80047c8:	08006401 	.word	0x08006401
 80047cc:	20000018 	.word	0x20000018

080047d0 <cleanup_stdio>:
 80047d0:	6841      	ldr	r1, [r0, #4]
 80047d2:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <cleanup_stdio+0x34>)
 80047d4:	4299      	cmp	r1, r3
 80047d6:	b510      	push	{r4, lr}
 80047d8:	4604      	mov	r4, r0
 80047da:	d001      	beq.n	80047e0 <cleanup_stdio+0x10>
 80047dc:	f001 fe10 	bl	8006400 <_fflush_r>
 80047e0:	68a1      	ldr	r1, [r4, #8]
 80047e2:	4b09      	ldr	r3, [pc, #36]	; (8004808 <cleanup_stdio+0x38>)
 80047e4:	4299      	cmp	r1, r3
 80047e6:	d002      	beq.n	80047ee <cleanup_stdio+0x1e>
 80047e8:	4620      	mov	r0, r4
 80047ea:	f001 fe09 	bl	8006400 <_fflush_r>
 80047ee:	68e1      	ldr	r1, [r4, #12]
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <cleanup_stdio+0x3c>)
 80047f2:	4299      	cmp	r1, r3
 80047f4:	d004      	beq.n	8004800 <cleanup_stdio+0x30>
 80047f6:	4620      	mov	r0, r4
 80047f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047fc:	f001 be00 	b.w	8006400 <_fflush_r>
 8004800:	bd10      	pop	{r4, pc}
 8004802:	bf00      	nop
 8004804:	200002d8 	.word	0x200002d8
 8004808:	20000340 	.word	0x20000340
 800480c:	200003a8 	.word	0x200003a8

08004810 <global_stdio_init.part.0>:
 8004810:	b510      	push	{r4, lr}
 8004812:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <global_stdio_init.part.0+0x30>)
 8004814:	4c0b      	ldr	r4, [pc, #44]	; (8004844 <global_stdio_init.part.0+0x34>)
 8004816:	4a0c      	ldr	r2, [pc, #48]	; (8004848 <global_stdio_init.part.0+0x38>)
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	4620      	mov	r0, r4
 800481c:	2200      	movs	r2, #0
 800481e:	2104      	movs	r1, #4
 8004820:	f7ff ff94 	bl	800474c <std>
 8004824:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004828:	2201      	movs	r2, #1
 800482a:	2109      	movs	r1, #9
 800482c:	f7ff ff8e 	bl	800474c <std>
 8004830:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004834:	2202      	movs	r2, #2
 8004836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800483a:	2112      	movs	r1, #18
 800483c:	f7ff bf86 	b.w	800474c <std>
 8004840:	20000410 	.word	0x20000410
 8004844:	200002d8 	.word	0x200002d8
 8004848:	080047b9 	.word	0x080047b9

0800484c <__sfp_lock_acquire>:
 800484c:	4801      	ldr	r0, [pc, #4]	; (8004854 <__sfp_lock_acquire+0x8>)
 800484e:	f000 b912 	b.w	8004a76 <__retarget_lock_acquire_recursive>
 8004852:	bf00      	nop
 8004854:	20000419 	.word	0x20000419

08004858 <__sfp_lock_release>:
 8004858:	4801      	ldr	r0, [pc, #4]	; (8004860 <__sfp_lock_release+0x8>)
 800485a:	f000 b90d 	b.w	8004a78 <__retarget_lock_release_recursive>
 800485e:	bf00      	nop
 8004860:	20000419 	.word	0x20000419

08004864 <__sinit>:
 8004864:	b510      	push	{r4, lr}
 8004866:	4604      	mov	r4, r0
 8004868:	f7ff fff0 	bl	800484c <__sfp_lock_acquire>
 800486c:	6a23      	ldr	r3, [r4, #32]
 800486e:	b11b      	cbz	r3, 8004878 <__sinit+0x14>
 8004870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004874:	f7ff bff0 	b.w	8004858 <__sfp_lock_release>
 8004878:	4b04      	ldr	r3, [pc, #16]	; (800488c <__sinit+0x28>)
 800487a:	6223      	str	r3, [r4, #32]
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <__sinit+0x2c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1f5      	bne.n	8004870 <__sinit+0xc>
 8004884:	f7ff ffc4 	bl	8004810 <global_stdio_init.part.0>
 8004888:	e7f2      	b.n	8004870 <__sinit+0xc>
 800488a:	bf00      	nop
 800488c:	080047d1 	.word	0x080047d1
 8004890:	20000410 	.word	0x20000410

08004894 <_fwalk_sglue>:
 8004894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004898:	4607      	mov	r7, r0
 800489a:	4688      	mov	r8, r1
 800489c:	4614      	mov	r4, r2
 800489e:	2600      	movs	r6, #0
 80048a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048a4:	f1b9 0901 	subs.w	r9, r9, #1
 80048a8:	d505      	bpl.n	80048b6 <_fwalk_sglue+0x22>
 80048aa:	6824      	ldr	r4, [r4, #0]
 80048ac:	2c00      	cmp	r4, #0
 80048ae:	d1f7      	bne.n	80048a0 <_fwalk_sglue+0xc>
 80048b0:	4630      	mov	r0, r6
 80048b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048b6:	89ab      	ldrh	r3, [r5, #12]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d907      	bls.n	80048cc <_fwalk_sglue+0x38>
 80048bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048c0:	3301      	adds	r3, #1
 80048c2:	d003      	beq.n	80048cc <_fwalk_sglue+0x38>
 80048c4:	4629      	mov	r1, r5
 80048c6:	4638      	mov	r0, r7
 80048c8:	47c0      	blx	r8
 80048ca:	4306      	orrs	r6, r0
 80048cc:	3568      	adds	r5, #104	; 0x68
 80048ce:	e7e9      	b.n	80048a4 <_fwalk_sglue+0x10>

080048d0 <iprintf>:
 80048d0:	b40f      	push	{r0, r1, r2, r3}
 80048d2:	b507      	push	{r0, r1, r2, lr}
 80048d4:	4906      	ldr	r1, [pc, #24]	; (80048f0 <iprintf+0x20>)
 80048d6:	ab04      	add	r3, sp, #16
 80048d8:	6808      	ldr	r0, [r1, #0]
 80048da:	f853 2b04 	ldr.w	r2, [r3], #4
 80048de:	6881      	ldr	r1, [r0, #8]
 80048e0:	9301      	str	r3, [sp, #4]
 80048e2:	f001 fbed 	bl	80060c0 <_vfiprintf_r>
 80048e6:	b003      	add	sp, #12
 80048e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048ec:	b004      	add	sp, #16
 80048ee:	4770      	bx	lr
 80048f0:	20000064 	.word	0x20000064

080048f4 <__sread>:
 80048f4:	b510      	push	{r4, lr}
 80048f6:	460c      	mov	r4, r1
 80048f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048fc:	f000 f86c 	bl	80049d8 <_read_r>
 8004900:	2800      	cmp	r0, #0
 8004902:	bfab      	itete	ge
 8004904:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004906:	89a3      	ldrhlt	r3, [r4, #12]
 8004908:	181b      	addge	r3, r3, r0
 800490a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800490e:	bfac      	ite	ge
 8004910:	6563      	strge	r3, [r4, #84]	; 0x54
 8004912:	81a3      	strhlt	r3, [r4, #12]
 8004914:	bd10      	pop	{r4, pc}

08004916 <__swrite>:
 8004916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800491a:	461f      	mov	r7, r3
 800491c:	898b      	ldrh	r3, [r1, #12]
 800491e:	05db      	lsls	r3, r3, #23
 8004920:	4605      	mov	r5, r0
 8004922:	460c      	mov	r4, r1
 8004924:	4616      	mov	r6, r2
 8004926:	d505      	bpl.n	8004934 <__swrite+0x1e>
 8004928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800492c:	2302      	movs	r3, #2
 800492e:	2200      	movs	r2, #0
 8004930:	f000 f840 	bl	80049b4 <_lseek_r>
 8004934:	89a3      	ldrh	r3, [r4, #12]
 8004936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800493a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800493e:	81a3      	strh	r3, [r4, #12]
 8004940:	4632      	mov	r2, r6
 8004942:	463b      	mov	r3, r7
 8004944:	4628      	mov	r0, r5
 8004946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800494a:	f000 b857 	b.w	80049fc <_write_r>

0800494e <__sseek>:
 800494e:	b510      	push	{r4, lr}
 8004950:	460c      	mov	r4, r1
 8004952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004956:	f000 f82d 	bl	80049b4 <_lseek_r>
 800495a:	1c43      	adds	r3, r0, #1
 800495c:	89a3      	ldrh	r3, [r4, #12]
 800495e:	bf15      	itete	ne
 8004960:	6560      	strne	r0, [r4, #84]	; 0x54
 8004962:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004966:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800496a:	81a3      	strheq	r3, [r4, #12]
 800496c:	bf18      	it	ne
 800496e:	81a3      	strhne	r3, [r4, #12]
 8004970:	bd10      	pop	{r4, pc}

08004972 <__sclose>:
 8004972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004976:	f000 b80d 	b.w	8004994 <_close_r>

0800497a <memset>:
 800497a:	4402      	add	r2, r0
 800497c:	4603      	mov	r3, r0
 800497e:	4293      	cmp	r3, r2
 8004980:	d100      	bne.n	8004984 <memset+0xa>
 8004982:	4770      	bx	lr
 8004984:	f803 1b01 	strb.w	r1, [r3], #1
 8004988:	e7f9      	b.n	800497e <memset+0x4>
	...

0800498c <_localeconv_r>:
 800498c:	4800      	ldr	r0, [pc, #0]	; (8004990 <_localeconv_r+0x4>)
 800498e:	4770      	bx	lr
 8004990:	20000158 	.word	0x20000158

08004994 <_close_r>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	4d06      	ldr	r5, [pc, #24]	; (80049b0 <_close_r+0x1c>)
 8004998:	2300      	movs	r3, #0
 800499a:	4604      	mov	r4, r0
 800499c:	4608      	mov	r0, r1
 800499e:	602b      	str	r3, [r5, #0]
 80049a0:	f7fc fd13 	bl	80013ca <_close>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d102      	bne.n	80049ae <_close_r+0x1a>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	b103      	cbz	r3, 80049ae <_close_r+0x1a>
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	20000414 	.word	0x20000414

080049b4 <_lseek_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	4d07      	ldr	r5, [pc, #28]	; (80049d4 <_lseek_r+0x20>)
 80049b8:	4604      	mov	r4, r0
 80049ba:	4608      	mov	r0, r1
 80049bc:	4611      	mov	r1, r2
 80049be:	2200      	movs	r2, #0
 80049c0:	602a      	str	r2, [r5, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	f7fc fd28 	bl	8001418 <_lseek>
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	d102      	bne.n	80049d2 <_lseek_r+0x1e>
 80049cc:	682b      	ldr	r3, [r5, #0]
 80049ce:	b103      	cbz	r3, 80049d2 <_lseek_r+0x1e>
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	bd38      	pop	{r3, r4, r5, pc}
 80049d4:	20000414 	.word	0x20000414

080049d8 <_read_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	4d07      	ldr	r5, [pc, #28]	; (80049f8 <_read_r+0x20>)
 80049dc:	4604      	mov	r4, r0
 80049de:	4608      	mov	r0, r1
 80049e0:	4611      	mov	r1, r2
 80049e2:	2200      	movs	r2, #0
 80049e4:	602a      	str	r2, [r5, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	f7fc fcb6 	bl	8001358 <_read>
 80049ec:	1c43      	adds	r3, r0, #1
 80049ee:	d102      	bne.n	80049f6 <_read_r+0x1e>
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	b103      	cbz	r3, 80049f6 <_read_r+0x1e>
 80049f4:	6023      	str	r3, [r4, #0]
 80049f6:	bd38      	pop	{r3, r4, r5, pc}
 80049f8:	20000414 	.word	0x20000414

080049fc <_write_r>:
 80049fc:	b538      	push	{r3, r4, r5, lr}
 80049fe:	4d07      	ldr	r5, [pc, #28]	; (8004a1c <_write_r+0x20>)
 8004a00:	4604      	mov	r4, r0
 8004a02:	4608      	mov	r0, r1
 8004a04:	4611      	mov	r1, r2
 8004a06:	2200      	movs	r2, #0
 8004a08:	602a      	str	r2, [r5, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f7fc fcc1 	bl	8001392 <_write>
 8004a10:	1c43      	adds	r3, r0, #1
 8004a12:	d102      	bne.n	8004a1a <_write_r+0x1e>
 8004a14:	682b      	ldr	r3, [r5, #0]
 8004a16:	b103      	cbz	r3, 8004a1a <_write_r+0x1e>
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	bd38      	pop	{r3, r4, r5, pc}
 8004a1c:	20000414 	.word	0x20000414

08004a20 <__errno>:
 8004a20:	4b01      	ldr	r3, [pc, #4]	; (8004a28 <__errno+0x8>)
 8004a22:	6818      	ldr	r0, [r3, #0]
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	20000064 	.word	0x20000064

08004a2c <__libc_init_array>:
 8004a2c:	b570      	push	{r4, r5, r6, lr}
 8004a2e:	4d0d      	ldr	r5, [pc, #52]	; (8004a64 <__libc_init_array+0x38>)
 8004a30:	4c0d      	ldr	r4, [pc, #52]	; (8004a68 <__libc_init_array+0x3c>)
 8004a32:	1b64      	subs	r4, r4, r5
 8004a34:	10a4      	asrs	r4, r4, #2
 8004a36:	2600      	movs	r6, #0
 8004a38:	42a6      	cmp	r6, r4
 8004a3a:	d109      	bne.n	8004a50 <__libc_init_array+0x24>
 8004a3c:	4d0b      	ldr	r5, [pc, #44]	; (8004a6c <__libc_init_array+0x40>)
 8004a3e:	4c0c      	ldr	r4, [pc, #48]	; (8004a70 <__libc_init_array+0x44>)
 8004a40:	f001 fef0 	bl	8006824 <_init>
 8004a44:	1b64      	subs	r4, r4, r5
 8004a46:	10a4      	asrs	r4, r4, #2
 8004a48:	2600      	movs	r6, #0
 8004a4a:	42a6      	cmp	r6, r4
 8004a4c:	d105      	bne.n	8004a5a <__libc_init_array+0x2e>
 8004a4e:	bd70      	pop	{r4, r5, r6, pc}
 8004a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a54:	4798      	blx	r3
 8004a56:	3601      	adds	r6, #1
 8004a58:	e7ee      	b.n	8004a38 <__libc_init_array+0xc>
 8004a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a5e:	4798      	blx	r3
 8004a60:	3601      	adds	r6, #1
 8004a62:	e7f2      	b.n	8004a4a <__libc_init_array+0x1e>
 8004a64:	08006c24 	.word	0x08006c24
 8004a68:	08006c24 	.word	0x08006c24
 8004a6c:	08006c24 	.word	0x08006c24
 8004a70:	08006c28 	.word	0x08006c28

08004a74 <__retarget_lock_init_recursive>:
 8004a74:	4770      	bx	lr

08004a76 <__retarget_lock_acquire_recursive>:
 8004a76:	4770      	bx	lr

08004a78 <__retarget_lock_release_recursive>:
 8004a78:	4770      	bx	lr

08004a7a <quorem>:
 8004a7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7e:	6903      	ldr	r3, [r0, #16]
 8004a80:	690c      	ldr	r4, [r1, #16]
 8004a82:	42a3      	cmp	r3, r4
 8004a84:	4607      	mov	r7, r0
 8004a86:	db7e      	blt.n	8004b86 <quorem+0x10c>
 8004a88:	3c01      	subs	r4, #1
 8004a8a:	f101 0814 	add.w	r8, r1, #20
 8004a8e:	f100 0514 	add.w	r5, r0, #20
 8004a92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a96:	9301      	str	r3, [sp, #4]
 8004a98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004aa8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004aac:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ab0:	d331      	bcc.n	8004b16 <quorem+0x9c>
 8004ab2:	f04f 0e00 	mov.w	lr, #0
 8004ab6:	4640      	mov	r0, r8
 8004ab8:	46ac      	mov	ip, r5
 8004aba:	46f2      	mov	sl, lr
 8004abc:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ac0:	b293      	uxth	r3, r2
 8004ac2:	fb06 e303 	mla	r3, r6, r3, lr
 8004ac6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004aca:	0c1a      	lsrs	r2, r3, #16
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	ebaa 0303 	sub.w	r3, sl, r3
 8004ad2:	f8dc a000 	ldr.w	sl, [ip]
 8004ad6:	fa13 f38a 	uxtah	r3, r3, sl
 8004ada:	fb06 220e 	mla	r2, r6, lr, r2
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	9b00      	ldr	r3, [sp, #0]
 8004ae2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004ae6:	b292      	uxth	r2, r2
 8004ae8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004aec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004af0:	f8bd 3000 	ldrh.w	r3, [sp]
 8004af4:	4581      	cmp	r9, r0
 8004af6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004afa:	f84c 3b04 	str.w	r3, [ip], #4
 8004afe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004b02:	d2db      	bcs.n	8004abc <quorem+0x42>
 8004b04:	f855 300b 	ldr.w	r3, [r5, fp]
 8004b08:	b92b      	cbnz	r3, 8004b16 <quorem+0x9c>
 8004b0a:	9b01      	ldr	r3, [sp, #4]
 8004b0c:	3b04      	subs	r3, #4
 8004b0e:	429d      	cmp	r5, r3
 8004b10:	461a      	mov	r2, r3
 8004b12:	d32c      	bcc.n	8004b6e <quorem+0xf4>
 8004b14:	613c      	str	r4, [r7, #16]
 8004b16:	4638      	mov	r0, r7
 8004b18:	f001 f9a8 	bl	8005e6c <__mcmp>
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	db22      	blt.n	8004b66 <quorem+0xec>
 8004b20:	3601      	adds	r6, #1
 8004b22:	4629      	mov	r1, r5
 8004b24:	2000      	movs	r0, #0
 8004b26:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b2a:	f8d1 c000 	ldr.w	ip, [r1]
 8004b2e:	b293      	uxth	r3, r2
 8004b30:	1ac3      	subs	r3, r0, r3
 8004b32:	0c12      	lsrs	r2, r2, #16
 8004b34:	fa13 f38c 	uxtah	r3, r3, ip
 8004b38:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004b3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b46:	45c1      	cmp	r9, r8
 8004b48:	f841 3b04 	str.w	r3, [r1], #4
 8004b4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004b50:	d2e9      	bcs.n	8004b26 <quorem+0xac>
 8004b52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b5a:	b922      	cbnz	r2, 8004b66 <quorem+0xec>
 8004b5c:	3b04      	subs	r3, #4
 8004b5e:	429d      	cmp	r5, r3
 8004b60:	461a      	mov	r2, r3
 8004b62:	d30a      	bcc.n	8004b7a <quorem+0x100>
 8004b64:	613c      	str	r4, [r7, #16]
 8004b66:	4630      	mov	r0, r6
 8004b68:	b003      	add	sp, #12
 8004b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	3b04      	subs	r3, #4
 8004b72:	2a00      	cmp	r2, #0
 8004b74:	d1ce      	bne.n	8004b14 <quorem+0x9a>
 8004b76:	3c01      	subs	r4, #1
 8004b78:	e7c9      	b.n	8004b0e <quorem+0x94>
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	3b04      	subs	r3, #4
 8004b7e:	2a00      	cmp	r2, #0
 8004b80:	d1f0      	bne.n	8004b64 <quorem+0xea>
 8004b82:	3c01      	subs	r4, #1
 8004b84:	e7eb      	b.n	8004b5e <quorem+0xe4>
 8004b86:	2000      	movs	r0, #0
 8004b88:	e7ee      	b.n	8004b68 <quorem+0xee>
 8004b8a:	0000      	movs	r0, r0
 8004b8c:	0000      	movs	r0, r0
	...

08004b90 <_dtoa_r>:
 8004b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b94:	ed2d 8b04 	vpush	{d8-d9}
 8004b98:	69c5      	ldr	r5, [r0, #28]
 8004b9a:	b093      	sub	sp, #76	; 0x4c
 8004b9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004ba0:	ec57 6b10 	vmov	r6, r7, d0
 8004ba4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004ba8:	9107      	str	r1, [sp, #28]
 8004baa:	4604      	mov	r4, r0
 8004bac:	920a      	str	r2, [sp, #40]	; 0x28
 8004bae:	930d      	str	r3, [sp, #52]	; 0x34
 8004bb0:	b975      	cbnz	r5, 8004bd0 <_dtoa_r+0x40>
 8004bb2:	2010      	movs	r0, #16
 8004bb4:	f000 fe2a 	bl	800580c <malloc>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	61e0      	str	r0, [r4, #28]
 8004bbc:	b920      	cbnz	r0, 8004bc8 <_dtoa_r+0x38>
 8004bbe:	4bae      	ldr	r3, [pc, #696]	; (8004e78 <_dtoa_r+0x2e8>)
 8004bc0:	21ef      	movs	r1, #239	; 0xef
 8004bc2:	48ae      	ldr	r0, [pc, #696]	; (8004e7c <_dtoa_r+0x2ec>)
 8004bc4:	f001 fcf8 	bl	80065b8 <__assert_func>
 8004bc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004bcc:	6005      	str	r5, [r0, #0]
 8004bce:	60c5      	str	r5, [r0, #12]
 8004bd0:	69e3      	ldr	r3, [r4, #28]
 8004bd2:	6819      	ldr	r1, [r3, #0]
 8004bd4:	b151      	cbz	r1, 8004bec <_dtoa_r+0x5c>
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	604a      	str	r2, [r1, #4]
 8004bda:	2301      	movs	r3, #1
 8004bdc:	4093      	lsls	r3, r2
 8004bde:	608b      	str	r3, [r1, #8]
 8004be0:	4620      	mov	r0, r4
 8004be2:	f000 ff07 	bl	80059f4 <_Bfree>
 8004be6:	69e3      	ldr	r3, [r4, #28]
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	1e3b      	subs	r3, r7, #0
 8004bee:	bfbb      	ittet	lt
 8004bf0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004bf4:	9303      	strlt	r3, [sp, #12]
 8004bf6:	2300      	movge	r3, #0
 8004bf8:	2201      	movlt	r2, #1
 8004bfa:	bfac      	ite	ge
 8004bfc:	f8c8 3000 	strge.w	r3, [r8]
 8004c00:	f8c8 2000 	strlt.w	r2, [r8]
 8004c04:	4b9e      	ldr	r3, [pc, #632]	; (8004e80 <_dtoa_r+0x2f0>)
 8004c06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004c0a:	ea33 0308 	bics.w	r3, r3, r8
 8004c0e:	d11b      	bne.n	8004c48 <_dtoa_r+0xb8>
 8004c10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004c12:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004c1c:	4333      	orrs	r3, r6
 8004c1e:	f000 8593 	beq.w	8005748 <_dtoa_r+0xbb8>
 8004c22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c24:	b963      	cbnz	r3, 8004c40 <_dtoa_r+0xb0>
 8004c26:	4b97      	ldr	r3, [pc, #604]	; (8004e84 <_dtoa_r+0x2f4>)
 8004c28:	e027      	b.n	8004c7a <_dtoa_r+0xea>
 8004c2a:	4b97      	ldr	r3, [pc, #604]	; (8004e88 <_dtoa_r+0x2f8>)
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	3308      	adds	r3, #8
 8004c30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	9800      	ldr	r0, [sp, #0]
 8004c36:	b013      	add	sp, #76	; 0x4c
 8004c38:	ecbd 8b04 	vpop	{d8-d9}
 8004c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c40:	4b90      	ldr	r3, [pc, #576]	; (8004e84 <_dtoa_r+0x2f4>)
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	3303      	adds	r3, #3
 8004c46:	e7f3      	b.n	8004c30 <_dtoa_r+0xa0>
 8004c48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	ec51 0b17 	vmov	r0, r1, d7
 8004c52:	eeb0 8a47 	vmov.f32	s16, s14
 8004c56:	eef0 8a67 	vmov.f32	s17, s15
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f7fb ff44 	bl	8000ae8 <__aeabi_dcmpeq>
 8004c60:	4681      	mov	r9, r0
 8004c62:	b160      	cbz	r0, 8004c7e <_dtoa_r+0xee>
 8004c64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004c66:	2301      	movs	r3, #1
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8568 	beq.w	8005742 <_dtoa_r+0xbb2>
 8004c72:	4b86      	ldr	r3, [pc, #536]	; (8004e8c <_dtoa_r+0x2fc>)
 8004c74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	e7da      	b.n	8004c34 <_dtoa_r+0xa4>
 8004c7e:	aa10      	add	r2, sp, #64	; 0x40
 8004c80:	a911      	add	r1, sp, #68	; 0x44
 8004c82:	4620      	mov	r0, r4
 8004c84:	eeb0 0a48 	vmov.f32	s0, s16
 8004c88:	eef0 0a68 	vmov.f32	s1, s17
 8004c8c:	f001 f994 	bl	8005fb8 <__d2b>
 8004c90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004c94:	4682      	mov	sl, r0
 8004c96:	2d00      	cmp	r5, #0
 8004c98:	d07f      	beq.n	8004d9a <_dtoa_r+0x20a>
 8004c9a:	ee18 3a90 	vmov	r3, s17
 8004c9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ca2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004ca6:	ec51 0b18 	vmov	r0, r1, d8
 8004caa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004cae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004cb2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	2200      	movs	r2, #0
 8004cba:	4b75      	ldr	r3, [pc, #468]	; (8004e90 <_dtoa_r+0x300>)
 8004cbc:	f7fb faf4 	bl	80002a8 <__aeabi_dsub>
 8004cc0:	a367      	add	r3, pc, #412	; (adr r3, 8004e60 <_dtoa_r+0x2d0>)
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	f7fb fca7 	bl	8000618 <__aeabi_dmul>
 8004cca:	a367      	add	r3, pc, #412	; (adr r3, 8004e68 <_dtoa_r+0x2d8>)
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f7fb faec 	bl	80002ac <__adddf3>
 8004cd4:	4606      	mov	r6, r0
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	460f      	mov	r7, r1
 8004cda:	f7fb fc33 	bl	8000544 <__aeabi_i2d>
 8004cde:	a364      	add	r3, pc, #400	; (adr r3, 8004e70 <_dtoa_r+0x2e0>)
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f7fb fc98 	bl	8000618 <__aeabi_dmul>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4630      	mov	r0, r6
 8004cee:	4639      	mov	r1, r7
 8004cf0:	f7fb fadc 	bl	80002ac <__adddf3>
 8004cf4:	4606      	mov	r6, r0
 8004cf6:	460f      	mov	r7, r1
 8004cf8:	f7fb ff3e 	bl	8000b78 <__aeabi_d2iz>
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	4683      	mov	fp, r0
 8004d00:	2300      	movs	r3, #0
 8004d02:	4630      	mov	r0, r6
 8004d04:	4639      	mov	r1, r7
 8004d06:	f7fb fef9 	bl	8000afc <__aeabi_dcmplt>
 8004d0a:	b148      	cbz	r0, 8004d20 <_dtoa_r+0x190>
 8004d0c:	4658      	mov	r0, fp
 8004d0e:	f7fb fc19 	bl	8000544 <__aeabi_i2d>
 8004d12:	4632      	mov	r2, r6
 8004d14:	463b      	mov	r3, r7
 8004d16:	f7fb fee7 	bl	8000ae8 <__aeabi_dcmpeq>
 8004d1a:	b908      	cbnz	r0, 8004d20 <_dtoa_r+0x190>
 8004d1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d20:	f1bb 0f16 	cmp.w	fp, #22
 8004d24:	d857      	bhi.n	8004dd6 <_dtoa_r+0x246>
 8004d26:	4b5b      	ldr	r3, [pc, #364]	; (8004e94 <_dtoa_r+0x304>)
 8004d28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d30:	ec51 0b18 	vmov	r0, r1, d8
 8004d34:	f7fb fee2 	bl	8000afc <__aeabi_dcmplt>
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	d04e      	beq.n	8004dda <_dtoa_r+0x24a>
 8004d3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d40:	2300      	movs	r3, #0
 8004d42:	930c      	str	r3, [sp, #48]	; 0x30
 8004d44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d46:	1b5b      	subs	r3, r3, r5
 8004d48:	1e5a      	subs	r2, r3, #1
 8004d4a:	bf45      	ittet	mi
 8004d4c:	f1c3 0301 	rsbmi	r3, r3, #1
 8004d50:	9305      	strmi	r3, [sp, #20]
 8004d52:	2300      	movpl	r3, #0
 8004d54:	2300      	movmi	r3, #0
 8004d56:	9206      	str	r2, [sp, #24]
 8004d58:	bf54      	ite	pl
 8004d5a:	9305      	strpl	r3, [sp, #20]
 8004d5c:	9306      	strmi	r3, [sp, #24]
 8004d5e:	f1bb 0f00 	cmp.w	fp, #0
 8004d62:	db3c      	blt.n	8004dde <_dtoa_r+0x24e>
 8004d64:	9b06      	ldr	r3, [sp, #24]
 8004d66:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004d6a:	445b      	add	r3, fp
 8004d6c:	9306      	str	r3, [sp, #24]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	9308      	str	r3, [sp, #32]
 8004d72:	9b07      	ldr	r3, [sp, #28]
 8004d74:	2b09      	cmp	r3, #9
 8004d76:	d868      	bhi.n	8004e4a <_dtoa_r+0x2ba>
 8004d78:	2b05      	cmp	r3, #5
 8004d7a:	bfc4      	itt	gt
 8004d7c:	3b04      	subgt	r3, #4
 8004d7e:	9307      	strgt	r3, [sp, #28]
 8004d80:	9b07      	ldr	r3, [sp, #28]
 8004d82:	f1a3 0302 	sub.w	r3, r3, #2
 8004d86:	bfcc      	ite	gt
 8004d88:	2500      	movgt	r5, #0
 8004d8a:	2501      	movle	r5, #1
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	f200 8085 	bhi.w	8004e9c <_dtoa_r+0x30c>
 8004d92:	e8df f003 	tbb	[pc, r3]
 8004d96:	3b2e      	.short	0x3b2e
 8004d98:	5839      	.short	0x5839
 8004d9a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004d9e:	441d      	add	r5, r3
 8004da0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	bfc1      	itttt	gt
 8004da8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004dac:	fa08 f803 	lslgt.w	r8, r8, r3
 8004db0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8004db4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004db8:	bfd6      	itet	le
 8004dba:	f1c3 0320 	rsble	r3, r3, #32
 8004dbe:	ea48 0003 	orrgt.w	r0, r8, r3
 8004dc2:	fa06 f003 	lslle.w	r0, r6, r3
 8004dc6:	f7fb fbad 	bl	8000524 <__aeabi_ui2d>
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004dd0:	3d01      	subs	r5, #1
 8004dd2:	920e      	str	r2, [sp, #56]	; 0x38
 8004dd4:	e76f      	b.n	8004cb6 <_dtoa_r+0x126>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e7b3      	b.n	8004d42 <_dtoa_r+0x1b2>
 8004dda:	900c      	str	r0, [sp, #48]	; 0x30
 8004ddc:	e7b2      	b.n	8004d44 <_dtoa_r+0x1b4>
 8004dde:	9b05      	ldr	r3, [sp, #20]
 8004de0:	eba3 030b 	sub.w	r3, r3, fp
 8004de4:	9305      	str	r3, [sp, #20]
 8004de6:	f1cb 0300 	rsb	r3, fp, #0
 8004dea:	9308      	str	r3, [sp, #32]
 8004dec:	2300      	movs	r3, #0
 8004dee:	930b      	str	r3, [sp, #44]	; 0x2c
 8004df0:	e7bf      	b.n	8004d72 <_dtoa_r+0x1e2>
 8004df2:	2300      	movs	r3, #0
 8004df4:	9309      	str	r3, [sp, #36]	; 0x24
 8004df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	dc52      	bgt.n	8004ea2 <_dtoa_r+0x312>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	9301      	str	r3, [sp, #4]
 8004e00:	9304      	str	r3, [sp, #16]
 8004e02:	461a      	mov	r2, r3
 8004e04:	920a      	str	r2, [sp, #40]	; 0x28
 8004e06:	e00b      	b.n	8004e20 <_dtoa_r+0x290>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e7f3      	b.n	8004df4 <_dtoa_r+0x264>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e12:	445b      	add	r3, fp
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	3301      	adds	r3, #1
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	9304      	str	r3, [sp, #16]
 8004e1c:	bfb8      	it	lt
 8004e1e:	2301      	movlt	r3, #1
 8004e20:	69e0      	ldr	r0, [r4, #28]
 8004e22:	2100      	movs	r1, #0
 8004e24:	2204      	movs	r2, #4
 8004e26:	f102 0614 	add.w	r6, r2, #20
 8004e2a:	429e      	cmp	r6, r3
 8004e2c:	d93d      	bls.n	8004eaa <_dtoa_r+0x31a>
 8004e2e:	6041      	str	r1, [r0, #4]
 8004e30:	4620      	mov	r0, r4
 8004e32:	f000 fd9f 	bl	8005974 <_Balloc>
 8004e36:	9000      	str	r0, [sp, #0]
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	d139      	bne.n	8004eb0 <_dtoa_r+0x320>
 8004e3c:	4b16      	ldr	r3, [pc, #88]	; (8004e98 <_dtoa_r+0x308>)
 8004e3e:	4602      	mov	r2, r0
 8004e40:	f240 11af 	movw	r1, #431	; 0x1af
 8004e44:	e6bd      	b.n	8004bc2 <_dtoa_r+0x32>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e7e1      	b.n	8004e0e <_dtoa_r+0x27e>
 8004e4a:	2501      	movs	r5, #1
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	9307      	str	r3, [sp, #28]
 8004e50:	9509      	str	r5, [sp, #36]	; 0x24
 8004e52:	f04f 33ff 	mov.w	r3, #4294967295
 8004e56:	9301      	str	r3, [sp, #4]
 8004e58:	9304      	str	r3, [sp, #16]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2312      	movs	r3, #18
 8004e5e:	e7d1      	b.n	8004e04 <_dtoa_r+0x274>
 8004e60:	636f4361 	.word	0x636f4361
 8004e64:	3fd287a7 	.word	0x3fd287a7
 8004e68:	8b60c8b3 	.word	0x8b60c8b3
 8004e6c:	3fc68a28 	.word	0x3fc68a28
 8004e70:	509f79fb 	.word	0x509f79fb
 8004e74:	3fd34413 	.word	0x3fd34413
 8004e78:	080068e9 	.word	0x080068e9
 8004e7c:	08006900 	.word	0x08006900
 8004e80:	7ff00000 	.word	0x7ff00000
 8004e84:	080068e5 	.word	0x080068e5
 8004e88:	080068dc 	.word	0x080068dc
 8004e8c:	080068b9 	.word	0x080068b9
 8004e90:	3ff80000 	.word	0x3ff80000
 8004e94:	080069f0 	.word	0x080069f0
 8004e98:	08006958 	.word	0x08006958
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8004ea0:	e7d7      	b.n	8004e52 <_dtoa_r+0x2c2>
 8004ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ea4:	9301      	str	r3, [sp, #4]
 8004ea6:	9304      	str	r3, [sp, #16]
 8004ea8:	e7ba      	b.n	8004e20 <_dtoa_r+0x290>
 8004eaa:	3101      	adds	r1, #1
 8004eac:	0052      	lsls	r2, r2, #1
 8004eae:	e7ba      	b.n	8004e26 <_dtoa_r+0x296>
 8004eb0:	69e3      	ldr	r3, [r4, #28]
 8004eb2:	9a00      	ldr	r2, [sp, #0]
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	9b04      	ldr	r3, [sp, #16]
 8004eb8:	2b0e      	cmp	r3, #14
 8004eba:	f200 80a8 	bhi.w	800500e <_dtoa_r+0x47e>
 8004ebe:	2d00      	cmp	r5, #0
 8004ec0:	f000 80a5 	beq.w	800500e <_dtoa_r+0x47e>
 8004ec4:	f1bb 0f00 	cmp.w	fp, #0
 8004ec8:	dd38      	ble.n	8004f3c <_dtoa_r+0x3ac>
 8004eca:	4bc0      	ldr	r3, [pc, #768]	; (80051cc <_dtoa_r+0x63c>)
 8004ecc:	f00b 020f 	and.w	r2, fp, #15
 8004ed0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ed4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004ed8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004edc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004ee0:	d019      	beq.n	8004f16 <_dtoa_r+0x386>
 8004ee2:	4bbb      	ldr	r3, [pc, #748]	; (80051d0 <_dtoa_r+0x640>)
 8004ee4:	ec51 0b18 	vmov	r0, r1, d8
 8004ee8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004eec:	f7fb fcbe 	bl	800086c <__aeabi_ddiv>
 8004ef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ef4:	f008 080f 	and.w	r8, r8, #15
 8004ef8:	2503      	movs	r5, #3
 8004efa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80051d0 <_dtoa_r+0x640>
 8004efe:	f1b8 0f00 	cmp.w	r8, #0
 8004f02:	d10a      	bne.n	8004f1a <_dtoa_r+0x38a>
 8004f04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f08:	4632      	mov	r2, r6
 8004f0a:	463b      	mov	r3, r7
 8004f0c:	f7fb fcae 	bl	800086c <__aeabi_ddiv>
 8004f10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f14:	e02b      	b.n	8004f6e <_dtoa_r+0x3de>
 8004f16:	2502      	movs	r5, #2
 8004f18:	e7ef      	b.n	8004efa <_dtoa_r+0x36a>
 8004f1a:	f018 0f01 	tst.w	r8, #1
 8004f1e:	d008      	beq.n	8004f32 <_dtoa_r+0x3a2>
 8004f20:	4630      	mov	r0, r6
 8004f22:	4639      	mov	r1, r7
 8004f24:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004f28:	f7fb fb76 	bl	8000618 <__aeabi_dmul>
 8004f2c:	3501      	adds	r5, #1
 8004f2e:	4606      	mov	r6, r0
 8004f30:	460f      	mov	r7, r1
 8004f32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004f36:	f109 0908 	add.w	r9, r9, #8
 8004f3a:	e7e0      	b.n	8004efe <_dtoa_r+0x36e>
 8004f3c:	f000 809f 	beq.w	800507e <_dtoa_r+0x4ee>
 8004f40:	f1cb 0600 	rsb	r6, fp, #0
 8004f44:	4ba1      	ldr	r3, [pc, #644]	; (80051cc <_dtoa_r+0x63c>)
 8004f46:	4fa2      	ldr	r7, [pc, #648]	; (80051d0 <_dtoa_r+0x640>)
 8004f48:	f006 020f 	and.w	r2, r6, #15
 8004f4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f54:	ec51 0b18 	vmov	r0, r1, d8
 8004f58:	f7fb fb5e 	bl	8000618 <__aeabi_dmul>
 8004f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f60:	1136      	asrs	r6, r6, #4
 8004f62:	2300      	movs	r3, #0
 8004f64:	2502      	movs	r5, #2
 8004f66:	2e00      	cmp	r6, #0
 8004f68:	d17e      	bne.n	8005068 <_dtoa_r+0x4d8>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1d0      	bne.n	8004f10 <_dtoa_r+0x380>
 8004f6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f70:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8084 	beq.w	8005082 <_dtoa_r+0x4f2>
 8004f7a:	4b96      	ldr	r3, [pc, #600]	; (80051d4 <_dtoa_r+0x644>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	4640      	mov	r0, r8
 8004f80:	4649      	mov	r1, r9
 8004f82:	f7fb fdbb 	bl	8000afc <__aeabi_dcmplt>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d07b      	beq.n	8005082 <_dtoa_r+0x4f2>
 8004f8a:	9b04      	ldr	r3, [sp, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d078      	beq.n	8005082 <_dtoa_r+0x4f2>
 8004f90:	9b01      	ldr	r3, [sp, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	dd39      	ble.n	800500a <_dtoa_r+0x47a>
 8004f96:	4b90      	ldr	r3, [pc, #576]	; (80051d8 <_dtoa_r+0x648>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	4649      	mov	r1, r9
 8004f9e:	f7fb fb3b 	bl	8000618 <__aeabi_dmul>
 8004fa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fa6:	9e01      	ldr	r6, [sp, #4]
 8004fa8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004fac:	3501      	adds	r5, #1
 8004fae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	f7fb fac6 	bl	8000544 <__aeabi_i2d>
 8004fb8:	4642      	mov	r2, r8
 8004fba:	464b      	mov	r3, r9
 8004fbc:	f7fb fb2c 	bl	8000618 <__aeabi_dmul>
 8004fc0:	4b86      	ldr	r3, [pc, #536]	; (80051dc <_dtoa_r+0x64c>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f7fb f972 	bl	80002ac <__adddf3>
 8004fc8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004fcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fd0:	9303      	str	r3, [sp, #12]
 8004fd2:	2e00      	cmp	r6, #0
 8004fd4:	d158      	bne.n	8005088 <_dtoa_r+0x4f8>
 8004fd6:	4b82      	ldr	r3, [pc, #520]	; (80051e0 <_dtoa_r+0x650>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	4640      	mov	r0, r8
 8004fdc:	4649      	mov	r1, r9
 8004fde:	f7fb f963 	bl	80002a8 <__aeabi_dsub>
 8004fe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fe6:	4680      	mov	r8, r0
 8004fe8:	4689      	mov	r9, r1
 8004fea:	f7fb fda5 	bl	8000b38 <__aeabi_dcmpgt>
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	f040 8296 	bne.w	8005520 <_dtoa_r+0x990>
 8004ff4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004ff8:	4640      	mov	r0, r8
 8004ffa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ffe:	4649      	mov	r1, r9
 8005000:	f7fb fd7c 	bl	8000afc <__aeabi_dcmplt>
 8005004:	2800      	cmp	r0, #0
 8005006:	f040 8289 	bne.w	800551c <_dtoa_r+0x98c>
 800500a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800500e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005010:	2b00      	cmp	r3, #0
 8005012:	f2c0 814e 	blt.w	80052b2 <_dtoa_r+0x722>
 8005016:	f1bb 0f0e 	cmp.w	fp, #14
 800501a:	f300 814a 	bgt.w	80052b2 <_dtoa_r+0x722>
 800501e:	4b6b      	ldr	r3, [pc, #428]	; (80051cc <_dtoa_r+0x63c>)
 8005020:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005024:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800502a:	2b00      	cmp	r3, #0
 800502c:	f280 80dc 	bge.w	80051e8 <_dtoa_r+0x658>
 8005030:	9b04      	ldr	r3, [sp, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	f300 80d8 	bgt.w	80051e8 <_dtoa_r+0x658>
 8005038:	f040 826f 	bne.w	800551a <_dtoa_r+0x98a>
 800503c:	4b68      	ldr	r3, [pc, #416]	; (80051e0 <_dtoa_r+0x650>)
 800503e:	2200      	movs	r2, #0
 8005040:	4640      	mov	r0, r8
 8005042:	4649      	mov	r1, r9
 8005044:	f7fb fae8 	bl	8000618 <__aeabi_dmul>
 8005048:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800504c:	f7fb fd6a 	bl	8000b24 <__aeabi_dcmpge>
 8005050:	9e04      	ldr	r6, [sp, #16]
 8005052:	4637      	mov	r7, r6
 8005054:	2800      	cmp	r0, #0
 8005056:	f040 8245 	bne.w	80054e4 <_dtoa_r+0x954>
 800505a:	9d00      	ldr	r5, [sp, #0]
 800505c:	2331      	movs	r3, #49	; 0x31
 800505e:	f805 3b01 	strb.w	r3, [r5], #1
 8005062:	f10b 0b01 	add.w	fp, fp, #1
 8005066:	e241      	b.n	80054ec <_dtoa_r+0x95c>
 8005068:	07f2      	lsls	r2, r6, #31
 800506a:	d505      	bpl.n	8005078 <_dtoa_r+0x4e8>
 800506c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005070:	f7fb fad2 	bl	8000618 <__aeabi_dmul>
 8005074:	3501      	adds	r5, #1
 8005076:	2301      	movs	r3, #1
 8005078:	1076      	asrs	r6, r6, #1
 800507a:	3708      	adds	r7, #8
 800507c:	e773      	b.n	8004f66 <_dtoa_r+0x3d6>
 800507e:	2502      	movs	r5, #2
 8005080:	e775      	b.n	8004f6e <_dtoa_r+0x3de>
 8005082:	9e04      	ldr	r6, [sp, #16]
 8005084:	465f      	mov	r7, fp
 8005086:	e792      	b.n	8004fae <_dtoa_r+0x41e>
 8005088:	9900      	ldr	r1, [sp, #0]
 800508a:	4b50      	ldr	r3, [pc, #320]	; (80051cc <_dtoa_r+0x63c>)
 800508c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005090:	4431      	add	r1, r6
 8005092:	9102      	str	r1, [sp, #8]
 8005094:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005096:	eeb0 9a47 	vmov.f32	s18, s14
 800509a:	eef0 9a67 	vmov.f32	s19, s15
 800509e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80050a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80050a6:	2900      	cmp	r1, #0
 80050a8:	d044      	beq.n	8005134 <_dtoa_r+0x5a4>
 80050aa:	494e      	ldr	r1, [pc, #312]	; (80051e4 <_dtoa_r+0x654>)
 80050ac:	2000      	movs	r0, #0
 80050ae:	f7fb fbdd 	bl	800086c <__aeabi_ddiv>
 80050b2:	ec53 2b19 	vmov	r2, r3, d9
 80050b6:	f7fb f8f7 	bl	80002a8 <__aeabi_dsub>
 80050ba:	9d00      	ldr	r5, [sp, #0]
 80050bc:	ec41 0b19 	vmov	d9, r0, r1
 80050c0:	4649      	mov	r1, r9
 80050c2:	4640      	mov	r0, r8
 80050c4:	f7fb fd58 	bl	8000b78 <__aeabi_d2iz>
 80050c8:	4606      	mov	r6, r0
 80050ca:	f7fb fa3b 	bl	8000544 <__aeabi_i2d>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	4640      	mov	r0, r8
 80050d4:	4649      	mov	r1, r9
 80050d6:	f7fb f8e7 	bl	80002a8 <__aeabi_dsub>
 80050da:	3630      	adds	r6, #48	; 0x30
 80050dc:	f805 6b01 	strb.w	r6, [r5], #1
 80050e0:	ec53 2b19 	vmov	r2, r3, d9
 80050e4:	4680      	mov	r8, r0
 80050e6:	4689      	mov	r9, r1
 80050e8:	f7fb fd08 	bl	8000afc <__aeabi_dcmplt>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d164      	bne.n	80051ba <_dtoa_r+0x62a>
 80050f0:	4642      	mov	r2, r8
 80050f2:	464b      	mov	r3, r9
 80050f4:	4937      	ldr	r1, [pc, #220]	; (80051d4 <_dtoa_r+0x644>)
 80050f6:	2000      	movs	r0, #0
 80050f8:	f7fb f8d6 	bl	80002a8 <__aeabi_dsub>
 80050fc:	ec53 2b19 	vmov	r2, r3, d9
 8005100:	f7fb fcfc 	bl	8000afc <__aeabi_dcmplt>
 8005104:	2800      	cmp	r0, #0
 8005106:	f040 80b6 	bne.w	8005276 <_dtoa_r+0x6e6>
 800510a:	9b02      	ldr	r3, [sp, #8]
 800510c:	429d      	cmp	r5, r3
 800510e:	f43f af7c 	beq.w	800500a <_dtoa_r+0x47a>
 8005112:	4b31      	ldr	r3, [pc, #196]	; (80051d8 <_dtoa_r+0x648>)
 8005114:	ec51 0b19 	vmov	r0, r1, d9
 8005118:	2200      	movs	r2, #0
 800511a:	f7fb fa7d 	bl	8000618 <__aeabi_dmul>
 800511e:	4b2e      	ldr	r3, [pc, #184]	; (80051d8 <_dtoa_r+0x648>)
 8005120:	ec41 0b19 	vmov	d9, r0, r1
 8005124:	2200      	movs	r2, #0
 8005126:	4640      	mov	r0, r8
 8005128:	4649      	mov	r1, r9
 800512a:	f7fb fa75 	bl	8000618 <__aeabi_dmul>
 800512e:	4680      	mov	r8, r0
 8005130:	4689      	mov	r9, r1
 8005132:	e7c5      	b.n	80050c0 <_dtoa_r+0x530>
 8005134:	ec51 0b17 	vmov	r0, r1, d7
 8005138:	f7fb fa6e 	bl	8000618 <__aeabi_dmul>
 800513c:	9b02      	ldr	r3, [sp, #8]
 800513e:	9d00      	ldr	r5, [sp, #0]
 8005140:	930f      	str	r3, [sp, #60]	; 0x3c
 8005142:	ec41 0b19 	vmov	d9, r0, r1
 8005146:	4649      	mov	r1, r9
 8005148:	4640      	mov	r0, r8
 800514a:	f7fb fd15 	bl	8000b78 <__aeabi_d2iz>
 800514e:	4606      	mov	r6, r0
 8005150:	f7fb f9f8 	bl	8000544 <__aeabi_i2d>
 8005154:	3630      	adds	r6, #48	; 0x30
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	4640      	mov	r0, r8
 800515c:	4649      	mov	r1, r9
 800515e:	f7fb f8a3 	bl	80002a8 <__aeabi_dsub>
 8005162:	f805 6b01 	strb.w	r6, [r5], #1
 8005166:	9b02      	ldr	r3, [sp, #8]
 8005168:	429d      	cmp	r5, r3
 800516a:	4680      	mov	r8, r0
 800516c:	4689      	mov	r9, r1
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	d124      	bne.n	80051be <_dtoa_r+0x62e>
 8005174:	4b1b      	ldr	r3, [pc, #108]	; (80051e4 <_dtoa_r+0x654>)
 8005176:	ec51 0b19 	vmov	r0, r1, d9
 800517a:	f7fb f897 	bl	80002ac <__adddf3>
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	4640      	mov	r0, r8
 8005184:	4649      	mov	r1, r9
 8005186:	f7fb fcd7 	bl	8000b38 <__aeabi_dcmpgt>
 800518a:	2800      	cmp	r0, #0
 800518c:	d173      	bne.n	8005276 <_dtoa_r+0x6e6>
 800518e:	ec53 2b19 	vmov	r2, r3, d9
 8005192:	4914      	ldr	r1, [pc, #80]	; (80051e4 <_dtoa_r+0x654>)
 8005194:	2000      	movs	r0, #0
 8005196:	f7fb f887 	bl	80002a8 <__aeabi_dsub>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4640      	mov	r0, r8
 80051a0:	4649      	mov	r1, r9
 80051a2:	f7fb fcab 	bl	8000afc <__aeabi_dcmplt>
 80051a6:	2800      	cmp	r0, #0
 80051a8:	f43f af2f 	beq.w	800500a <_dtoa_r+0x47a>
 80051ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80051ae:	1e6b      	subs	r3, r5, #1
 80051b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80051b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80051b6:	2b30      	cmp	r3, #48	; 0x30
 80051b8:	d0f8      	beq.n	80051ac <_dtoa_r+0x61c>
 80051ba:	46bb      	mov	fp, r7
 80051bc:	e04a      	b.n	8005254 <_dtoa_r+0x6c4>
 80051be:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <_dtoa_r+0x648>)
 80051c0:	f7fb fa2a 	bl	8000618 <__aeabi_dmul>
 80051c4:	4680      	mov	r8, r0
 80051c6:	4689      	mov	r9, r1
 80051c8:	e7bd      	b.n	8005146 <_dtoa_r+0x5b6>
 80051ca:	bf00      	nop
 80051cc:	080069f0 	.word	0x080069f0
 80051d0:	080069c8 	.word	0x080069c8
 80051d4:	3ff00000 	.word	0x3ff00000
 80051d8:	40240000 	.word	0x40240000
 80051dc:	401c0000 	.word	0x401c0000
 80051e0:	40140000 	.word	0x40140000
 80051e4:	3fe00000 	.word	0x3fe00000
 80051e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80051ec:	9d00      	ldr	r5, [sp, #0]
 80051ee:	4642      	mov	r2, r8
 80051f0:	464b      	mov	r3, r9
 80051f2:	4630      	mov	r0, r6
 80051f4:	4639      	mov	r1, r7
 80051f6:	f7fb fb39 	bl	800086c <__aeabi_ddiv>
 80051fa:	f7fb fcbd 	bl	8000b78 <__aeabi_d2iz>
 80051fe:	9001      	str	r0, [sp, #4]
 8005200:	f7fb f9a0 	bl	8000544 <__aeabi_i2d>
 8005204:	4642      	mov	r2, r8
 8005206:	464b      	mov	r3, r9
 8005208:	f7fb fa06 	bl	8000618 <__aeabi_dmul>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4630      	mov	r0, r6
 8005212:	4639      	mov	r1, r7
 8005214:	f7fb f848 	bl	80002a8 <__aeabi_dsub>
 8005218:	9e01      	ldr	r6, [sp, #4]
 800521a:	9f04      	ldr	r7, [sp, #16]
 800521c:	3630      	adds	r6, #48	; 0x30
 800521e:	f805 6b01 	strb.w	r6, [r5], #1
 8005222:	9e00      	ldr	r6, [sp, #0]
 8005224:	1bae      	subs	r6, r5, r6
 8005226:	42b7      	cmp	r7, r6
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	d134      	bne.n	8005298 <_dtoa_r+0x708>
 800522e:	f7fb f83d 	bl	80002ac <__adddf3>
 8005232:	4642      	mov	r2, r8
 8005234:	464b      	mov	r3, r9
 8005236:	4606      	mov	r6, r0
 8005238:	460f      	mov	r7, r1
 800523a:	f7fb fc7d 	bl	8000b38 <__aeabi_dcmpgt>
 800523e:	b9c8      	cbnz	r0, 8005274 <_dtoa_r+0x6e4>
 8005240:	4642      	mov	r2, r8
 8005242:	464b      	mov	r3, r9
 8005244:	4630      	mov	r0, r6
 8005246:	4639      	mov	r1, r7
 8005248:	f7fb fc4e 	bl	8000ae8 <__aeabi_dcmpeq>
 800524c:	b110      	cbz	r0, 8005254 <_dtoa_r+0x6c4>
 800524e:	9b01      	ldr	r3, [sp, #4]
 8005250:	07db      	lsls	r3, r3, #31
 8005252:	d40f      	bmi.n	8005274 <_dtoa_r+0x6e4>
 8005254:	4651      	mov	r1, sl
 8005256:	4620      	mov	r0, r4
 8005258:	f000 fbcc 	bl	80059f4 <_Bfree>
 800525c:	2300      	movs	r3, #0
 800525e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005260:	702b      	strb	r3, [r5, #0]
 8005262:	f10b 0301 	add.w	r3, fp, #1
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800526a:	2b00      	cmp	r3, #0
 800526c:	f43f ace2 	beq.w	8004c34 <_dtoa_r+0xa4>
 8005270:	601d      	str	r5, [r3, #0]
 8005272:	e4df      	b.n	8004c34 <_dtoa_r+0xa4>
 8005274:	465f      	mov	r7, fp
 8005276:	462b      	mov	r3, r5
 8005278:	461d      	mov	r5, r3
 800527a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800527e:	2a39      	cmp	r2, #57	; 0x39
 8005280:	d106      	bne.n	8005290 <_dtoa_r+0x700>
 8005282:	9a00      	ldr	r2, [sp, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d1f7      	bne.n	8005278 <_dtoa_r+0x6e8>
 8005288:	9900      	ldr	r1, [sp, #0]
 800528a:	2230      	movs	r2, #48	; 0x30
 800528c:	3701      	adds	r7, #1
 800528e:	700a      	strb	r2, [r1, #0]
 8005290:	781a      	ldrb	r2, [r3, #0]
 8005292:	3201      	adds	r2, #1
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	e790      	b.n	80051ba <_dtoa_r+0x62a>
 8005298:	4ba3      	ldr	r3, [pc, #652]	; (8005528 <_dtoa_r+0x998>)
 800529a:	2200      	movs	r2, #0
 800529c:	f7fb f9bc 	bl	8000618 <__aeabi_dmul>
 80052a0:	2200      	movs	r2, #0
 80052a2:	2300      	movs	r3, #0
 80052a4:	4606      	mov	r6, r0
 80052a6:	460f      	mov	r7, r1
 80052a8:	f7fb fc1e 	bl	8000ae8 <__aeabi_dcmpeq>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	d09e      	beq.n	80051ee <_dtoa_r+0x65e>
 80052b0:	e7d0      	b.n	8005254 <_dtoa_r+0x6c4>
 80052b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052b4:	2a00      	cmp	r2, #0
 80052b6:	f000 80ca 	beq.w	800544e <_dtoa_r+0x8be>
 80052ba:	9a07      	ldr	r2, [sp, #28]
 80052bc:	2a01      	cmp	r2, #1
 80052be:	f300 80ad 	bgt.w	800541c <_dtoa_r+0x88c>
 80052c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052c4:	2a00      	cmp	r2, #0
 80052c6:	f000 80a5 	beq.w	8005414 <_dtoa_r+0x884>
 80052ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80052ce:	9e08      	ldr	r6, [sp, #32]
 80052d0:	9d05      	ldr	r5, [sp, #20]
 80052d2:	9a05      	ldr	r2, [sp, #20]
 80052d4:	441a      	add	r2, r3
 80052d6:	9205      	str	r2, [sp, #20]
 80052d8:	9a06      	ldr	r2, [sp, #24]
 80052da:	2101      	movs	r1, #1
 80052dc:	441a      	add	r2, r3
 80052de:	4620      	mov	r0, r4
 80052e0:	9206      	str	r2, [sp, #24]
 80052e2:	f000 fc3d 	bl	8005b60 <__i2b>
 80052e6:	4607      	mov	r7, r0
 80052e8:	b165      	cbz	r5, 8005304 <_dtoa_r+0x774>
 80052ea:	9b06      	ldr	r3, [sp, #24]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	dd09      	ble.n	8005304 <_dtoa_r+0x774>
 80052f0:	42ab      	cmp	r3, r5
 80052f2:	9a05      	ldr	r2, [sp, #20]
 80052f4:	bfa8      	it	ge
 80052f6:	462b      	movge	r3, r5
 80052f8:	1ad2      	subs	r2, r2, r3
 80052fa:	9205      	str	r2, [sp, #20]
 80052fc:	9a06      	ldr	r2, [sp, #24]
 80052fe:	1aed      	subs	r5, r5, r3
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	9306      	str	r3, [sp, #24]
 8005304:	9b08      	ldr	r3, [sp, #32]
 8005306:	b1f3      	cbz	r3, 8005346 <_dtoa_r+0x7b6>
 8005308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 80a3 	beq.w	8005456 <_dtoa_r+0x8c6>
 8005310:	2e00      	cmp	r6, #0
 8005312:	dd10      	ble.n	8005336 <_dtoa_r+0x7a6>
 8005314:	4639      	mov	r1, r7
 8005316:	4632      	mov	r2, r6
 8005318:	4620      	mov	r0, r4
 800531a:	f000 fce1 	bl	8005ce0 <__pow5mult>
 800531e:	4652      	mov	r2, sl
 8005320:	4601      	mov	r1, r0
 8005322:	4607      	mov	r7, r0
 8005324:	4620      	mov	r0, r4
 8005326:	f000 fc31 	bl	8005b8c <__multiply>
 800532a:	4651      	mov	r1, sl
 800532c:	4680      	mov	r8, r0
 800532e:	4620      	mov	r0, r4
 8005330:	f000 fb60 	bl	80059f4 <_Bfree>
 8005334:	46c2      	mov	sl, r8
 8005336:	9b08      	ldr	r3, [sp, #32]
 8005338:	1b9a      	subs	r2, r3, r6
 800533a:	d004      	beq.n	8005346 <_dtoa_r+0x7b6>
 800533c:	4651      	mov	r1, sl
 800533e:	4620      	mov	r0, r4
 8005340:	f000 fcce 	bl	8005ce0 <__pow5mult>
 8005344:	4682      	mov	sl, r0
 8005346:	2101      	movs	r1, #1
 8005348:	4620      	mov	r0, r4
 800534a:	f000 fc09 	bl	8005b60 <__i2b>
 800534e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005350:	2b00      	cmp	r3, #0
 8005352:	4606      	mov	r6, r0
 8005354:	f340 8081 	ble.w	800545a <_dtoa_r+0x8ca>
 8005358:	461a      	mov	r2, r3
 800535a:	4601      	mov	r1, r0
 800535c:	4620      	mov	r0, r4
 800535e:	f000 fcbf 	bl	8005ce0 <__pow5mult>
 8005362:	9b07      	ldr	r3, [sp, #28]
 8005364:	2b01      	cmp	r3, #1
 8005366:	4606      	mov	r6, r0
 8005368:	dd7a      	ble.n	8005460 <_dtoa_r+0x8d0>
 800536a:	f04f 0800 	mov.w	r8, #0
 800536e:	6933      	ldr	r3, [r6, #16]
 8005370:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005374:	6918      	ldr	r0, [r3, #16]
 8005376:	f000 fba5 	bl	8005ac4 <__hi0bits>
 800537a:	f1c0 0020 	rsb	r0, r0, #32
 800537e:	9b06      	ldr	r3, [sp, #24]
 8005380:	4418      	add	r0, r3
 8005382:	f010 001f 	ands.w	r0, r0, #31
 8005386:	f000 8094 	beq.w	80054b2 <_dtoa_r+0x922>
 800538a:	f1c0 0320 	rsb	r3, r0, #32
 800538e:	2b04      	cmp	r3, #4
 8005390:	f340 8085 	ble.w	800549e <_dtoa_r+0x90e>
 8005394:	9b05      	ldr	r3, [sp, #20]
 8005396:	f1c0 001c 	rsb	r0, r0, #28
 800539a:	4403      	add	r3, r0
 800539c:	9305      	str	r3, [sp, #20]
 800539e:	9b06      	ldr	r3, [sp, #24]
 80053a0:	4403      	add	r3, r0
 80053a2:	4405      	add	r5, r0
 80053a4:	9306      	str	r3, [sp, #24]
 80053a6:	9b05      	ldr	r3, [sp, #20]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	dd05      	ble.n	80053b8 <_dtoa_r+0x828>
 80053ac:	4651      	mov	r1, sl
 80053ae:	461a      	mov	r2, r3
 80053b0:	4620      	mov	r0, r4
 80053b2:	f000 fcef 	bl	8005d94 <__lshift>
 80053b6:	4682      	mov	sl, r0
 80053b8:	9b06      	ldr	r3, [sp, #24]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	dd05      	ble.n	80053ca <_dtoa_r+0x83a>
 80053be:	4631      	mov	r1, r6
 80053c0:	461a      	mov	r2, r3
 80053c2:	4620      	mov	r0, r4
 80053c4:	f000 fce6 	bl	8005d94 <__lshift>
 80053c8:	4606      	mov	r6, r0
 80053ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d072      	beq.n	80054b6 <_dtoa_r+0x926>
 80053d0:	4631      	mov	r1, r6
 80053d2:	4650      	mov	r0, sl
 80053d4:	f000 fd4a 	bl	8005e6c <__mcmp>
 80053d8:	2800      	cmp	r0, #0
 80053da:	da6c      	bge.n	80054b6 <_dtoa_r+0x926>
 80053dc:	2300      	movs	r3, #0
 80053de:	4651      	mov	r1, sl
 80053e0:	220a      	movs	r2, #10
 80053e2:	4620      	mov	r0, r4
 80053e4:	f000 fb28 	bl	8005a38 <__multadd>
 80053e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80053ee:	4682      	mov	sl, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 81b0 	beq.w	8005756 <_dtoa_r+0xbc6>
 80053f6:	2300      	movs	r3, #0
 80053f8:	4639      	mov	r1, r7
 80053fa:	220a      	movs	r2, #10
 80053fc:	4620      	mov	r0, r4
 80053fe:	f000 fb1b 	bl	8005a38 <__multadd>
 8005402:	9b01      	ldr	r3, [sp, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	4607      	mov	r7, r0
 8005408:	f300 8096 	bgt.w	8005538 <_dtoa_r+0x9a8>
 800540c:	9b07      	ldr	r3, [sp, #28]
 800540e:	2b02      	cmp	r3, #2
 8005410:	dc59      	bgt.n	80054c6 <_dtoa_r+0x936>
 8005412:	e091      	b.n	8005538 <_dtoa_r+0x9a8>
 8005414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005416:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800541a:	e758      	b.n	80052ce <_dtoa_r+0x73e>
 800541c:	9b04      	ldr	r3, [sp, #16]
 800541e:	1e5e      	subs	r6, r3, #1
 8005420:	9b08      	ldr	r3, [sp, #32]
 8005422:	42b3      	cmp	r3, r6
 8005424:	bfbf      	itttt	lt
 8005426:	9b08      	ldrlt	r3, [sp, #32]
 8005428:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800542a:	9608      	strlt	r6, [sp, #32]
 800542c:	1af3      	sublt	r3, r6, r3
 800542e:	bfb4      	ite	lt
 8005430:	18d2      	addlt	r2, r2, r3
 8005432:	1b9e      	subge	r6, r3, r6
 8005434:	9b04      	ldr	r3, [sp, #16]
 8005436:	bfbc      	itt	lt
 8005438:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800543a:	2600      	movlt	r6, #0
 800543c:	2b00      	cmp	r3, #0
 800543e:	bfb7      	itett	lt
 8005440:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005444:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005448:	1a9d      	sublt	r5, r3, r2
 800544a:	2300      	movlt	r3, #0
 800544c:	e741      	b.n	80052d2 <_dtoa_r+0x742>
 800544e:	9e08      	ldr	r6, [sp, #32]
 8005450:	9d05      	ldr	r5, [sp, #20]
 8005452:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005454:	e748      	b.n	80052e8 <_dtoa_r+0x758>
 8005456:	9a08      	ldr	r2, [sp, #32]
 8005458:	e770      	b.n	800533c <_dtoa_r+0x7ac>
 800545a:	9b07      	ldr	r3, [sp, #28]
 800545c:	2b01      	cmp	r3, #1
 800545e:	dc19      	bgt.n	8005494 <_dtoa_r+0x904>
 8005460:	9b02      	ldr	r3, [sp, #8]
 8005462:	b9bb      	cbnz	r3, 8005494 <_dtoa_r+0x904>
 8005464:	9b03      	ldr	r3, [sp, #12]
 8005466:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800546a:	b99b      	cbnz	r3, 8005494 <_dtoa_r+0x904>
 800546c:	9b03      	ldr	r3, [sp, #12]
 800546e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005472:	0d1b      	lsrs	r3, r3, #20
 8005474:	051b      	lsls	r3, r3, #20
 8005476:	b183      	cbz	r3, 800549a <_dtoa_r+0x90a>
 8005478:	9b05      	ldr	r3, [sp, #20]
 800547a:	3301      	adds	r3, #1
 800547c:	9305      	str	r3, [sp, #20]
 800547e:	9b06      	ldr	r3, [sp, #24]
 8005480:	3301      	adds	r3, #1
 8005482:	9306      	str	r3, [sp, #24]
 8005484:	f04f 0801 	mov.w	r8, #1
 8005488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800548a:	2b00      	cmp	r3, #0
 800548c:	f47f af6f 	bne.w	800536e <_dtoa_r+0x7de>
 8005490:	2001      	movs	r0, #1
 8005492:	e774      	b.n	800537e <_dtoa_r+0x7ee>
 8005494:	f04f 0800 	mov.w	r8, #0
 8005498:	e7f6      	b.n	8005488 <_dtoa_r+0x8f8>
 800549a:	4698      	mov	r8, r3
 800549c:	e7f4      	b.n	8005488 <_dtoa_r+0x8f8>
 800549e:	d082      	beq.n	80053a6 <_dtoa_r+0x816>
 80054a0:	9a05      	ldr	r2, [sp, #20]
 80054a2:	331c      	adds	r3, #28
 80054a4:	441a      	add	r2, r3
 80054a6:	9205      	str	r2, [sp, #20]
 80054a8:	9a06      	ldr	r2, [sp, #24]
 80054aa:	441a      	add	r2, r3
 80054ac:	441d      	add	r5, r3
 80054ae:	9206      	str	r2, [sp, #24]
 80054b0:	e779      	b.n	80053a6 <_dtoa_r+0x816>
 80054b2:	4603      	mov	r3, r0
 80054b4:	e7f4      	b.n	80054a0 <_dtoa_r+0x910>
 80054b6:	9b04      	ldr	r3, [sp, #16]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	dc37      	bgt.n	800552c <_dtoa_r+0x99c>
 80054bc:	9b07      	ldr	r3, [sp, #28]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	dd34      	ble.n	800552c <_dtoa_r+0x99c>
 80054c2:	9b04      	ldr	r3, [sp, #16]
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	9b01      	ldr	r3, [sp, #4]
 80054c8:	b963      	cbnz	r3, 80054e4 <_dtoa_r+0x954>
 80054ca:	4631      	mov	r1, r6
 80054cc:	2205      	movs	r2, #5
 80054ce:	4620      	mov	r0, r4
 80054d0:	f000 fab2 	bl	8005a38 <__multadd>
 80054d4:	4601      	mov	r1, r0
 80054d6:	4606      	mov	r6, r0
 80054d8:	4650      	mov	r0, sl
 80054da:	f000 fcc7 	bl	8005e6c <__mcmp>
 80054de:	2800      	cmp	r0, #0
 80054e0:	f73f adbb 	bgt.w	800505a <_dtoa_r+0x4ca>
 80054e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054e6:	9d00      	ldr	r5, [sp, #0]
 80054e8:	ea6f 0b03 	mvn.w	fp, r3
 80054ec:	f04f 0800 	mov.w	r8, #0
 80054f0:	4631      	mov	r1, r6
 80054f2:	4620      	mov	r0, r4
 80054f4:	f000 fa7e 	bl	80059f4 <_Bfree>
 80054f8:	2f00      	cmp	r7, #0
 80054fa:	f43f aeab 	beq.w	8005254 <_dtoa_r+0x6c4>
 80054fe:	f1b8 0f00 	cmp.w	r8, #0
 8005502:	d005      	beq.n	8005510 <_dtoa_r+0x980>
 8005504:	45b8      	cmp	r8, r7
 8005506:	d003      	beq.n	8005510 <_dtoa_r+0x980>
 8005508:	4641      	mov	r1, r8
 800550a:	4620      	mov	r0, r4
 800550c:	f000 fa72 	bl	80059f4 <_Bfree>
 8005510:	4639      	mov	r1, r7
 8005512:	4620      	mov	r0, r4
 8005514:	f000 fa6e 	bl	80059f4 <_Bfree>
 8005518:	e69c      	b.n	8005254 <_dtoa_r+0x6c4>
 800551a:	2600      	movs	r6, #0
 800551c:	4637      	mov	r7, r6
 800551e:	e7e1      	b.n	80054e4 <_dtoa_r+0x954>
 8005520:	46bb      	mov	fp, r7
 8005522:	4637      	mov	r7, r6
 8005524:	e599      	b.n	800505a <_dtoa_r+0x4ca>
 8005526:	bf00      	nop
 8005528:	40240000 	.word	0x40240000
 800552c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 80c8 	beq.w	80056c4 <_dtoa_r+0xb34>
 8005534:	9b04      	ldr	r3, [sp, #16]
 8005536:	9301      	str	r3, [sp, #4]
 8005538:	2d00      	cmp	r5, #0
 800553a:	dd05      	ble.n	8005548 <_dtoa_r+0x9b8>
 800553c:	4639      	mov	r1, r7
 800553e:	462a      	mov	r2, r5
 8005540:	4620      	mov	r0, r4
 8005542:	f000 fc27 	bl	8005d94 <__lshift>
 8005546:	4607      	mov	r7, r0
 8005548:	f1b8 0f00 	cmp.w	r8, #0
 800554c:	d05b      	beq.n	8005606 <_dtoa_r+0xa76>
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	4620      	mov	r0, r4
 8005552:	f000 fa0f 	bl	8005974 <_Balloc>
 8005556:	4605      	mov	r5, r0
 8005558:	b928      	cbnz	r0, 8005566 <_dtoa_r+0x9d6>
 800555a:	4b83      	ldr	r3, [pc, #524]	; (8005768 <_dtoa_r+0xbd8>)
 800555c:	4602      	mov	r2, r0
 800555e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005562:	f7ff bb2e 	b.w	8004bc2 <_dtoa_r+0x32>
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	3202      	adds	r2, #2
 800556a:	0092      	lsls	r2, r2, #2
 800556c:	f107 010c 	add.w	r1, r7, #12
 8005570:	300c      	adds	r0, #12
 8005572:	f001 f813 	bl	800659c <memcpy>
 8005576:	2201      	movs	r2, #1
 8005578:	4629      	mov	r1, r5
 800557a:	4620      	mov	r0, r4
 800557c:	f000 fc0a 	bl	8005d94 <__lshift>
 8005580:	9b00      	ldr	r3, [sp, #0]
 8005582:	3301      	adds	r3, #1
 8005584:	9304      	str	r3, [sp, #16]
 8005586:	e9dd 2300 	ldrd	r2, r3, [sp]
 800558a:	4413      	add	r3, r2
 800558c:	9308      	str	r3, [sp, #32]
 800558e:	9b02      	ldr	r3, [sp, #8]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	46b8      	mov	r8, r7
 8005596:	9306      	str	r3, [sp, #24]
 8005598:	4607      	mov	r7, r0
 800559a:	9b04      	ldr	r3, [sp, #16]
 800559c:	4631      	mov	r1, r6
 800559e:	3b01      	subs	r3, #1
 80055a0:	4650      	mov	r0, sl
 80055a2:	9301      	str	r3, [sp, #4]
 80055a4:	f7ff fa69 	bl	8004a7a <quorem>
 80055a8:	4641      	mov	r1, r8
 80055aa:	9002      	str	r0, [sp, #8]
 80055ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80055b0:	4650      	mov	r0, sl
 80055b2:	f000 fc5b 	bl	8005e6c <__mcmp>
 80055b6:	463a      	mov	r2, r7
 80055b8:	9005      	str	r0, [sp, #20]
 80055ba:	4631      	mov	r1, r6
 80055bc:	4620      	mov	r0, r4
 80055be:	f000 fc71 	bl	8005ea4 <__mdiff>
 80055c2:	68c2      	ldr	r2, [r0, #12]
 80055c4:	4605      	mov	r5, r0
 80055c6:	bb02      	cbnz	r2, 800560a <_dtoa_r+0xa7a>
 80055c8:	4601      	mov	r1, r0
 80055ca:	4650      	mov	r0, sl
 80055cc:	f000 fc4e 	bl	8005e6c <__mcmp>
 80055d0:	4602      	mov	r2, r0
 80055d2:	4629      	mov	r1, r5
 80055d4:	4620      	mov	r0, r4
 80055d6:	9209      	str	r2, [sp, #36]	; 0x24
 80055d8:	f000 fa0c 	bl	80059f4 <_Bfree>
 80055dc:	9b07      	ldr	r3, [sp, #28]
 80055de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055e0:	9d04      	ldr	r5, [sp, #16]
 80055e2:	ea43 0102 	orr.w	r1, r3, r2
 80055e6:	9b06      	ldr	r3, [sp, #24]
 80055e8:	4319      	orrs	r1, r3
 80055ea:	d110      	bne.n	800560e <_dtoa_r+0xa7e>
 80055ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80055f0:	d029      	beq.n	8005646 <_dtoa_r+0xab6>
 80055f2:	9b05      	ldr	r3, [sp, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	dd02      	ble.n	80055fe <_dtoa_r+0xa6e>
 80055f8:	9b02      	ldr	r3, [sp, #8]
 80055fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80055fe:	9b01      	ldr	r3, [sp, #4]
 8005600:	f883 9000 	strb.w	r9, [r3]
 8005604:	e774      	b.n	80054f0 <_dtoa_r+0x960>
 8005606:	4638      	mov	r0, r7
 8005608:	e7ba      	b.n	8005580 <_dtoa_r+0x9f0>
 800560a:	2201      	movs	r2, #1
 800560c:	e7e1      	b.n	80055d2 <_dtoa_r+0xa42>
 800560e:	9b05      	ldr	r3, [sp, #20]
 8005610:	2b00      	cmp	r3, #0
 8005612:	db04      	blt.n	800561e <_dtoa_r+0xa8e>
 8005614:	9907      	ldr	r1, [sp, #28]
 8005616:	430b      	orrs	r3, r1
 8005618:	9906      	ldr	r1, [sp, #24]
 800561a:	430b      	orrs	r3, r1
 800561c:	d120      	bne.n	8005660 <_dtoa_r+0xad0>
 800561e:	2a00      	cmp	r2, #0
 8005620:	dded      	ble.n	80055fe <_dtoa_r+0xa6e>
 8005622:	4651      	mov	r1, sl
 8005624:	2201      	movs	r2, #1
 8005626:	4620      	mov	r0, r4
 8005628:	f000 fbb4 	bl	8005d94 <__lshift>
 800562c:	4631      	mov	r1, r6
 800562e:	4682      	mov	sl, r0
 8005630:	f000 fc1c 	bl	8005e6c <__mcmp>
 8005634:	2800      	cmp	r0, #0
 8005636:	dc03      	bgt.n	8005640 <_dtoa_r+0xab0>
 8005638:	d1e1      	bne.n	80055fe <_dtoa_r+0xa6e>
 800563a:	f019 0f01 	tst.w	r9, #1
 800563e:	d0de      	beq.n	80055fe <_dtoa_r+0xa6e>
 8005640:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005644:	d1d8      	bne.n	80055f8 <_dtoa_r+0xa68>
 8005646:	9a01      	ldr	r2, [sp, #4]
 8005648:	2339      	movs	r3, #57	; 0x39
 800564a:	7013      	strb	r3, [r2, #0]
 800564c:	462b      	mov	r3, r5
 800564e:	461d      	mov	r5, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005656:	2a39      	cmp	r2, #57	; 0x39
 8005658:	d06c      	beq.n	8005734 <_dtoa_r+0xba4>
 800565a:	3201      	adds	r2, #1
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	e747      	b.n	80054f0 <_dtoa_r+0x960>
 8005660:	2a00      	cmp	r2, #0
 8005662:	dd07      	ble.n	8005674 <_dtoa_r+0xae4>
 8005664:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005668:	d0ed      	beq.n	8005646 <_dtoa_r+0xab6>
 800566a:	9a01      	ldr	r2, [sp, #4]
 800566c:	f109 0301 	add.w	r3, r9, #1
 8005670:	7013      	strb	r3, [r2, #0]
 8005672:	e73d      	b.n	80054f0 <_dtoa_r+0x960>
 8005674:	9b04      	ldr	r3, [sp, #16]
 8005676:	9a08      	ldr	r2, [sp, #32]
 8005678:	f803 9c01 	strb.w	r9, [r3, #-1]
 800567c:	4293      	cmp	r3, r2
 800567e:	d043      	beq.n	8005708 <_dtoa_r+0xb78>
 8005680:	4651      	mov	r1, sl
 8005682:	2300      	movs	r3, #0
 8005684:	220a      	movs	r2, #10
 8005686:	4620      	mov	r0, r4
 8005688:	f000 f9d6 	bl	8005a38 <__multadd>
 800568c:	45b8      	cmp	r8, r7
 800568e:	4682      	mov	sl, r0
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	f04f 020a 	mov.w	r2, #10
 8005698:	4641      	mov	r1, r8
 800569a:	4620      	mov	r0, r4
 800569c:	d107      	bne.n	80056ae <_dtoa_r+0xb1e>
 800569e:	f000 f9cb 	bl	8005a38 <__multadd>
 80056a2:	4680      	mov	r8, r0
 80056a4:	4607      	mov	r7, r0
 80056a6:	9b04      	ldr	r3, [sp, #16]
 80056a8:	3301      	adds	r3, #1
 80056aa:	9304      	str	r3, [sp, #16]
 80056ac:	e775      	b.n	800559a <_dtoa_r+0xa0a>
 80056ae:	f000 f9c3 	bl	8005a38 <__multadd>
 80056b2:	4639      	mov	r1, r7
 80056b4:	4680      	mov	r8, r0
 80056b6:	2300      	movs	r3, #0
 80056b8:	220a      	movs	r2, #10
 80056ba:	4620      	mov	r0, r4
 80056bc:	f000 f9bc 	bl	8005a38 <__multadd>
 80056c0:	4607      	mov	r7, r0
 80056c2:	e7f0      	b.n	80056a6 <_dtoa_r+0xb16>
 80056c4:	9b04      	ldr	r3, [sp, #16]
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	9d00      	ldr	r5, [sp, #0]
 80056ca:	4631      	mov	r1, r6
 80056cc:	4650      	mov	r0, sl
 80056ce:	f7ff f9d4 	bl	8004a7a <quorem>
 80056d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80056d6:	9b00      	ldr	r3, [sp, #0]
 80056d8:	f805 9b01 	strb.w	r9, [r5], #1
 80056dc:	1aea      	subs	r2, r5, r3
 80056de:	9b01      	ldr	r3, [sp, #4]
 80056e0:	4293      	cmp	r3, r2
 80056e2:	dd07      	ble.n	80056f4 <_dtoa_r+0xb64>
 80056e4:	4651      	mov	r1, sl
 80056e6:	2300      	movs	r3, #0
 80056e8:	220a      	movs	r2, #10
 80056ea:	4620      	mov	r0, r4
 80056ec:	f000 f9a4 	bl	8005a38 <__multadd>
 80056f0:	4682      	mov	sl, r0
 80056f2:	e7ea      	b.n	80056ca <_dtoa_r+0xb3a>
 80056f4:	9b01      	ldr	r3, [sp, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bfc8      	it	gt
 80056fa:	461d      	movgt	r5, r3
 80056fc:	9b00      	ldr	r3, [sp, #0]
 80056fe:	bfd8      	it	le
 8005700:	2501      	movle	r5, #1
 8005702:	441d      	add	r5, r3
 8005704:	f04f 0800 	mov.w	r8, #0
 8005708:	4651      	mov	r1, sl
 800570a:	2201      	movs	r2, #1
 800570c:	4620      	mov	r0, r4
 800570e:	f000 fb41 	bl	8005d94 <__lshift>
 8005712:	4631      	mov	r1, r6
 8005714:	4682      	mov	sl, r0
 8005716:	f000 fba9 	bl	8005e6c <__mcmp>
 800571a:	2800      	cmp	r0, #0
 800571c:	dc96      	bgt.n	800564c <_dtoa_r+0xabc>
 800571e:	d102      	bne.n	8005726 <_dtoa_r+0xb96>
 8005720:	f019 0f01 	tst.w	r9, #1
 8005724:	d192      	bne.n	800564c <_dtoa_r+0xabc>
 8005726:	462b      	mov	r3, r5
 8005728:	461d      	mov	r5, r3
 800572a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800572e:	2a30      	cmp	r2, #48	; 0x30
 8005730:	d0fa      	beq.n	8005728 <_dtoa_r+0xb98>
 8005732:	e6dd      	b.n	80054f0 <_dtoa_r+0x960>
 8005734:	9a00      	ldr	r2, [sp, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d189      	bne.n	800564e <_dtoa_r+0xabe>
 800573a:	f10b 0b01 	add.w	fp, fp, #1
 800573e:	2331      	movs	r3, #49	; 0x31
 8005740:	e796      	b.n	8005670 <_dtoa_r+0xae0>
 8005742:	4b0a      	ldr	r3, [pc, #40]	; (800576c <_dtoa_r+0xbdc>)
 8005744:	f7ff ba99 	b.w	8004c7a <_dtoa_r+0xea>
 8005748:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800574a:	2b00      	cmp	r3, #0
 800574c:	f47f aa6d 	bne.w	8004c2a <_dtoa_r+0x9a>
 8005750:	4b07      	ldr	r3, [pc, #28]	; (8005770 <_dtoa_r+0xbe0>)
 8005752:	f7ff ba92 	b.w	8004c7a <_dtoa_r+0xea>
 8005756:	9b01      	ldr	r3, [sp, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	dcb5      	bgt.n	80056c8 <_dtoa_r+0xb38>
 800575c:	9b07      	ldr	r3, [sp, #28]
 800575e:	2b02      	cmp	r3, #2
 8005760:	f73f aeb1 	bgt.w	80054c6 <_dtoa_r+0x936>
 8005764:	e7b0      	b.n	80056c8 <_dtoa_r+0xb38>
 8005766:	bf00      	nop
 8005768:	08006958 	.word	0x08006958
 800576c:	080068b8 	.word	0x080068b8
 8005770:	080068dc 	.word	0x080068dc

08005774 <_free_r>:
 8005774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005776:	2900      	cmp	r1, #0
 8005778:	d044      	beq.n	8005804 <_free_r+0x90>
 800577a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800577e:	9001      	str	r0, [sp, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	f1a1 0404 	sub.w	r4, r1, #4
 8005786:	bfb8      	it	lt
 8005788:	18e4      	addlt	r4, r4, r3
 800578a:	f000 f8e7 	bl	800595c <__malloc_lock>
 800578e:	4a1e      	ldr	r2, [pc, #120]	; (8005808 <_free_r+0x94>)
 8005790:	9801      	ldr	r0, [sp, #4]
 8005792:	6813      	ldr	r3, [r2, #0]
 8005794:	b933      	cbnz	r3, 80057a4 <_free_r+0x30>
 8005796:	6063      	str	r3, [r4, #4]
 8005798:	6014      	str	r4, [r2, #0]
 800579a:	b003      	add	sp, #12
 800579c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057a0:	f000 b8e2 	b.w	8005968 <__malloc_unlock>
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	d908      	bls.n	80057ba <_free_r+0x46>
 80057a8:	6825      	ldr	r5, [r4, #0]
 80057aa:	1961      	adds	r1, r4, r5
 80057ac:	428b      	cmp	r3, r1
 80057ae:	bf01      	itttt	eq
 80057b0:	6819      	ldreq	r1, [r3, #0]
 80057b2:	685b      	ldreq	r3, [r3, #4]
 80057b4:	1949      	addeq	r1, r1, r5
 80057b6:	6021      	streq	r1, [r4, #0]
 80057b8:	e7ed      	b.n	8005796 <_free_r+0x22>
 80057ba:	461a      	mov	r2, r3
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	b10b      	cbz	r3, 80057c4 <_free_r+0x50>
 80057c0:	42a3      	cmp	r3, r4
 80057c2:	d9fa      	bls.n	80057ba <_free_r+0x46>
 80057c4:	6811      	ldr	r1, [r2, #0]
 80057c6:	1855      	adds	r5, r2, r1
 80057c8:	42a5      	cmp	r5, r4
 80057ca:	d10b      	bne.n	80057e4 <_free_r+0x70>
 80057cc:	6824      	ldr	r4, [r4, #0]
 80057ce:	4421      	add	r1, r4
 80057d0:	1854      	adds	r4, r2, r1
 80057d2:	42a3      	cmp	r3, r4
 80057d4:	6011      	str	r1, [r2, #0]
 80057d6:	d1e0      	bne.n	800579a <_free_r+0x26>
 80057d8:	681c      	ldr	r4, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	6053      	str	r3, [r2, #4]
 80057de:	440c      	add	r4, r1
 80057e0:	6014      	str	r4, [r2, #0]
 80057e2:	e7da      	b.n	800579a <_free_r+0x26>
 80057e4:	d902      	bls.n	80057ec <_free_r+0x78>
 80057e6:	230c      	movs	r3, #12
 80057e8:	6003      	str	r3, [r0, #0]
 80057ea:	e7d6      	b.n	800579a <_free_r+0x26>
 80057ec:	6825      	ldr	r5, [r4, #0]
 80057ee:	1961      	adds	r1, r4, r5
 80057f0:	428b      	cmp	r3, r1
 80057f2:	bf04      	itt	eq
 80057f4:	6819      	ldreq	r1, [r3, #0]
 80057f6:	685b      	ldreq	r3, [r3, #4]
 80057f8:	6063      	str	r3, [r4, #4]
 80057fa:	bf04      	itt	eq
 80057fc:	1949      	addeq	r1, r1, r5
 80057fe:	6021      	streq	r1, [r4, #0]
 8005800:	6054      	str	r4, [r2, #4]
 8005802:	e7ca      	b.n	800579a <_free_r+0x26>
 8005804:	b003      	add	sp, #12
 8005806:	bd30      	pop	{r4, r5, pc}
 8005808:	2000041c 	.word	0x2000041c

0800580c <malloc>:
 800580c:	4b02      	ldr	r3, [pc, #8]	; (8005818 <malloc+0xc>)
 800580e:	4601      	mov	r1, r0
 8005810:	6818      	ldr	r0, [r3, #0]
 8005812:	f000 b823 	b.w	800585c <_malloc_r>
 8005816:	bf00      	nop
 8005818:	20000064 	.word	0x20000064

0800581c <sbrk_aligned>:
 800581c:	b570      	push	{r4, r5, r6, lr}
 800581e:	4e0e      	ldr	r6, [pc, #56]	; (8005858 <sbrk_aligned+0x3c>)
 8005820:	460c      	mov	r4, r1
 8005822:	6831      	ldr	r1, [r6, #0]
 8005824:	4605      	mov	r5, r0
 8005826:	b911      	cbnz	r1, 800582e <sbrk_aligned+0x12>
 8005828:	f000 fea8 	bl	800657c <_sbrk_r>
 800582c:	6030      	str	r0, [r6, #0]
 800582e:	4621      	mov	r1, r4
 8005830:	4628      	mov	r0, r5
 8005832:	f000 fea3 	bl	800657c <_sbrk_r>
 8005836:	1c43      	adds	r3, r0, #1
 8005838:	d00a      	beq.n	8005850 <sbrk_aligned+0x34>
 800583a:	1cc4      	adds	r4, r0, #3
 800583c:	f024 0403 	bic.w	r4, r4, #3
 8005840:	42a0      	cmp	r0, r4
 8005842:	d007      	beq.n	8005854 <sbrk_aligned+0x38>
 8005844:	1a21      	subs	r1, r4, r0
 8005846:	4628      	mov	r0, r5
 8005848:	f000 fe98 	bl	800657c <_sbrk_r>
 800584c:	3001      	adds	r0, #1
 800584e:	d101      	bne.n	8005854 <sbrk_aligned+0x38>
 8005850:	f04f 34ff 	mov.w	r4, #4294967295
 8005854:	4620      	mov	r0, r4
 8005856:	bd70      	pop	{r4, r5, r6, pc}
 8005858:	20000420 	.word	0x20000420

0800585c <_malloc_r>:
 800585c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005860:	1ccd      	adds	r5, r1, #3
 8005862:	f025 0503 	bic.w	r5, r5, #3
 8005866:	3508      	adds	r5, #8
 8005868:	2d0c      	cmp	r5, #12
 800586a:	bf38      	it	cc
 800586c:	250c      	movcc	r5, #12
 800586e:	2d00      	cmp	r5, #0
 8005870:	4607      	mov	r7, r0
 8005872:	db01      	blt.n	8005878 <_malloc_r+0x1c>
 8005874:	42a9      	cmp	r1, r5
 8005876:	d905      	bls.n	8005884 <_malloc_r+0x28>
 8005878:	230c      	movs	r3, #12
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	2600      	movs	r6, #0
 800587e:	4630      	mov	r0, r6
 8005880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005884:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005958 <_malloc_r+0xfc>
 8005888:	f000 f868 	bl	800595c <__malloc_lock>
 800588c:	f8d8 3000 	ldr.w	r3, [r8]
 8005890:	461c      	mov	r4, r3
 8005892:	bb5c      	cbnz	r4, 80058ec <_malloc_r+0x90>
 8005894:	4629      	mov	r1, r5
 8005896:	4638      	mov	r0, r7
 8005898:	f7ff ffc0 	bl	800581c <sbrk_aligned>
 800589c:	1c43      	adds	r3, r0, #1
 800589e:	4604      	mov	r4, r0
 80058a0:	d155      	bne.n	800594e <_malloc_r+0xf2>
 80058a2:	f8d8 4000 	ldr.w	r4, [r8]
 80058a6:	4626      	mov	r6, r4
 80058a8:	2e00      	cmp	r6, #0
 80058aa:	d145      	bne.n	8005938 <_malloc_r+0xdc>
 80058ac:	2c00      	cmp	r4, #0
 80058ae:	d048      	beq.n	8005942 <_malloc_r+0xe6>
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	4631      	mov	r1, r6
 80058b4:	4638      	mov	r0, r7
 80058b6:	eb04 0903 	add.w	r9, r4, r3
 80058ba:	f000 fe5f 	bl	800657c <_sbrk_r>
 80058be:	4581      	cmp	r9, r0
 80058c0:	d13f      	bne.n	8005942 <_malloc_r+0xe6>
 80058c2:	6821      	ldr	r1, [r4, #0]
 80058c4:	1a6d      	subs	r5, r5, r1
 80058c6:	4629      	mov	r1, r5
 80058c8:	4638      	mov	r0, r7
 80058ca:	f7ff ffa7 	bl	800581c <sbrk_aligned>
 80058ce:	3001      	adds	r0, #1
 80058d0:	d037      	beq.n	8005942 <_malloc_r+0xe6>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	442b      	add	r3, r5
 80058d6:	6023      	str	r3, [r4, #0]
 80058d8:	f8d8 3000 	ldr.w	r3, [r8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d038      	beq.n	8005952 <_malloc_r+0xf6>
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	42a2      	cmp	r2, r4
 80058e4:	d12b      	bne.n	800593e <_malloc_r+0xe2>
 80058e6:	2200      	movs	r2, #0
 80058e8:	605a      	str	r2, [r3, #4]
 80058ea:	e00f      	b.n	800590c <_malloc_r+0xb0>
 80058ec:	6822      	ldr	r2, [r4, #0]
 80058ee:	1b52      	subs	r2, r2, r5
 80058f0:	d41f      	bmi.n	8005932 <_malloc_r+0xd6>
 80058f2:	2a0b      	cmp	r2, #11
 80058f4:	d917      	bls.n	8005926 <_malloc_r+0xca>
 80058f6:	1961      	adds	r1, r4, r5
 80058f8:	42a3      	cmp	r3, r4
 80058fa:	6025      	str	r5, [r4, #0]
 80058fc:	bf18      	it	ne
 80058fe:	6059      	strne	r1, [r3, #4]
 8005900:	6863      	ldr	r3, [r4, #4]
 8005902:	bf08      	it	eq
 8005904:	f8c8 1000 	streq.w	r1, [r8]
 8005908:	5162      	str	r2, [r4, r5]
 800590a:	604b      	str	r3, [r1, #4]
 800590c:	4638      	mov	r0, r7
 800590e:	f104 060b 	add.w	r6, r4, #11
 8005912:	f000 f829 	bl	8005968 <__malloc_unlock>
 8005916:	f026 0607 	bic.w	r6, r6, #7
 800591a:	1d23      	adds	r3, r4, #4
 800591c:	1af2      	subs	r2, r6, r3
 800591e:	d0ae      	beq.n	800587e <_malloc_r+0x22>
 8005920:	1b9b      	subs	r3, r3, r6
 8005922:	50a3      	str	r3, [r4, r2]
 8005924:	e7ab      	b.n	800587e <_malloc_r+0x22>
 8005926:	42a3      	cmp	r3, r4
 8005928:	6862      	ldr	r2, [r4, #4]
 800592a:	d1dd      	bne.n	80058e8 <_malloc_r+0x8c>
 800592c:	f8c8 2000 	str.w	r2, [r8]
 8005930:	e7ec      	b.n	800590c <_malloc_r+0xb0>
 8005932:	4623      	mov	r3, r4
 8005934:	6864      	ldr	r4, [r4, #4]
 8005936:	e7ac      	b.n	8005892 <_malloc_r+0x36>
 8005938:	4634      	mov	r4, r6
 800593a:	6876      	ldr	r6, [r6, #4]
 800593c:	e7b4      	b.n	80058a8 <_malloc_r+0x4c>
 800593e:	4613      	mov	r3, r2
 8005940:	e7cc      	b.n	80058dc <_malloc_r+0x80>
 8005942:	230c      	movs	r3, #12
 8005944:	603b      	str	r3, [r7, #0]
 8005946:	4638      	mov	r0, r7
 8005948:	f000 f80e 	bl	8005968 <__malloc_unlock>
 800594c:	e797      	b.n	800587e <_malloc_r+0x22>
 800594e:	6025      	str	r5, [r4, #0]
 8005950:	e7dc      	b.n	800590c <_malloc_r+0xb0>
 8005952:	605b      	str	r3, [r3, #4]
 8005954:	deff      	udf	#255	; 0xff
 8005956:	bf00      	nop
 8005958:	2000041c 	.word	0x2000041c

0800595c <__malloc_lock>:
 800595c:	4801      	ldr	r0, [pc, #4]	; (8005964 <__malloc_lock+0x8>)
 800595e:	f7ff b88a 	b.w	8004a76 <__retarget_lock_acquire_recursive>
 8005962:	bf00      	nop
 8005964:	20000418 	.word	0x20000418

08005968 <__malloc_unlock>:
 8005968:	4801      	ldr	r0, [pc, #4]	; (8005970 <__malloc_unlock+0x8>)
 800596a:	f7ff b885 	b.w	8004a78 <__retarget_lock_release_recursive>
 800596e:	bf00      	nop
 8005970:	20000418 	.word	0x20000418

08005974 <_Balloc>:
 8005974:	b570      	push	{r4, r5, r6, lr}
 8005976:	69c6      	ldr	r6, [r0, #28]
 8005978:	4604      	mov	r4, r0
 800597a:	460d      	mov	r5, r1
 800597c:	b976      	cbnz	r6, 800599c <_Balloc+0x28>
 800597e:	2010      	movs	r0, #16
 8005980:	f7ff ff44 	bl	800580c <malloc>
 8005984:	4602      	mov	r2, r0
 8005986:	61e0      	str	r0, [r4, #28]
 8005988:	b920      	cbnz	r0, 8005994 <_Balloc+0x20>
 800598a:	4b18      	ldr	r3, [pc, #96]	; (80059ec <_Balloc+0x78>)
 800598c:	4818      	ldr	r0, [pc, #96]	; (80059f0 <_Balloc+0x7c>)
 800598e:	216b      	movs	r1, #107	; 0x6b
 8005990:	f000 fe12 	bl	80065b8 <__assert_func>
 8005994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005998:	6006      	str	r6, [r0, #0]
 800599a:	60c6      	str	r6, [r0, #12]
 800599c:	69e6      	ldr	r6, [r4, #28]
 800599e:	68f3      	ldr	r3, [r6, #12]
 80059a0:	b183      	cbz	r3, 80059c4 <_Balloc+0x50>
 80059a2:	69e3      	ldr	r3, [r4, #28]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059aa:	b9b8      	cbnz	r0, 80059dc <_Balloc+0x68>
 80059ac:	2101      	movs	r1, #1
 80059ae:	fa01 f605 	lsl.w	r6, r1, r5
 80059b2:	1d72      	adds	r2, r6, #5
 80059b4:	0092      	lsls	r2, r2, #2
 80059b6:	4620      	mov	r0, r4
 80059b8:	f000 fe1c 	bl	80065f4 <_calloc_r>
 80059bc:	b160      	cbz	r0, 80059d8 <_Balloc+0x64>
 80059be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059c2:	e00e      	b.n	80059e2 <_Balloc+0x6e>
 80059c4:	2221      	movs	r2, #33	; 0x21
 80059c6:	2104      	movs	r1, #4
 80059c8:	4620      	mov	r0, r4
 80059ca:	f000 fe13 	bl	80065f4 <_calloc_r>
 80059ce:	69e3      	ldr	r3, [r4, #28]
 80059d0:	60f0      	str	r0, [r6, #12]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e4      	bne.n	80059a2 <_Balloc+0x2e>
 80059d8:	2000      	movs	r0, #0
 80059da:	bd70      	pop	{r4, r5, r6, pc}
 80059dc:	6802      	ldr	r2, [r0, #0]
 80059de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059e2:	2300      	movs	r3, #0
 80059e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059e8:	e7f7      	b.n	80059da <_Balloc+0x66>
 80059ea:	bf00      	nop
 80059ec:	080068e9 	.word	0x080068e9
 80059f0:	08006969 	.word	0x08006969

080059f4 <_Bfree>:
 80059f4:	b570      	push	{r4, r5, r6, lr}
 80059f6:	69c6      	ldr	r6, [r0, #28]
 80059f8:	4605      	mov	r5, r0
 80059fa:	460c      	mov	r4, r1
 80059fc:	b976      	cbnz	r6, 8005a1c <_Bfree+0x28>
 80059fe:	2010      	movs	r0, #16
 8005a00:	f7ff ff04 	bl	800580c <malloc>
 8005a04:	4602      	mov	r2, r0
 8005a06:	61e8      	str	r0, [r5, #28]
 8005a08:	b920      	cbnz	r0, 8005a14 <_Bfree+0x20>
 8005a0a:	4b09      	ldr	r3, [pc, #36]	; (8005a30 <_Bfree+0x3c>)
 8005a0c:	4809      	ldr	r0, [pc, #36]	; (8005a34 <_Bfree+0x40>)
 8005a0e:	218f      	movs	r1, #143	; 0x8f
 8005a10:	f000 fdd2 	bl	80065b8 <__assert_func>
 8005a14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a18:	6006      	str	r6, [r0, #0]
 8005a1a:	60c6      	str	r6, [r0, #12]
 8005a1c:	b13c      	cbz	r4, 8005a2e <_Bfree+0x3a>
 8005a1e:	69eb      	ldr	r3, [r5, #28]
 8005a20:	6862      	ldr	r2, [r4, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a28:	6021      	str	r1, [r4, #0]
 8005a2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
 8005a30:	080068e9 	.word	0x080068e9
 8005a34:	08006969 	.word	0x08006969

08005a38 <__multadd>:
 8005a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3c:	690d      	ldr	r5, [r1, #16]
 8005a3e:	4607      	mov	r7, r0
 8005a40:	460c      	mov	r4, r1
 8005a42:	461e      	mov	r6, r3
 8005a44:	f101 0c14 	add.w	ip, r1, #20
 8005a48:	2000      	movs	r0, #0
 8005a4a:	f8dc 3000 	ldr.w	r3, [ip]
 8005a4e:	b299      	uxth	r1, r3
 8005a50:	fb02 6101 	mla	r1, r2, r1, r6
 8005a54:	0c1e      	lsrs	r6, r3, #16
 8005a56:	0c0b      	lsrs	r3, r1, #16
 8005a58:	fb02 3306 	mla	r3, r2, r6, r3
 8005a5c:	b289      	uxth	r1, r1
 8005a5e:	3001      	adds	r0, #1
 8005a60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a64:	4285      	cmp	r5, r0
 8005a66:	f84c 1b04 	str.w	r1, [ip], #4
 8005a6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a6e:	dcec      	bgt.n	8005a4a <__multadd+0x12>
 8005a70:	b30e      	cbz	r6, 8005ab6 <__multadd+0x7e>
 8005a72:	68a3      	ldr	r3, [r4, #8]
 8005a74:	42ab      	cmp	r3, r5
 8005a76:	dc19      	bgt.n	8005aac <__multadd+0x74>
 8005a78:	6861      	ldr	r1, [r4, #4]
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	3101      	adds	r1, #1
 8005a7e:	f7ff ff79 	bl	8005974 <_Balloc>
 8005a82:	4680      	mov	r8, r0
 8005a84:	b928      	cbnz	r0, 8005a92 <__multadd+0x5a>
 8005a86:	4602      	mov	r2, r0
 8005a88:	4b0c      	ldr	r3, [pc, #48]	; (8005abc <__multadd+0x84>)
 8005a8a:	480d      	ldr	r0, [pc, #52]	; (8005ac0 <__multadd+0x88>)
 8005a8c:	21ba      	movs	r1, #186	; 0xba
 8005a8e:	f000 fd93 	bl	80065b8 <__assert_func>
 8005a92:	6922      	ldr	r2, [r4, #16]
 8005a94:	3202      	adds	r2, #2
 8005a96:	f104 010c 	add.w	r1, r4, #12
 8005a9a:	0092      	lsls	r2, r2, #2
 8005a9c:	300c      	adds	r0, #12
 8005a9e:	f000 fd7d 	bl	800659c <memcpy>
 8005aa2:	4621      	mov	r1, r4
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	f7ff ffa5 	bl	80059f4 <_Bfree>
 8005aaa:	4644      	mov	r4, r8
 8005aac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ab0:	3501      	adds	r5, #1
 8005ab2:	615e      	str	r6, [r3, #20]
 8005ab4:	6125      	str	r5, [r4, #16]
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005abc:	08006958 	.word	0x08006958
 8005ac0:	08006969 	.word	0x08006969

08005ac4 <__hi0bits>:
 8005ac4:	0c03      	lsrs	r3, r0, #16
 8005ac6:	041b      	lsls	r3, r3, #16
 8005ac8:	b9d3      	cbnz	r3, 8005b00 <__hi0bits+0x3c>
 8005aca:	0400      	lsls	r0, r0, #16
 8005acc:	2310      	movs	r3, #16
 8005ace:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005ad2:	bf04      	itt	eq
 8005ad4:	0200      	lsleq	r0, r0, #8
 8005ad6:	3308      	addeq	r3, #8
 8005ad8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005adc:	bf04      	itt	eq
 8005ade:	0100      	lsleq	r0, r0, #4
 8005ae0:	3304      	addeq	r3, #4
 8005ae2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005ae6:	bf04      	itt	eq
 8005ae8:	0080      	lsleq	r0, r0, #2
 8005aea:	3302      	addeq	r3, #2
 8005aec:	2800      	cmp	r0, #0
 8005aee:	db05      	blt.n	8005afc <__hi0bits+0x38>
 8005af0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005af4:	f103 0301 	add.w	r3, r3, #1
 8005af8:	bf08      	it	eq
 8005afa:	2320      	moveq	r3, #32
 8005afc:	4618      	mov	r0, r3
 8005afe:	4770      	bx	lr
 8005b00:	2300      	movs	r3, #0
 8005b02:	e7e4      	b.n	8005ace <__hi0bits+0xa>

08005b04 <__lo0bits>:
 8005b04:	6803      	ldr	r3, [r0, #0]
 8005b06:	f013 0207 	ands.w	r2, r3, #7
 8005b0a:	d00c      	beq.n	8005b26 <__lo0bits+0x22>
 8005b0c:	07d9      	lsls	r1, r3, #31
 8005b0e:	d422      	bmi.n	8005b56 <__lo0bits+0x52>
 8005b10:	079a      	lsls	r2, r3, #30
 8005b12:	bf49      	itett	mi
 8005b14:	085b      	lsrmi	r3, r3, #1
 8005b16:	089b      	lsrpl	r3, r3, #2
 8005b18:	6003      	strmi	r3, [r0, #0]
 8005b1a:	2201      	movmi	r2, #1
 8005b1c:	bf5c      	itt	pl
 8005b1e:	6003      	strpl	r3, [r0, #0]
 8005b20:	2202      	movpl	r2, #2
 8005b22:	4610      	mov	r0, r2
 8005b24:	4770      	bx	lr
 8005b26:	b299      	uxth	r1, r3
 8005b28:	b909      	cbnz	r1, 8005b2e <__lo0bits+0x2a>
 8005b2a:	0c1b      	lsrs	r3, r3, #16
 8005b2c:	2210      	movs	r2, #16
 8005b2e:	b2d9      	uxtb	r1, r3
 8005b30:	b909      	cbnz	r1, 8005b36 <__lo0bits+0x32>
 8005b32:	3208      	adds	r2, #8
 8005b34:	0a1b      	lsrs	r3, r3, #8
 8005b36:	0719      	lsls	r1, r3, #28
 8005b38:	bf04      	itt	eq
 8005b3a:	091b      	lsreq	r3, r3, #4
 8005b3c:	3204      	addeq	r2, #4
 8005b3e:	0799      	lsls	r1, r3, #30
 8005b40:	bf04      	itt	eq
 8005b42:	089b      	lsreq	r3, r3, #2
 8005b44:	3202      	addeq	r2, #2
 8005b46:	07d9      	lsls	r1, r3, #31
 8005b48:	d403      	bmi.n	8005b52 <__lo0bits+0x4e>
 8005b4a:	085b      	lsrs	r3, r3, #1
 8005b4c:	f102 0201 	add.w	r2, r2, #1
 8005b50:	d003      	beq.n	8005b5a <__lo0bits+0x56>
 8005b52:	6003      	str	r3, [r0, #0]
 8005b54:	e7e5      	b.n	8005b22 <__lo0bits+0x1e>
 8005b56:	2200      	movs	r2, #0
 8005b58:	e7e3      	b.n	8005b22 <__lo0bits+0x1e>
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	e7e1      	b.n	8005b22 <__lo0bits+0x1e>
	...

08005b60 <__i2b>:
 8005b60:	b510      	push	{r4, lr}
 8005b62:	460c      	mov	r4, r1
 8005b64:	2101      	movs	r1, #1
 8005b66:	f7ff ff05 	bl	8005974 <_Balloc>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	b928      	cbnz	r0, 8005b7a <__i2b+0x1a>
 8005b6e:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <__i2b+0x24>)
 8005b70:	4805      	ldr	r0, [pc, #20]	; (8005b88 <__i2b+0x28>)
 8005b72:	f240 1145 	movw	r1, #325	; 0x145
 8005b76:	f000 fd1f 	bl	80065b8 <__assert_func>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	6144      	str	r4, [r0, #20]
 8005b7e:	6103      	str	r3, [r0, #16]
 8005b80:	bd10      	pop	{r4, pc}
 8005b82:	bf00      	nop
 8005b84:	08006958 	.word	0x08006958
 8005b88:	08006969 	.word	0x08006969

08005b8c <__multiply>:
 8005b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b90:	4691      	mov	r9, r2
 8005b92:	690a      	ldr	r2, [r1, #16]
 8005b94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	bfb8      	it	lt
 8005b9c:	460b      	movlt	r3, r1
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	bfbc      	itt	lt
 8005ba2:	464c      	movlt	r4, r9
 8005ba4:	4699      	movlt	r9, r3
 8005ba6:	6927      	ldr	r7, [r4, #16]
 8005ba8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005bac:	68a3      	ldr	r3, [r4, #8]
 8005bae:	6861      	ldr	r1, [r4, #4]
 8005bb0:	eb07 060a 	add.w	r6, r7, sl
 8005bb4:	42b3      	cmp	r3, r6
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	bfb8      	it	lt
 8005bba:	3101      	addlt	r1, #1
 8005bbc:	f7ff feda 	bl	8005974 <_Balloc>
 8005bc0:	b930      	cbnz	r0, 8005bd0 <__multiply+0x44>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	4b44      	ldr	r3, [pc, #272]	; (8005cd8 <__multiply+0x14c>)
 8005bc6:	4845      	ldr	r0, [pc, #276]	; (8005cdc <__multiply+0x150>)
 8005bc8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005bcc:	f000 fcf4 	bl	80065b8 <__assert_func>
 8005bd0:	f100 0514 	add.w	r5, r0, #20
 8005bd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005bd8:	462b      	mov	r3, r5
 8005bda:	2200      	movs	r2, #0
 8005bdc:	4543      	cmp	r3, r8
 8005bde:	d321      	bcc.n	8005c24 <__multiply+0x98>
 8005be0:	f104 0314 	add.w	r3, r4, #20
 8005be4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005be8:	f109 0314 	add.w	r3, r9, #20
 8005bec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005bf0:	9202      	str	r2, [sp, #8]
 8005bf2:	1b3a      	subs	r2, r7, r4
 8005bf4:	3a15      	subs	r2, #21
 8005bf6:	f022 0203 	bic.w	r2, r2, #3
 8005bfa:	3204      	adds	r2, #4
 8005bfc:	f104 0115 	add.w	r1, r4, #21
 8005c00:	428f      	cmp	r7, r1
 8005c02:	bf38      	it	cc
 8005c04:	2204      	movcc	r2, #4
 8005c06:	9201      	str	r2, [sp, #4]
 8005c08:	9a02      	ldr	r2, [sp, #8]
 8005c0a:	9303      	str	r3, [sp, #12]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d80c      	bhi.n	8005c2a <__multiply+0x9e>
 8005c10:	2e00      	cmp	r6, #0
 8005c12:	dd03      	ble.n	8005c1c <__multiply+0x90>
 8005c14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d05b      	beq.n	8005cd4 <__multiply+0x148>
 8005c1c:	6106      	str	r6, [r0, #16]
 8005c1e:	b005      	add	sp, #20
 8005c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c24:	f843 2b04 	str.w	r2, [r3], #4
 8005c28:	e7d8      	b.n	8005bdc <__multiply+0x50>
 8005c2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c2e:	f1ba 0f00 	cmp.w	sl, #0
 8005c32:	d024      	beq.n	8005c7e <__multiply+0xf2>
 8005c34:	f104 0e14 	add.w	lr, r4, #20
 8005c38:	46a9      	mov	r9, r5
 8005c3a:	f04f 0c00 	mov.w	ip, #0
 8005c3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005c42:	f8d9 1000 	ldr.w	r1, [r9]
 8005c46:	fa1f fb82 	uxth.w	fp, r2
 8005c4a:	b289      	uxth	r1, r1
 8005c4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005c50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005c54:	f8d9 2000 	ldr.w	r2, [r9]
 8005c58:	4461      	add	r1, ip
 8005c5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005c62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005c66:	b289      	uxth	r1, r1
 8005c68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005c6c:	4577      	cmp	r7, lr
 8005c6e:	f849 1b04 	str.w	r1, [r9], #4
 8005c72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c76:	d8e2      	bhi.n	8005c3e <__multiply+0xb2>
 8005c78:	9a01      	ldr	r2, [sp, #4]
 8005c7a:	f845 c002 	str.w	ip, [r5, r2]
 8005c7e:	9a03      	ldr	r2, [sp, #12]
 8005c80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c84:	3304      	adds	r3, #4
 8005c86:	f1b9 0f00 	cmp.w	r9, #0
 8005c8a:	d021      	beq.n	8005cd0 <__multiply+0x144>
 8005c8c:	6829      	ldr	r1, [r5, #0]
 8005c8e:	f104 0c14 	add.w	ip, r4, #20
 8005c92:	46ae      	mov	lr, r5
 8005c94:	f04f 0a00 	mov.w	sl, #0
 8005c98:	f8bc b000 	ldrh.w	fp, [ip]
 8005c9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005ca0:	fb09 220b 	mla	r2, r9, fp, r2
 8005ca4:	4452      	add	r2, sl
 8005ca6:	b289      	uxth	r1, r1
 8005ca8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005cac:	f84e 1b04 	str.w	r1, [lr], #4
 8005cb0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005cb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005cb8:	f8be 1000 	ldrh.w	r1, [lr]
 8005cbc:	fb09 110a 	mla	r1, r9, sl, r1
 8005cc0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005cc4:	4567      	cmp	r7, ip
 8005cc6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005cca:	d8e5      	bhi.n	8005c98 <__multiply+0x10c>
 8005ccc:	9a01      	ldr	r2, [sp, #4]
 8005cce:	50a9      	str	r1, [r5, r2]
 8005cd0:	3504      	adds	r5, #4
 8005cd2:	e799      	b.n	8005c08 <__multiply+0x7c>
 8005cd4:	3e01      	subs	r6, #1
 8005cd6:	e79b      	b.n	8005c10 <__multiply+0x84>
 8005cd8:	08006958 	.word	0x08006958
 8005cdc:	08006969 	.word	0x08006969

08005ce0 <__pow5mult>:
 8005ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ce4:	4615      	mov	r5, r2
 8005ce6:	f012 0203 	ands.w	r2, r2, #3
 8005cea:	4606      	mov	r6, r0
 8005cec:	460f      	mov	r7, r1
 8005cee:	d007      	beq.n	8005d00 <__pow5mult+0x20>
 8005cf0:	4c25      	ldr	r4, [pc, #148]	; (8005d88 <__pow5mult+0xa8>)
 8005cf2:	3a01      	subs	r2, #1
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005cfa:	f7ff fe9d 	bl	8005a38 <__multadd>
 8005cfe:	4607      	mov	r7, r0
 8005d00:	10ad      	asrs	r5, r5, #2
 8005d02:	d03d      	beq.n	8005d80 <__pow5mult+0xa0>
 8005d04:	69f4      	ldr	r4, [r6, #28]
 8005d06:	b97c      	cbnz	r4, 8005d28 <__pow5mult+0x48>
 8005d08:	2010      	movs	r0, #16
 8005d0a:	f7ff fd7f 	bl	800580c <malloc>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	61f0      	str	r0, [r6, #28]
 8005d12:	b928      	cbnz	r0, 8005d20 <__pow5mult+0x40>
 8005d14:	4b1d      	ldr	r3, [pc, #116]	; (8005d8c <__pow5mult+0xac>)
 8005d16:	481e      	ldr	r0, [pc, #120]	; (8005d90 <__pow5mult+0xb0>)
 8005d18:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005d1c:	f000 fc4c 	bl	80065b8 <__assert_func>
 8005d20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d24:	6004      	str	r4, [r0, #0]
 8005d26:	60c4      	str	r4, [r0, #12]
 8005d28:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005d2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d30:	b94c      	cbnz	r4, 8005d46 <__pow5mult+0x66>
 8005d32:	f240 2171 	movw	r1, #625	; 0x271
 8005d36:	4630      	mov	r0, r6
 8005d38:	f7ff ff12 	bl	8005b60 <__i2b>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d42:	4604      	mov	r4, r0
 8005d44:	6003      	str	r3, [r0, #0]
 8005d46:	f04f 0900 	mov.w	r9, #0
 8005d4a:	07eb      	lsls	r3, r5, #31
 8005d4c:	d50a      	bpl.n	8005d64 <__pow5mult+0x84>
 8005d4e:	4639      	mov	r1, r7
 8005d50:	4622      	mov	r2, r4
 8005d52:	4630      	mov	r0, r6
 8005d54:	f7ff ff1a 	bl	8005b8c <__multiply>
 8005d58:	4639      	mov	r1, r7
 8005d5a:	4680      	mov	r8, r0
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	f7ff fe49 	bl	80059f4 <_Bfree>
 8005d62:	4647      	mov	r7, r8
 8005d64:	106d      	asrs	r5, r5, #1
 8005d66:	d00b      	beq.n	8005d80 <__pow5mult+0xa0>
 8005d68:	6820      	ldr	r0, [r4, #0]
 8005d6a:	b938      	cbnz	r0, 8005d7c <__pow5mult+0x9c>
 8005d6c:	4622      	mov	r2, r4
 8005d6e:	4621      	mov	r1, r4
 8005d70:	4630      	mov	r0, r6
 8005d72:	f7ff ff0b 	bl	8005b8c <__multiply>
 8005d76:	6020      	str	r0, [r4, #0]
 8005d78:	f8c0 9000 	str.w	r9, [r0]
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	e7e4      	b.n	8005d4a <__pow5mult+0x6a>
 8005d80:	4638      	mov	r0, r7
 8005d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d86:	bf00      	nop
 8005d88:	08006ab8 	.word	0x08006ab8
 8005d8c:	080068e9 	.word	0x080068e9
 8005d90:	08006969 	.word	0x08006969

08005d94 <__lshift>:
 8005d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d98:	460c      	mov	r4, r1
 8005d9a:	6849      	ldr	r1, [r1, #4]
 8005d9c:	6923      	ldr	r3, [r4, #16]
 8005d9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005da2:	68a3      	ldr	r3, [r4, #8]
 8005da4:	4607      	mov	r7, r0
 8005da6:	4691      	mov	r9, r2
 8005da8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005dac:	f108 0601 	add.w	r6, r8, #1
 8005db0:	42b3      	cmp	r3, r6
 8005db2:	db0b      	blt.n	8005dcc <__lshift+0x38>
 8005db4:	4638      	mov	r0, r7
 8005db6:	f7ff fddd 	bl	8005974 <_Balloc>
 8005dba:	4605      	mov	r5, r0
 8005dbc:	b948      	cbnz	r0, 8005dd2 <__lshift+0x3e>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	4b28      	ldr	r3, [pc, #160]	; (8005e64 <__lshift+0xd0>)
 8005dc2:	4829      	ldr	r0, [pc, #164]	; (8005e68 <__lshift+0xd4>)
 8005dc4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005dc8:	f000 fbf6 	bl	80065b8 <__assert_func>
 8005dcc:	3101      	adds	r1, #1
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	e7ee      	b.n	8005db0 <__lshift+0x1c>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f100 0114 	add.w	r1, r0, #20
 8005dd8:	f100 0210 	add.w	r2, r0, #16
 8005ddc:	4618      	mov	r0, r3
 8005dde:	4553      	cmp	r3, sl
 8005de0:	db33      	blt.n	8005e4a <__lshift+0xb6>
 8005de2:	6920      	ldr	r0, [r4, #16]
 8005de4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005de8:	f104 0314 	add.w	r3, r4, #20
 8005dec:	f019 091f 	ands.w	r9, r9, #31
 8005df0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005df4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005df8:	d02b      	beq.n	8005e52 <__lshift+0xbe>
 8005dfa:	f1c9 0e20 	rsb	lr, r9, #32
 8005dfe:	468a      	mov	sl, r1
 8005e00:	2200      	movs	r2, #0
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	fa00 f009 	lsl.w	r0, r0, r9
 8005e08:	4310      	orrs	r0, r2
 8005e0a:	f84a 0b04 	str.w	r0, [sl], #4
 8005e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e12:	459c      	cmp	ip, r3
 8005e14:	fa22 f20e 	lsr.w	r2, r2, lr
 8005e18:	d8f3      	bhi.n	8005e02 <__lshift+0x6e>
 8005e1a:	ebac 0304 	sub.w	r3, ip, r4
 8005e1e:	3b15      	subs	r3, #21
 8005e20:	f023 0303 	bic.w	r3, r3, #3
 8005e24:	3304      	adds	r3, #4
 8005e26:	f104 0015 	add.w	r0, r4, #21
 8005e2a:	4584      	cmp	ip, r0
 8005e2c:	bf38      	it	cc
 8005e2e:	2304      	movcc	r3, #4
 8005e30:	50ca      	str	r2, [r1, r3]
 8005e32:	b10a      	cbz	r2, 8005e38 <__lshift+0xa4>
 8005e34:	f108 0602 	add.w	r6, r8, #2
 8005e38:	3e01      	subs	r6, #1
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	612e      	str	r6, [r5, #16]
 8005e3e:	4621      	mov	r1, r4
 8005e40:	f7ff fdd8 	bl	80059f4 <_Bfree>
 8005e44:	4628      	mov	r0, r5
 8005e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e4e:	3301      	adds	r3, #1
 8005e50:	e7c5      	b.n	8005dde <__lshift+0x4a>
 8005e52:	3904      	subs	r1, #4
 8005e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e58:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e5c:	459c      	cmp	ip, r3
 8005e5e:	d8f9      	bhi.n	8005e54 <__lshift+0xc0>
 8005e60:	e7ea      	b.n	8005e38 <__lshift+0xa4>
 8005e62:	bf00      	nop
 8005e64:	08006958 	.word	0x08006958
 8005e68:	08006969 	.word	0x08006969

08005e6c <__mcmp>:
 8005e6c:	b530      	push	{r4, r5, lr}
 8005e6e:	6902      	ldr	r2, [r0, #16]
 8005e70:	690c      	ldr	r4, [r1, #16]
 8005e72:	1b12      	subs	r2, r2, r4
 8005e74:	d10e      	bne.n	8005e94 <__mcmp+0x28>
 8005e76:	f100 0314 	add.w	r3, r0, #20
 8005e7a:	3114      	adds	r1, #20
 8005e7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005e80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005e84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005e88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005e8c:	42a5      	cmp	r5, r4
 8005e8e:	d003      	beq.n	8005e98 <__mcmp+0x2c>
 8005e90:	d305      	bcc.n	8005e9e <__mcmp+0x32>
 8005e92:	2201      	movs	r2, #1
 8005e94:	4610      	mov	r0, r2
 8005e96:	bd30      	pop	{r4, r5, pc}
 8005e98:	4283      	cmp	r3, r0
 8005e9a:	d3f3      	bcc.n	8005e84 <__mcmp+0x18>
 8005e9c:	e7fa      	b.n	8005e94 <__mcmp+0x28>
 8005e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea2:	e7f7      	b.n	8005e94 <__mcmp+0x28>

08005ea4 <__mdiff>:
 8005ea4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea8:	460c      	mov	r4, r1
 8005eaa:	4606      	mov	r6, r0
 8005eac:	4611      	mov	r1, r2
 8005eae:	4620      	mov	r0, r4
 8005eb0:	4690      	mov	r8, r2
 8005eb2:	f7ff ffdb 	bl	8005e6c <__mcmp>
 8005eb6:	1e05      	subs	r5, r0, #0
 8005eb8:	d110      	bne.n	8005edc <__mdiff+0x38>
 8005eba:	4629      	mov	r1, r5
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	f7ff fd59 	bl	8005974 <_Balloc>
 8005ec2:	b930      	cbnz	r0, 8005ed2 <__mdiff+0x2e>
 8005ec4:	4b3a      	ldr	r3, [pc, #232]	; (8005fb0 <__mdiff+0x10c>)
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	f240 2137 	movw	r1, #567	; 0x237
 8005ecc:	4839      	ldr	r0, [pc, #228]	; (8005fb4 <__mdiff+0x110>)
 8005ece:	f000 fb73 	bl	80065b8 <__assert_func>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ed8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005edc:	bfa4      	itt	ge
 8005ede:	4643      	movge	r3, r8
 8005ee0:	46a0      	movge	r8, r4
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005ee8:	bfa6      	itte	ge
 8005eea:	461c      	movge	r4, r3
 8005eec:	2500      	movge	r5, #0
 8005eee:	2501      	movlt	r5, #1
 8005ef0:	f7ff fd40 	bl	8005974 <_Balloc>
 8005ef4:	b920      	cbnz	r0, 8005f00 <__mdiff+0x5c>
 8005ef6:	4b2e      	ldr	r3, [pc, #184]	; (8005fb0 <__mdiff+0x10c>)
 8005ef8:	4602      	mov	r2, r0
 8005efa:	f240 2145 	movw	r1, #581	; 0x245
 8005efe:	e7e5      	b.n	8005ecc <__mdiff+0x28>
 8005f00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005f04:	6926      	ldr	r6, [r4, #16]
 8005f06:	60c5      	str	r5, [r0, #12]
 8005f08:	f104 0914 	add.w	r9, r4, #20
 8005f0c:	f108 0514 	add.w	r5, r8, #20
 8005f10:	f100 0e14 	add.w	lr, r0, #20
 8005f14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005f18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005f1c:	f108 0210 	add.w	r2, r8, #16
 8005f20:	46f2      	mov	sl, lr
 8005f22:	2100      	movs	r1, #0
 8005f24:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005f2c:	fa11 f88b 	uxtah	r8, r1, fp
 8005f30:	b299      	uxth	r1, r3
 8005f32:	0c1b      	lsrs	r3, r3, #16
 8005f34:	eba8 0801 	sub.w	r8, r8, r1
 8005f38:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f3c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005f40:	fa1f f888 	uxth.w	r8, r8
 8005f44:	1419      	asrs	r1, r3, #16
 8005f46:	454e      	cmp	r6, r9
 8005f48:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005f4c:	f84a 3b04 	str.w	r3, [sl], #4
 8005f50:	d8e8      	bhi.n	8005f24 <__mdiff+0x80>
 8005f52:	1b33      	subs	r3, r6, r4
 8005f54:	3b15      	subs	r3, #21
 8005f56:	f023 0303 	bic.w	r3, r3, #3
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	3415      	adds	r4, #21
 8005f5e:	42a6      	cmp	r6, r4
 8005f60:	bf38      	it	cc
 8005f62:	2304      	movcc	r3, #4
 8005f64:	441d      	add	r5, r3
 8005f66:	4473      	add	r3, lr
 8005f68:	469e      	mov	lr, r3
 8005f6a:	462e      	mov	r6, r5
 8005f6c:	4566      	cmp	r6, ip
 8005f6e:	d30e      	bcc.n	8005f8e <__mdiff+0xea>
 8005f70:	f10c 0203 	add.w	r2, ip, #3
 8005f74:	1b52      	subs	r2, r2, r5
 8005f76:	f022 0203 	bic.w	r2, r2, #3
 8005f7a:	3d03      	subs	r5, #3
 8005f7c:	45ac      	cmp	ip, r5
 8005f7e:	bf38      	it	cc
 8005f80:	2200      	movcc	r2, #0
 8005f82:	4413      	add	r3, r2
 8005f84:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005f88:	b17a      	cbz	r2, 8005faa <__mdiff+0x106>
 8005f8a:	6107      	str	r7, [r0, #16]
 8005f8c:	e7a4      	b.n	8005ed8 <__mdiff+0x34>
 8005f8e:	f856 8b04 	ldr.w	r8, [r6], #4
 8005f92:	fa11 f288 	uxtah	r2, r1, r8
 8005f96:	1414      	asrs	r4, r2, #16
 8005f98:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005f9c:	b292      	uxth	r2, r2
 8005f9e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005fa2:	f84e 2b04 	str.w	r2, [lr], #4
 8005fa6:	1421      	asrs	r1, r4, #16
 8005fa8:	e7e0      	b.n	8005f6c <__mdiff+0xc8>
 8005faa:	3f01      	subs	r7, #1
 8005fac:	e7ea      	b.n	8005f84 <__mdiff+0xe0>
 8005fae:	bf00      	nop
 8005fb0:	08006958 	.word	0x08006958
 8005fb4:	08006969 	.word	0x08006969

08005fb8 <__d2b>:
 8005fb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005fbc:	460f      	mov	r7, r1
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	ec59 8b10 	vmov	r8, r9, d0
 8005fc4:	4616      	mov	r6, r2
 8005fc6:	f7ff fcd5 	bl	8005974 <_Balloc>
 8005fca:	4604      	mov	r4, r0
 8005fcc:	b930      	cbnz	r0, 8005fdc <__d2b+0x24>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	4b24      	ldr	r3, [pc, #144]	; (8006064 <__d2b+0xac>)
 8005fd2:	4825      	ldr	r0, [pc, #148]	; (8006068 <__d2b+0xb0>)
 8005fd4:	f240 310f 	movw	r1, #783	; 0x30f
 8005fd8:	f000 faee 	bl	80065b8 <__assert_func>
 8005fdc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005fe0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005fe4:	bb2d      	cbnz	r5, 8006032 <__d2b+0x7a>
 8005fe6:	9301      	str	r3, [sp, #4]
 8005fe8:	f1b8 0300 	subs.w	r3, r8, #0
 8005fec:	d026      	beq.n	800603c <__d2b+0x84>
 8005fee:	4668      	mov	r0, sp
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	f7ff fd87 	bl	8005b04 <__lo0bits>
 8005ff6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005ffa:	b1e8      	cbz	r0, 8006038 <__d2b+0x80>
 8005ffc:	f1c0 0320 	rsb	r3, r0, #32
 8006000:	fa02 f303 	lsl.w	r3, r2, r3
 8006004:	430b      	orrs	r3, r1
 8006006:	40c2      	lsrs	r2, r0
 8006008:	6163      	str	r3, [r4, #20]
 800600a:	9201      	str	r2, [sp, #4]
 800600c:	9b01      	ldr	r3, [sp, #4]
 800600e:	61a3      	str	r3, [r4, #24]
 8006010:	2b00      	cmp	r3, #0
 8006012:	bf14      	ite	ne
 8006014:	2202      	movne	r2, #2
 8006016:	2201      	moveq	r2, #1
 8006018:	6122      	str	r2, [r4, #16]
 800601a:	b1bd      	cbz	r5, 800604c <__d2b+0x94>
 800601c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006020:	4405      	add	r5, r0
 8006022:	603d      	str	r5, [r7, #0]
 8006024:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006028:	6030      	str	r0, [r6, #0]
 800602a:	4620      	mov	r0, r4
 800602c:	b003      	add	sp, #12
 800602e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006036:	e7d6      	b.n	8005fe6 <__d2b+0x2e>
 8006038:	6161      	str	r1, [r4, #20]
 800603a:	e7e7      	b.n	800600c <__d2b+0x54>
 800603c:	a801      	add	r0, sp, #4
 800603e:	f7ff fd61 	bl	8005b04 <__lo0bits>
 8006042:	9b01      	ldr	r3, [sp, #4]
 8006044:	6163      	str	r3, [r4, #20]
 8006046:	3020      	adds	r0, #32
 8006048:	2201      	movs	r2, #1
 800604a:	e7e5      	b.n	8006018 <__d2b+0x60>
 800604c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006050:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006054:	6038      	str	r0, [r7, #0]
 8006056:	6918      	ldr	r0, [r3, #16]
 8006058:	f7ff fd34 	bl	8005ac4 <__hi0bits>
 800605c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006060:	e7e2      	b.n	8006028 <__d2b+0x70>
 8006062:	bf00      	nop
 8006064:	08006958 	.word	0x08006958
 8006068:	08006969 	.word	0x08006969

0800606c <__sfputc_r>:
 800606c:	6893      	ldr	r3, [r2, #8]
 800606e:	3b01      	subs	r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	b410      	push	{r4}
 8006074:	6093      	str	r3, [r2, #8]
 8006076:	da08      	bge.n	800608a <__sfputc_r+0x1e>
 8006078:	6994      	ldr	r4, [r2, #24]
 800607a:	42a3      	cmp	r3, r4
 800607c:	db01      	blt.n	8006082 <__sfputc_r+0x16>
 800607e:	290a      	cmp	r1, #10
 8006080:	d103      	bne.n	800608a <__sfputc_r+0x1e>
 8006082:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006086:	f000 b9e3 	b.w	8006450 <__swbuf_r>
 800608a:	6813      	ldr	r3, [r2, #0]
 800608c:	1c58      	adds	r0, r3, #1
 800608e:	6010      	str	r0, [r2, #0]
 8006090:	7019      	strb	r1, [r3, #0]
 8006092:	4608      	mov	r0, r1
 8006094:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006098:	4770      	bx	lr

0800609a <__sfputs_r>:
 800609a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609c:	4606      	mov	r6, r0
 800609e:	460f      	mov	r7, r1
 80060a0:	4614      	mov	r4, r2
 80060a2:	18d5      	adds	r5, r2, r3
 80060a4:	42ac      	cmp	r4, r5
 80060a6:	d101      	bne.n	80060ac <__sfputs_r+0x12>
 80060a8:	2000      	movs	r0, #0
 80060aa:	e007      	b.n	80060bc <__sfputs_r+0x22>
 80060ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060b0:	463a      	mov	r2, r7
 80060b2:	4630      	mov	r0, r6
 80060b4:	f7ff ffda 	bl	800606c <__sfputc_r>
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d1f3      	bne.n	80060a4 <__sfputs_r+0xa>
 80060bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060c0 <_vfiprintf_r>:
 80060c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c4:	460d      	mov	r5, r1
 80060c6:	b09d      	sub	sp, #116	; 0x74
 80060c8:	4614      	mov	r4, r2
 80060ca:	4698      	mov	r8, r3
 80060cc:	4606      	mov	r6, r0
 80060ce:	b118      	cbz	r0, 80060d8 <_vfiprintf_r+0x18>
 80060d0:	6a03      	ldr	r3, [r0, #32]
 80060d2:	b90b      	cbnz	r3, 80060d8 <_vfiprintf_r+0x18>
 80060d4:	f7fe fbc6 	bl	8004864 <__sinit>
 80060d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060da:	07d9      	lsls	r1, r3, #31
 80060dc:	d405      	bmi.n	80060ea <_vfiprintf_r+0x2a>
 80060de:	89ab      	ldrh	r3, [r5, #12]
 80060e0:	059a      	lsls	r2, r3, #22
 80060e2:	d402      	bmi.n	80060ea <_vfiprintf_r+0x2a>
 80060e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060e6:	f7fe fcc6 	bl	8004a76 <__retarget_lock_acquire_recursive>
 80060ea:	89ab      	ldrh	r3, [r5, #12]
 80060ec:	071b      	lsls	r3, r3, #28
 80060ee:	d501      	bpl.n	80060f4 <_vfiprintf_r+0x34>
 80060f0:	692b      	ldr	r3, [r5, #16]
 80060f2:	b99b      	cbnz	r3, 800611c <_vfiprintf_r+0x5c>
 80060f4:	4629      	mov	r1, r5
 80060f6:	4630      	mov	r0, r6
 80060f8:	f000 f9e8 	bl	80064cc <__swsetup_r>
 80060fc:	b170      	cbz	r0, 800611c <_vfiprintf_r+0x5c>
 80060fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006100:	07dc      	lsls	r4, r3, #31
 8006102:	d504      	bpl.n	800610e <_vfiprintf_r+0x4e>
 8006104:	f04f 30ff 	mov.w	r0, #4294967295
 8006108:	b01d      	add	sp, #116	; 0x74
 800610a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800610e:	89ab      	ldrh	r3, [r5, #12]
 8006110:	0598      	lsls	r0, r3, #22
 8006112:	d4f7      	bmi.n	8006104 <_vfiprintf_r+0x44>
 8006114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006116:	f7fe fcaf 	bl	8004a78 <__retarget_lock_release_recursive>
 800611a:	e7f3      	b.n	8006104 <_vfiprintf_r+0x44>
 800611c:	2300      	movs	r3, #0
 800611e:	9309      	str	r3, [sp, #36]	; 0x24
 8006120:	2320      	movs	r3, #32
 8006122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006126:	f8cd 800c 	str.w	r8, [sp, #12]
 800612a:	2330      	movs	r3, #48	; 0x30
 800612c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80062e0 <_vfiprintf_r+0x220>
 8006130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006134:	f04f 0901 	mov.w	r9, #1
 8006138:	4623      	mov	r3, r4
 800613a:	469a      	mov	sl, r3
 800613c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006140:	b10a      	cbz	r2, 8006146 <_vfiprintf_r+0x86>
 8006142:	2a25      	cmp	r2, #37	; 0x25
 8006144:	d1f9      	bne.n	800613a <_vfiprintf_r+0x7a>
 8006146:	ebba 0b04 	subs.w	fp, sl, r4
 800614a:	d00b      	beq.n	8006164 <_vfiprintf_r+0xa4>
 800614c:	465b      	mov	r3, fp
 800614e:	4622      	mov	r2, r4
 8006150:	4629      	mov	r1, r5
 8006152:	4630      	mov	r0, r6
 8006154:	f7ff ffa1 	bl	800609a <__sfputs_r>
 8006158:	3001      	adds	r0, #1
 800615a:	f000 80a9 	beq.w	80062b0 <_vfiprintf_r+0x1f0>
 800615e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006160:	445a      	add	r2, fp
 8006162:	9209      	str	r2, [sp, #36]	; 0x24
 8006164:	f89a 3000 	ldrb.w	r3, [sl]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 80a1 	beq.w	80062b0 <_vfiprintf_r+0x1f0>
 800616e:	2300      	movs	r3, #0
 8006170:	f04f 32ff 	mov.w	r2, #4294967295
 8006174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006178:	f10a 0a01 	add.w	sl, sl, #1
 800617c:	9304      	str	r3, [sp, #16]
 800617e:	9307      	str	r3, [sp, #28]
 8006180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006184:	931a      	str	r3, [sp, #104]	; 0x68
 8006186:	4654      	mov	r4, sl
 8006188:	2205      	movs	r2, #5
 800618a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800618e:	4854      	ldr	r0, [pc, #336]	; (80062e0 <_vfiprintf_r+0x220>)
 8006190:	f7fa f82e 	bl	80001f0 <memchr>
 8006194:	9a04      	ldr	r2, [sp, #16]
 8006196:	b9d8      	cbnz	r0, 80061d0 <_vfiprintf_r+0x110>
 8006198:	06d1      	lsls	r1, r2, #27
 800619a:	bf44      	itt	mi
 800619c:	2320      	movmi	r3, #32
 800619e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061a2:	0713      	lsls	r3, r2, #28
 80061a4:	bf44      	itt	mi
 80061a6:	232b      	movmi	r3, #43	; 0x2b
 80061a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061ac:	f89a 3000 	ldrb.w	r3, [sl]
 80061b0:	2b2a      	cmp	r3, #42	; 0x2a
 80061b2:	d015      	beq.n	80061e0 <_vfiprintf_r+0x120>
 80061b4:	9a07      	ldr	r2, [sp, #28]
 80061b6:	4654      	mov	r4, sl
 80061b8:	2000      	movs	r0, #0
 80061ba:	f04f 0c0a 	mov.w	ip, #10
 80061be:	4621      	mov	r1, r4
 80061c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061c4:	3b30      	subs	r3, #48	; 0x30
 80061c6:	2b09      	cmp	r3, #9
 80061c8:	d94d      	bls.n	8006266 <_vfiprintf_r+0x1a6>
 80061ca:	b1b0      	cbz	r0, 80061fa <_vfiprintf_r+0x13a>
 80061cc:	9207      	str	r2, [sp, #28]
 80061ce:	e014      	b.n	80061fa <_vfiprintf_r+0x13a>
 80061d0:	eba0 0308 	sub.w	r3, r0, r8
 80061d4:	fa09 f303 	lsl.w	r3, r9, r3
 80061d8:	4313      	orrs	r3, r2
 80061da:	9304      	str	r3, [sp, #16]
 80061dc:	46a2      	mov	sl, r4
 80061de:	e7d2      	b.n	8006186 <_vfiprintf_r+0xc6>
 80061e0:	9b03      	ldr	r3, [sp, #12]
 80061e2:	1d19      	adds	r1, r3, #4
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	9103      	str	r1, [sp, #12]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	bfbb      	ittet	lt
 80061ec:	425b      	neglt	r3, r3
 80061ee:	f042 0202 	orrlt.w	r2, r2, #2
 80061f2:	9307      	strge	r3, [sp, #28]
 80061f4:	9307      	strlt	r3, [sp, #28]
 80061f6:	bfb8      	it	lt
 80061f8:	9204      	strlt	r2, [sp, #16]
 80061fa:	7823      	ldrb	r3, [r4, #0]
 80061fc:	2b2e      	cmp	r3, #46	; 0x2e
 80061fe:	d10c      	bne.n	800621a <_vfiprintf_r+0x15a>
 8006200:	7863      	ldrb	r3, [r4, #1]
 8006202:	2b2a      	cmp	r3, #42	; 0x2a
 8006204:	d134      	bne.n	8006270 <_vfiprintf_r+0x1b0>
 8006206:	9b03      	ldr	r3, [sp, #12]
 8006208:	1d1a      	adds	r2, r3, #4
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	9203      	str	r2, [sp, #12]
 800620e:	2b00      	cmp	r3, #0
 8006210:	bfb8      	it	lt
 8006212:	f04f 33ff 	movlt.w	r3, #4294967295
 8006216:	3402      	adds	r4, #2
 8006218:	9305      	str	r3, [sp, #20]
 800621a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80062f0 <_vfiprintf_r+0x230>
 800621e:	7821      	ldrb	r1, [r4, #0]
 8006220:	2203      	movs	r2, #3
 8006222:	4650      	mov	r0, sl
 8006224:	f7f9 ffe4 	bl	80001f0 <memchr>
 8006228:	b138      	cbz	r0, 800623a <_vfiprintf_r+0x17a>
 800622a:	9b04      	ldr	r3, [sp, #16]
 800622c:	eba0 000a 	sub.w	r0, r0, sl
 8006230:	2240      	movs	r2, #64	; 0x40
 8006232:	4082      	lsls	r2, r0
 8006234:	4313      	orrs	r3, r2
 8006236:	3401      	adds	r4, #1
 8006238:	9304      	str	r3, [sp, #16]
 800623a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800623e:	4829      	ldr	r0, [pc, #164]	; (80062e4 <_vfiprintf_r+0x224>)
 8006240:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006244:	2206      	movs	r2, #6
 8006246:	f7f9 ffd3 	bl	80001f0 <memchr>
 800624a:	2800      	cmp	r0, #0
 800624c:	d03f      	beq.n	80062ce <_vfiprintf_r+0x20e>
 800624e:	4b26      	ldr	r3, [pc, #152]	; (80062e8 <_vfiprintf_r+0x228>)
 8006250:	bb1b      	cbnz	r3, 800629a <_vfiprintf_r+0x1da>
 8006252:	9b03      	ldr	r3, [sp, #12]
 8006254:	3307      	adds	r3, #7
 8006256:	f023 0307 	bic.w	r3, r3, #7
 800625a:	3308      	adds	r3, #8
 800625c:	9303      	str	r3, [sp, #12]
 800625e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006260:	443b      	add	r3, r7
 8006262:	9309      	str	r3, [sp, #36]	; 0x24
 8006264:	e768      	b.n	8006138 <_vfiprintf_r+0x78>
 8006266:	fb0c 3202 	mla	r2, ip, r2, r3
 800626a:	460c      	mov	r4, r1
 800626c:	2001      	movs	r0, #1
 800626e:	e7a6      	b.n	80061be <_vfiprintf_r+0xfe>
 8006270:	2300      	movs	r3, #0
 8006272:	3401      	adds	r4, #1
 8006274:	9305      	str	r3, [sp, #20]
 8006276:	4619      	mov	r1, r3
 8006278:	f04f 0c0a 	mov.w	ip, #10
 800627c:	4620      	mov	r0, r4
 800627e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006282:	3a30      	subs	r2, #48	; 0x30
 8006284:	2a09      	cmp	r2, #9
 8006286:	d903      	bls.n	8006290 <_vfiprintf_r+0x1d0>
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0c6      	beq.n	800621a <_vfiprintf_r+0x15a>
 800628c:	9105      	str	r1, [sp, #20]
 800628e:	e7c4      	b.n	800621a <_vfiprintf_r+0x15a>
 8006290:	fb0c 2101 	mla	r1, ip, r1, r2
 8006294:	4604      	mov	r4, r0
 8006296:	2301      	movs	r3, #1
 8006298:	e7f0      	b.n	800627c <_vfiprintf_r+0x1bc>
 800629a:	ab03      	add	r3, sp, #12
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	462a      	mov	r2, r5
 80062a0:	4b12      	ldr	r3, [pc, #72]	; (80062ec <_vfiprintf_r+0x22c>)
 80062a2:	a904      	add	r1, sp, #16
 80062a4:	4630      	mov	r0, r6
 80062a6:	f7fd fe8b 	bl	8003fc0 <_printf_float>
 80062aa:	4607      	mov	r7, r0
 80062ac:	1c78      	adds	r0, r7, #1
 80062ae:	d1d6      	bne.n	800625e <_vfiprintf_r+0x19e>
 80062b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062b2:	07d9      	lsls	r1, r3, #31
 80062b4:	d405      	bmi.n	80062c2 <_vfiprintf_r+0x202>
 80062b6:	89ab      	ldrh	r3, [r5, #12]
 80062b8:	059a      	lsls	r2, r3, #22
 80062ba:	d402      	bmi.n	80062c2 <_vfiprintf_r+0x202>
 80062bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062be:	f7fe fbdb 	bl	8004a78 <__retarget_lock_release_recursive>
 80062c2:	89ab      	ldrh	r3, [r5, #12]
 80062c4:	065b      	lsls	r3, r3, #25
 80062c6:	f53f af1d 	bmi.w	8006104 <_vfiprintf_r+0x44>
 80062ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062cc:	e71c      	b.n	8006108 <_vfiprintf_r+0x48>
 80062ce:	ab03      	add	r3, sp, #12
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	462a      	mov	r2, r5
 80062d4:	4b05      	ldr	r3, [pc, #20]	; (80062ec <_vfiprintf_r+0x22c>)
 80062d6:	a904      	add	r1, sp, #16
 80062d8:	4630      	mov	r0, r6
 80062da:	f7fe f915 	bl	8004508 <_printf_i>
 80062de:	e7e4      	b.n	80062aa <_vfiprintf_r+0x1ea>
 80062e0:	08006ac4 	.word	0x08006ac4
 80062e4:	08006ace 	.word	0x08006ace
 80062e8:	08003fc1 	.word	0x08003fc1
 80062ec:	0800609b 	.word	0x0800609b
 80062f0:	08006aca 	.word	0x08006aca

080062f4 <__sflush_r>:
 80062f4:	898a      	ldrh	r2, [r1, #12]
 80062f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062fa:	4605      	mov	r5, r0
 80062fc:	0710      	lsls	r0, r2, #28
 80062fe:	460c      	mov	r4, r1
 8006300:	d458      	bmi.n	80063b4 <__sflush_r+0xc0>
 8006302:	684b      	ldr	r3, [r1, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	dc05      	bgt.n	8006314 <__sflush_r+0x20>
 8006308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800630a:	2b00      	cmp	r3, #0
 800630c:	dc02      	bgt.n	8006314 <__sflush_r+0x20>
 800630e:	2000      	movs	r0, #0
 8006310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006316:	2e00      	cmp	r6, #0
 8006318:	d0f9      	beq.n	800630e <__sflush_r+0x1a>
 800631a:	2300      	movs	r3, #0
 800631c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006320:	682f      	ldr	r7, [r5, #0]
 8006322:	6a21      	ldr	r1, [r4, #32]
 8006324:	602b      	str	r3, [r5, #0]
 8006326:	d032      	beq.n	800638e <__sflush_r+0x9a>
 8006328:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800632a:	89a3      	ldrh	r3, [r4, #12]
 800632c:	075a      	lsls	r2, r3, #29
 800632e:	d505      	bpl.n	800633c <__sflush_r+0x48>
 8006330:	6863      	ldr	r3, [r4, #4]
 8006332:	1ac0      	subs	r0, r0, r3
 8006334:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006336:	b10b      	cbz	r3, 800633c <__sflush_r+0x48>
 8006338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800633a:	1ac0      	subs	r0, r0, r3
 800633c:	2300      	movs	r3, #0
 800633e:	4602      	mov	r2, r0
 8006340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006342:	6a21      	ldr	r1, [r4, #32]
 8006344:	4628      	mov	r0, r5
 8006346:	47b0      	blx	r6
 8006348:	1c43      	adds	r3, r0, #1
 800634a:	89a3      	ldrh	r3, [r4, #12]
 800634c:	d106      	bne.n	800635c <__sflush_r+0x68>
 800634e:	6829      	ldr	r1, [r5, #0]
 8006350:	291d      	cmp	r1, #29
 8006352:	d82b      	bhi.n	80063ac <__sflush_r+0xb8>
 8006354:	4a29      	ldr	r2, [pc, #164]	; (80063fc <__sflush_r+0x108>)
 8006356:	410a      	asrs	r2, r1
 8006358:	07d6      	lsls	r6, r2, #31
 800635a:	d427      	bmi.n	80063ac <__sflush_r+0xb8>
 800635c:	2200      	movs	r2, #0
 800635e:	6062      	str	r2, [r4, #4]
 8006360:	04d9      	lsls	r1, r3, #19
 8006362:	6922      	ldr	r2, [r4, #16]
 8006364:	6022      	str	r2, [r4, #0]
 8006366:	d504      	bpl.n	8006372 <__sflush_r+0x7e>
 8006368:	1c42      	adds	r2, r0, #1
 800636a:	d101      	bne.n	8006370 <__sflush_r+0x7c>
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	b903      	cbnz	r3, 8006372 <__sflush_r+0x7e>
 8006370:	6560      	str	r0, [r4, #84]	; 0x54
 8006372:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006374:	602f      	str	r7, [r5, #0]
 8006376:	2900      	cmp	r1, #0
 8006378:	d0c9      	beq.n	800630e <__sflush_r+0x1a>
 800637a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800637e:	4299      	cmp	r1, r3
 8006380:	d002      	beq.n	8006388 <__sflush_r+0x94>
 8006382:	4628      	mov	r0, r5
 8006384:	f7ff f9f6 	bl	8005774 <_free_r>
 8006388:	2000      	movs	r0, #0
 800638a:	6360      	str	r0, [r4, #52]	; 0x34
 800638c:	e7c0      	b.n	8006310 <__sflush_r+0x1c>
 800638e:	2301      	movs	r3, #1
 8006390:	4628      	mov	r0, r5
 8006392:	47b0      	blx	r6
 8006394:	1c41      	adds	r1, r0, #1
 8006396:	d1c8      	bne.n	800632a <__sflush_r+0x36>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0c5      	beq.n	800632a <__sflush_r+0x36>
 800639e:	2b1d      	cmp	r3, #29
 80063a0:	d001      	beq.n	80063a6 <__sflush_r+0xb2>
 80063a2:	2b16      	cmp	r3, #22
 80063a4:	d101      	bne.n	80063aa <__sflush_r+0xb6>
 80063a6:	602f      	str	r7, [r5, #0]
 80063a8:	e7b1      	b.n	800630e <__sflush_r+0x1a>
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b0:	81a3      	strh	r3, [r4, #12]
 80063b2:	e7ad      	b.n	8006310 <__sflush_r+0x1c>
 80063b4:	690f      	ldr	r7, [r1, #16]
 80063b6:	2f00      	cmp	r7, #0
 80063b8:	d0a9      	beq.n	800630e <__sflush_r+0x1a>
 80063ba:	0793      	lsls	r3, r2, #30
 80063bc:	680e      	ldr	r6, [r1, #0]
 80063be:	bf08      	it	eq
 80063c0:	694b      	ldreq	r3, [r1, #20]
 80063c2:	600f      	str	r7, [r1, #0]
 80063c4:	bf18      	it	ne
 80063c6:	2300      	movne	r3, #0
 80063c8:	eba6 0807 	sub.w	r8, r6, r7
 80063cc:	608b      	str	r3, [r1, #8]
 80063ce:	f1b8 0f00 	cmp.w	r8, #0
 80063d2:	dd9c      	ble.n	800630e <__sflush_r+0x1a>
 80063d4:	6a21      	ldr	r1, [r4, #32]
 80063d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063d8:	4643      	mov	r3, r8
 80063da:	463a      	mov	r2, r7
 80063dc:	4628      	mov	r0, r5
 80063de:	47b0      	blx	r6
 80063e0:	2800      	cmp	r0, #0
 80063e2:	dc06      	bgt.n	80063f2 <__sflush_r+0xfe>
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ea:	81a3      	strh	r3, [r4, #12]
 80063ec:	f04f 30ff 	mov.w	r0, #4294967295
 80063f0:	e78e      	b.n	8006310 <__sflush_r+0x1c>
 80063f2:	4407      	add	r7, r0
 80063f4:	eba8 0800 	sub.w	r8, r8, r0
 80063f8:	e7e9      	b.n	80063ce <__sflush_r+0xda>
 80063fa:	bf00      	nop
 80063fc:	dfbffffe 	.word	0xdfbffffe

08006400 <_fflush_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	690b      	ldr	r3, [r1, #16]
 8006404:	4605      	mov	r5, r0
 8006406:	460c      	mov	r4, r1
 8006408:	b913      	cbnz	r3, 8006410 <_fflush_r+0x10>
 800640a:	2500      	movs	r5, #0
 800640c:	4628      	mov	r0, r5
 800640e:	bd38      	pop	{r3, r4, r5, pc}
 8006410:	b118      	cbz	r0, 800641a <_fflush_r+0x1a>
 8006412:	6a03      	ldr	r3, [r0, #32]
 8006414:	b90b      	cbnz	r3, 800641a <_fflush_r+0x1a>
 8006416:	f7fe fa25 	bl	8004864 <__sinit>
 800641a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0f3      	beq.n	800640a <_fflush_r+0xa>
 8006422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006424:	07d0      	lsls	r0, r2, #31
 8006426:	d404      	bmi.n	8006432 <_fflush_r+0x32>
 8006428:	0599      	lsls	r1, r3, #22
 800642a:	d402      	bmi.n	8006432 <_fflush_r+0x32>
 800642c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800642e:	f7fe fb22 	bl	8004a76 <__retarget_lock_acquire_recursive>
 8006432:	4628      	mov	r0, r5
 8006434:	4621      	mov	r1, r4
 8006436:	f7ff ff5d 	bl	80062f4 <__sflush_r>
 800643a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800643c:	07da      	lsls	r2, r3, #31
 800643e:	4605      	mov	r5, r0
 8006440:	d4e4      	bmi.n	800640c <_fflush_r+0xc>
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	059b      	lsls	r3, r3, #22
 8006446:	d4e1      	bmi.n	800640c <_fflush_r+0xc>
 8006448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800644a:	f7fe fb15 	bl	8004a78 <__retarget_lock_release_recursive>
 800644e:	e7dd      	b.n	800640c <_fflush_r+0xc>

08006450 <__swbuf_r>:
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006452:	460e      	mov	r6, r1
 8006454:	4614      	mov	r4, r2
 8006456:	4605      	mov	r5, r0
 8006458:	b118      	cbz	r0, 8006462 <__swbuf_r+0x12>
 800645a:	6a03      	ldr	r3, [r0, #32]
 800645c:	b90b      	cbnz	r3, 8006462 <__swbuf_r+0x12>
 800645e:	f7fe fa01 	bl	8004864 <__sinit>
 8006462:	69a3      	ldr	r3, [r4, #24]
 8006464:	60a3      	str	r3, [r4, #8]
 8006466:	89a3      	ldrh	r3, [r4, #12]
 8006468:	071a      	lsls	r2, r3, #28
 800646a:	d525      	bpl.n	80064b8 <__swbuf_r+0x68>
 800646c:	6923      	ldr	r3, [r4, #16]
 800646e:	b31b      	cbz	r3, 80064b8 <__swbuf_r+0x68>
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	6922      	ldr	r2, [r4, #16]
 8006474:	1a98      	subs	r0, r3, r2
 8006476:	6963      	ldr	r3, [r4, #20]
 8006478:	b2f6      	uxtb	r6, r6
 800647a:	4283      	cmp	r3, r0
 800647c:	4637      	mov	r7, r6
 800647e:	dc04      	bgt.n	800648a <__swbuf_r+0x3a>
 8006480:	4621      	mov	r1, r4
 8006482:	4628      	mov	r0, r5
 8006484:	f7ff ffbc 	bl	8006400 <_fflush_r>
 8006488:	b9e0      	cbnz	r0, 80064c4 <__swbuf_r+0x74>
 800648a:	68a3      	ldr	r3, [r4, #8]
 800648c:	3b01      	subs	r3, #1
 800648e:	60a3      	str	r3, [r4, #8]
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	6022      	str	r2, [r4, #0]
 8006496:	701e      	strb	r6, [r3, #0]
 8006498:	6962      	ldr	r2, [r4, #20]
 800649a:	1c43      	adds	r3, r0, #1
 800649c:	429a      	cmp	r2, r3
 800649e:	d004      	beq.n	80064aa <__swbuf_r+0x5a>
 80064a0:	89a3      	ldrh	r3, [r4, #12]
 80064a2:	07db      	lsls	r3, r3, #31
 80064a4:	d506      	bpl.n	80064b4 <__swbuf_r+0x64>
 80064a6:	2e0a      	cmp	r6, #10
 80064a8:	d104      	bne.n	80064b4 <__swbuf_r+0x64>
 80064aa:	4621      	mov	r1, r4
 80064ac:	4628      	mov	r0, r5
 80064ae:	f7ff ffa7 	bl	8006400 <_fflush_r>
 80064b2:	b938      	cbnz	r0, 80064c4 <__swbuf_r+0x74>
 80064b4:	4638      	mov	r0, r7
 80064b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064b8:	4621      	mov	r1, r4
 80064ba:	4628      	mov	r0, r5
 80064bc:	f000 f806 	bl	80064cc <__swsetup_r>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	d0d5      	beq.n	8006470 <__swbuf_r+0x20>
 80064c4:	f04f 37ff 	mov.w	r7, #4294967295
 80064c8:	e7f4      	b.n	80064b4 <__swbuf_r+0x64>
	...

080064cc <__swsetup_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	4b2a      	ldr	r3, [pc, #168]	; (8006578 <__swsetup_r+0xac>)
 80064d0:	4605      	mov	r5, r0
 80064d2:	6818      	ldr	r0, [r3, #0]
 80064d4:	460c      	mov	r4, r1
 80064d6:	b118      	cbz	r0, 80064e0 <__swsetup_r+0x14>
 80064d8:	6a03      	ldr	r3, [r0, #32]
 80064da:	b90b      	cbnz	r3, 80064e0 <__swsetup_r+0x14>
 80064dc:	f7fe f9c2 	bl	8004864 <__sinit>
 80064e0:	89a3      	ldrh	r3, [r4, #12]
 80064e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064e6:	0718      	lsls	r0, r3, #28
 80064e8:	d422      	bmi.n	8006530 <__swsetup_r+0x64>
 80064ea:	06d9      	lsls	r1, r3, #27
 80064ec:	d407      	bmi.n	80064fe <__swsetup_r+0x32>
 80064ee:	2309      	movs	r3, #9
 80064f0:	602b      	str	r3, [r5, #0]
 80064f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80064f6:	81a3      	strh	r3, [r4, #12]
 80064f8:	f04f 30ff 	mov.w	r0, #4294967295
 80064fc:	e034      	b.n	8006568 <__swsetup_r+0x9c>
 80064fe:	0758      	lsls	r0, r3, #29
 8006500:	d512      	bpl.n	8006528 <__swsetup_r+0x5c>
 8006502:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006504:	b141      	cbz	r1, 8006518 <__swsetup_r+0x4c>
 8006506:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800650a:	4299      	cmp	r1, r3
 800650c:	d002      	beq.n	8006514 <__swsetup_r+0x48>
 800650e:	4628      	mov	r0, r5
 8006510:	f7ff f930 	bl	8005774 <_free_r>
 8006514:	2300      	movs	r3, #0
 8006516:	6363      	str	r3, [r4, #52]	; 0x34
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800651e:	81a3      	strh	r3, [r4, #12]
 8006520:	2300      	movs	r3, #0
 8006522:	6063      	str	r3, [r4, #4]
 8006524:	6923      	ldr	r3, [r4, #16]
 8006526:	6023      	str	r3, [r4, #0]
 8006528:	89a3      	ldrh	r3, [r4, #12]
 800652a:	f043 0308 	orr.w	r3, r3, #8
 800652e:	81a3      	strh	r3, [r4, #12]
 8006530:	6923      	ldr	r3, [r4, #16]
 8006532:	b94b      	cbnz	r3, 8006548 <__swsetup_r+0x7c>
 8006534:	89a3      	ldrh	r3, [r4, #12]
 8006536:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800653a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800653e:	d003      	beq.n	8006548 <__swsetup_r+0x7c>
 8006540:	4621      	mov	r1, r4
 8006542:	4628      	mov	r0, r5
 8006544:	f000 f8c4 	bl	80066d0 <__smakebuf_r>
 8006548:	89a0      	ldrh	r0, [r4, #12]
 800654a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800654e:	f010 0301 	ands.w	r3, r0, #1
 8006552:	d00a      	beq.n	800656a <__swsetup_r+0x9e>
 8006554:	2300      	movs	r3, #0
 8006556:	60a3      	str	r3, [r4, #8]
 8006558:	6963      	ldr	r3, [r4, #20]
 800655a:	425b      	negs	r3, r3
 800655c:	61a3      	str	r3, [r4, #24]
 800655e:	6923      	ldr	r3, [r4, #16]
 8006560:	b943      	cbnz	r3, 8006574 <__swsetup_r+0xa8>
 8006562:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006566:	d1c4      	bne.n	80064f2 <__swsetup_r+0x26>
 8006568:	bd38      	pop	{r3, r4, r5, pc}
 800656a:	0781      	lsls	r1, r0, #30
 800656c:	bf58      	it	pl
 800656e:	6963      	ldrpl	r3, [r4, #20]
 8006570:	60a3      	str	r3, [r4, #8]
 8006572:	e7f4      	b.n	800655e <__swsetup_r+0x92>
 8006574:	2000      	movs	r0, #0
 8006576:	e7f7      	b.n	8006568 <__swsetup_r+0x9c>
 8006578:	20000064 	.word	0x20000064

0800657c <_sbrk_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	4d06      	ldr	r5, [pc, #24]	; (8006598 <_sbrk_r+0x1c>)
 8006580:	2300      	movs	r3, #0
 8006582:	4604      	mov	r4, r0
 8006584:	4608      	mov	r0, r1
 8006586:	602b      	str	r3, [r5, #0]
 8006588:	f7fa ff54 	bl	8001434 <_sbrk>
 800658c:	1c43      	adds	r3, r0, #1
 800658e:	d102      	bne.n	8006596 <_sbrk_r+0x1a>
 8006590:	682b      	ldr	r3, [r5, #0]
 8006592:	b103      	cbz	r3, 8006596 <_sbrk_r+0x1a>
 8006594:	6023      	str	r3, [r4, #0]
 8006596:	bd38      	pop	{r3, r4, r5, pc}
 8006598:	20000414 	.word	0x20000414

0800659c <memcpy>:
 800659c:	440a      	add	r2, r1
 800659e:	4291      	cmp	r1, r2
 80065a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80065a4:	d100      	bne.n	80065a8 <memcpy+0xc>
 80065a6:	4770      	bx	lr
 80065a8:	b510      	push	{r4, lr}
 80065aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065b2:	4291      	cmp	r1, r2
 80065b4:	d1f9      	bne.n	80065aa <memcpy+0xe>
 80065b6:	bd10      	pop	{r4, pc}

080065b8 <__assert_func>:
 80065b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065ba:	4614      	mov	r4, r2
 80065bc:	461a      	mov	r2, r3
 80065be:	4b09      	ldr	r3, [pc, #36]	; (80065e4 <__assert_func+0x2c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4605      	mov	r5, r0
 80065c4:	68d8      	ldr	r0, [r3, #12]
 80065c6:	b14c      	cbz	r4, 80065dc <__assert_func+0x24>
 80065c8:	4b07      	ldr	r3, [pc, #28]	; (80065e8 <__assert_func+0x30>)
 80065ca:	9100      	str	r1, [sp, #0]
 80065cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80065d0:	4906      	ldr	r1, [pc, #24]	; (80065ec <__assert_func+0x34>)
 80065d2:	462b      	mov	r3, r5
 80065d4:	f000 f844 	bl	8006660 <fiprintf>
 80065d8:	f000 f8d8 	bl	800678c <abort>
 80065dc:	4b04      	ldr	r3, [pc, #16]	; (80065f0 <__assert_func+0x38>)
 80065de:	461c      	mov	r4, r3
 80065e0:	e7f3      	b.n	80065ca <__assert_func+0x12>
 80065e2:	bf00      	nop
 80065e4:	20000064 	.word	0x20000064
 80065e8:	08006adf 	.word	0x08006adf
 80065ec:	08006aec 	.word	0x08006aec
 80065f0:	08006b1a 	.word	0x08006b1a

080065f4 <_calloc_r>:
 80065f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065f6:	fba1 2402 	umull	r2, r4, r1, r2
 80065fa:	b94c      	cbnz	r4, 8006610 <_calloc_r+0x1c>
 80065fc:	4611      	mov	r1, r2
 80065fe:	9201      	str	r2, [sp, #4]
 8006600:	f7ff f92c 	bl	800585c <_malloc_r>
 8006604:	9a01      	ldr	r2, [sp, #4]
 8006606:	4605      	mov	r5, r0
 8006608:	b930      	cbnz	r0, 8006618 <_calloc_r+0x24>
 800660a:	4628      	mov	r0, r5
 800660c:	b003      	add	sp, #12
 800660e:	bd30      	pop	{r4, r5, pc}
 8006610:	220c      	movs	r2, #12
 8006612:	6002      	str	r2, [r0, #0]
 8006614:	2500      	movs	r5, #0
 8006616:	e7f8      	b.n	800660a <_calloc_r+0x16>
 8006618:	4621      	mov	r1, r4
 800661a:	f7fe f9ae 	bl	800497a <memset>
 800661e:	e7f4      	b.n	800660a <_calloc_r+0x16>

08006620 <__ascii_mbtowc>:
 8006620:	b082      	sub	sp, #8
 8006622:	b901      	cbnz	r1, 8006626 <__ascii_mbtowc+0x6>
 8006624:	a901      	add	r1, sp, #4
 8006626:	b142      	cbz	r2, 800663a <__ascii_mbtowc+0x1a>
 8006628:	b14b      	cbz	r3, 800663e <__ascii_mbtowc+0x1e>
 800662a:	7813      	ldrb	r3, [r2, #0]
 800662c:	600b      	str	r3, [r1, #0]
 800662e:	7812      	ldrb	r2, [r2, #0]
 8006630:	1e10      	subs	r0, r2, #0
 8006632:	bf18      	it	ne
 8006634:	2001      	movne	r0, #1
 8006636:	b002      	add	sp, #8
 8006638:	4770      	bx	lr
 800663a:	4610      	mov	r0, r2
 800663c:	e7fb      	b.n	8006636 <__ascii_mbtowc+0x16>
 800663e:	f06f 0001 	mvn.w	r0, #1
 8006642:	e7f8      	b.n	8006636 <__ascii_mbtowc+0x16>

08006644 <__ascii_wctomb>:
 8006644:	b149      	cbz	r1, 800665a <__ascii_wctomb+0x16>
 8006646:	2aff      	cmp	r2, #255	; 0xff
 8006648:	bf85      	ittet	hi
 800664a:	238a      	movhi	r3, #138	; 0x8a
 800664c:	6003      	strhi	r3, [r0, #0]
 800664e:	700a      	strbls	r2, [r1, #0]
 8006650:	f04f 30ff 	movhi.w	r0, #4294967295
 8006654:	bf98      	it	ls
 8006656:	2001      	movls	r0, #1
 8006658:	4770      	bx	lr
 800665a:	4608      	mov	r0, r1
 800665c:	4770      	bx	lr
	...

08006660 <fiprintf>:
 8006660:	b40e      	push	{r1, r2, r3}
 8006662:	b503      	push	{r0, r1, lr}
 8006664:	4601      	mov	r1, r0
 8006666:	ab03      	add	r3, sp, #12
 8006668:	4805      	ldr	r0, [pc, #20]	; (8006680 <fiprintf+0x20>)
 800666a:	f853 2b04 	ldr.w	r2, [r3], #4
 800666e:	6800      	ldr	r0, [r0, #0]
 8006670:	9301      	str	r3, [sp, #4]
 8006672:	f7ff fd25 	bl	80060c0 <_vfiprintf_r>
 8006676:	b002      	add	sp, #8
 8006678:	f85d eb04 	ldr.w	lr, [sp], #4
 800667c:	b003      	add	sp, #12
 800667e:	4770      	bx	lr
 8006680:	20000064 	.word	0x20000064

08006684 <__swhatbuf_r>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	460c      	mov	r4, r1
 8006688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800668c:	2900      	cmp	r1, #0
 800668e:	b096      	sub	sp, #88	; 0x58
 8006690:	4615      	mov	r5, r2
 8006692:	461e      	mov	r6, r3
 8006694:	da0d      	bge.n	80066b2 <__swhatbuf_r+0x2e>
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	f013 0f80 	tst.w	r3, #128	; 0x80
 800669c:	f04f 0100 	mov.w	r1, #0
 80066a0:	bf0c      	ite	eq
 80066a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80066a6:	2340      	movne	r3, #64	; 0x40
 80066a8:	2000      	movs	r0, #0
 80066aa:	6031      	str	r1, [r6, #0]
 80066ac:	602b      	str	r3, [r5, #0]
 80066ae:	b016      	add	sp, #88	; 0x58
 80066b0:	bd70      	pop	{r4, r5, r6, pc}
 80066b2:	466a      	mov	r2, sp
 80066b4:	f000 f848 	bl	8006748 <_fstat_r>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	dbec      	blt.n	8006696 <__swhatbuf_r+0x12>
 80066bc:	9901      	ldr	r1, [sp, #4]
 80066be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80066c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80066c6:	4259      	negs	r1, r3
 80066c8:	4159      	adcs	r1, r3
 80066ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066ce:	e7eb      	b.n	80066a8 <__swhatbuf_r+0x24>

080066d0 <__smakebuf_r>:
 80066d0:	898b      	ldrh	r3, [r1, #12]
 80066d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066d4:	079d      	lsls	r5, r3, #30
 80066d6:	4606      	mov	r6, r0
 80066d8:	460c      	mov	r4, r1
 80066da:	d507      	bpl.n	80066ec <__smakebuf_r+0x1c>
 80066dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	6123      	str	r3, [r4, #16]
 80066e4:	2301      	movs	r3, #1
 80066e6:	6163      	str	r3, [r4, #20]
 80066e8:	b002      	add	sp, #8
 80066ea:	bd70      	pop	{r4, r5, r6, pc}
 80066ec:	ab01      	add	r3, sp, #4
 80066ee:	466a      	mov	r2, sp
 80066f0:	f7ff ffc8 	bl	8006684 <__swhatbuf_r>
 80066f4:	9900      	ldr	r1, [sp, #0]
 80066f6:	4605      	mov	r5, r0
 80066f8:	4630      	mov	r0, r6
 80066fa:	f7ff f8af 	bl	800585c <_malloc_r>
 80066fe:	b948      	cbnz	r0, 8006714 <__smakebuf_r+0x44>
 8006700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006704:	059a      	lsls	r2, r3, #22
 8006706:	d4ef      	bmi.n	80066e8 <__smakebuf_r+0x18>
 8006708:	f023 0303 	bic.w	r3, r3, #3
 800670c:	f043 0302 	orr.w	r3, r3, #2
 8006710:	81a3      	strh	r3, [r4, #12]
 8006712:	e7e3      	b.n	80066dc <__smakebuf_r+0xc>
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	6020      	str	r0, [r4, #0]
 8006718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671c:	81a3      	strh	r3, [r4, #12]
 800671e:	9b00      	ldr	r3, [sp, #0]
 8006720:	6163      	str	r3, [r4, #20]
 8006722:	9b01      	ldr	r3, [sp, #4]
 8006724:	6120      	str	r0, [r4, #16]
 8006726:	b15b      	cbz	r3, 8006740 <__smakebuf_r+0x70>
 8006728:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800672c:	4630      	mov	r0, r6
 800672e:	f000 f81d 	bl	800676c <_isatty_r>
 8006732:	b128      	cbz	r0, 8006740 <__smakebuf_r+0x70>
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	f023 0303 	bic.w	r3, r3, #3
 800673a:	f043 0301 	orr.w	r3, r3, #1
 800673e:	81a3      	strh	r3, [r4, #12]
 8006740:	89a3      	ldrh	r3, [r4, #12]
 8006742:	431d      	orrs	r5, r3
 8006744:	81a5      	strh	r5, [r4, #12]
 8006746:	e7cf      	b.n	80066e8 <__smakebuf_r+0x18>

08006748 <_fstat_r>:
 8006748:	b538      	push	{r3, r4, r5, lr}
 800674a:	4d07      	ldr	r5, [pc, #28]	; (8006768 <_fstat_r+0x20>)
 800674c:	2300      	movs	r3, #0
 800674e:	4604      	mov	r4, r0
 8006750:	4608      	mov	r0, r1
 8006752:	4611      	mov	r1, r2
 8006754:	602b      	str	r3, [r5, #0]
 8006756:	f7fa fe44 	bl	80013e2 <_fstat>
 800675a:	1c43      	adds	r3, r0, #1
 800675c:	d102      	bne.n	8006764 <_fstat_r+0x1c>
 800675e:	682b      	ldr	r3, [r5, #0]
 8006760:	b103      	cbz	r3, 8006764 <_fstat_r+0x1c>
 8006762:	6023      	str	r3, [r4, #0]
 8006764:	bd38      	pop	{r3, r4, r5, pc}
 8006766:	bf00      	nop
 8006768:	20000414 	.word	0x20000414

0800676c <_isatty_r>:
 800676c:	b538      	push	{r3, r4, r5, lr}
 800676e:	4d06      	ldr	r5, [pc, #24]	; (8006788 <_isatty_r+0x1c>)
 8006770:	2300      	movs	r3, #0
 8006772:	4604      	mov	r4, r0
 8006774:	4608      	mov	r0, r1
 8006776:	602b      	str	r3, [r5, #0]
 8006778:	f7fa fe43 	bl	8001402 <_isatty>
 800677c:	1c43      	adds	r3, r0, #1
 800677e:	d102      	bne.n	8006786 <_isatty_r+0x1a>
 8006780:	682b      	ldr	r3, [r5, #0]
 8006782:	b103      	cbz	r3, 8006786 <_isatty_r+0x1a>
 8006784:	6023      	str	r3, [r4, #0]
 8006786:	bd38      	pop	{r3, r4, r5, pc}
 8006788:	20000414 	.word	0x20000414

0800678c <abort>:
 800678c:	b508      	push	{r3, lr}
 800678e:	2006      	movs	r0, #6
 8006790:	f000 f82c 	bl	80067ec <raise>
 8006794:	2001      	movs	r0, #1
 8006796:	f7fa fdd5 	bl	8001344 <_exit>

0800679a <_raise_r>:
 800679a:	291f      	cmp	r1, #31
 800679c:	b538      	push	{r3, r4, r5, lr}
 800679e:	4604      	mov	r4, r0
 80067a0:	460d      	mov	r5, r1
 80067a2:	d904      	bls.n	80067ae <_raise_r+0x14>
 80067a4:	2316      	movs	r3, #22
 80067a6:	6003      	str	r3, [r0, #0]
 80067a8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ac:	bd38      	pop	{r3, r4, r5, pc}
 80067ae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80067b0:	b112      	cbz	r2, 80067b8 <_raise_r+0x1e>
 80067b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80067b6:	b94b      	cbnz	r3, 80067cc <_raise_r+0x32>
 80067b8:	4620      	mov	r0, r4
 80067ba:	f000 f831 	bl	8006820 <_getpid_r>
 80067be:	462a      	mov	r2, r5
 80067c0:	4601      	mov	r1, r0
 80067c2:	4620      	mov	r0, r4
 80067c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067c8:	f000 b818 	b.w	80067fc <_kill_r>
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d00a      	beq.n	80067e6 <_raise_r+0x4c>
 80067d0:	1c59      	adds	r1, r3, #1
 80067d2:	d103      	bne.n	80067dc <_raise_r+0x42>
 80067d4:	2316      	movs	r3, #22
 80067d6:	6003      	str	r3, [r0, #0]
 80067d8:	2001      	movs	r0, #1
 80067da:	e7e7      	b.n	80067ac <_raise_r+0x12>
 80067dc:	2400      	movs	r4, #0
 80067de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80067e2:	4628      	mov	r0, r5
 80067e4:	4798      	blx	r3
 80067e6:	2000      	movs	r0, #0
 80067e8:	e7e0      	b.n	80067ac <_raise_r+0x12>
	...

080067ec <raise>:
 80067ec:	4b02      	ldr	r3, [pc, #8]	; (80067f8 <raise+0xc>)
 80067ee:	4601      	mov	r1, r0
 80067f0:	6818      	ldr	r0, [r3, #0]
 80067f2:	f7ff bfd2 	b.w	800679a <_raise_r>
 80067f6:	bf00      	nop
 80067f8:	20000064 	.word	0x20000064

080067fc <_kill_r>:
 80067fc:	b538      	push	{r3, r4, r5, lr}
 80067fe:	4d07      	ldr	r5, [pc, #28]	; (800681c <_kill_r+0x20>)
 8006800:	2300      	movs	r3, #0
 8006802:	4604      	mov	r4, r0
 8006804:	4608      	mov	r0, r1
 8006806:	4611      	mov	r1, r2
 8006808:	602b      	str	r3, [r5, #0]
 800680a:	f7fa fd8b 	bl	8001324 <_kill>
 800680e:	1c43      	adds	r3, r0, #1
 8006810:	d102      	bne.n	8006818 <_kill_r+0x1c>
 8006812:	682b      	ldr	r3, [r5, #0]
 8006814:	b103      	cbz	r3, 8006818 <_kill_r+0x1c>
 8006816:	6023      	str	r3, [r4, #0]
 8006818:	bd38      	pop	{r3, r4, r5, pc}
 800681a:	bf00      	nop
 800681c:	20000414 	.word	0x20000414

08006820 <_getpid_r>:
 8006820:	f7fa bd78 	b.w	8001314 <_getpid>

08006824 <_init>:
 8006824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006826:	bf00      	nop
 8006828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682a:	bc08      	pop	{r3}
 800682c:	469e      	mov	lr, r3
 800682e:	4770      	bx	lr

08006830 <_fini>:
 8006830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006832:	bf00      	nop
 8006834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006836:	bc08      	pop	{r3}
 8006838:	469e      	mov	lr, r3
 800683a:	4770      	bx	lr
