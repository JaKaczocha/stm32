
project8_generalPTim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065d8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08006760  08006760  00016760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069b0  080069b0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080069b0  080069b0  000169b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069b8  080069b8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069b8  080069b8  000169b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069bc  080069bc  000169bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080069c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000005c  08006a1c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08006a1c  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f5dc  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e02  00000000  00000000  0002f6ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  000314b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b24  00000000  00000000  000322e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000266bf  00000000  00000000  00032e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010617  00000000  00000000  000594c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f201a  00000000  00000000  00069ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004358  00000000  00000000  0015baf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0015fe4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006748 	.word	0x08006748

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08006748 	.word	0x08006748

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b970 	b.w	8000e5c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	460d      	mov	r5, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	460f      	mov	r7, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4694      	mov	ip, r2
 8000ba8:	d965      	bls.n	8000c76 <__udivmoddi4+0xe2>
 8000baa:	fab2 f382 	clz	r3, r2
 8000bae:	b143      	cbz	r3, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb4:	f1c3 0220 	rsb	r2, r3, #32
 8000bb8:	409f      	lsls	r7, r3
 8000bba:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbe:	4317      	orrs	r7, r2
 8000bc0:	409c      	lsls	r4, r3
 8000bc2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bc6:	fa1f f58c 	uxth.w	r5, ip
 8000bca:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bce:	0c22      	lsrs	r2, r4, #16
 8000bd0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bd4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd8:	fb01 f005 	mul.w	r0, r1, r5
 8000bdc:	4290      	cmp	r0, r2
 8000bde:	d90a      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be0:	eb1c 0202 	adds.w	r2, ip, r2
 8000be4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be8:	f080 811c 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000bec:	4290      	cmp	r0, r2
 8000bee:	f240 8119 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	4462      	add	r2, ip
 8000bf6:	1a12      	subs	r2, r2, r0
 8000bf8:	b2a4      	uxth	r4, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c06:	fb00 f505 	mul.w	r5, r0, r5
 8000c0a:	42a5      	cmp	r5, r4
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x90>
 8000c0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c16:	f080 8107 	bcs.w	8000e28 <__udivmoddi4+0x294>
 8000c1a:	42a5      	cmp	r5, r4
 8000c1c:	f240 8104 	bls.w	8000e28 <__udivmoddi4+0x294>
 8000c20:	4464      	add	r4, ip
 8000c22:	3802      	subs	r0, #2
 8000c24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c28:	1b64      	subs	r4, r4, r5
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11e      	cbz	r6, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40dc      	lsrs	r4, r3
 8000c30:	2300      	movs	r3, #0
 8000c32:	e9c6 4300 	strd	r4, r3, [r6]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0xbc>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80ed 	beq.w	8000e1e <__udivmoddi4+0x28a>
 8000c44:	2100      	movs	r1, #0
 8000c46:	e9c6 0500 	strd	r0, r5, [r6]
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c50:	fab3 f183 	clz	r1, r3
 8000c54:	2900      	cmp	r1, #0
 8000c56:	d149      	bne.n	8000cec <__udivmoddi4+0x158>
 8000c58:	42ab      	cmp	r3, r5
 8000c5a:	d302      	bcc.n	8000c62 <__udivmoddi4+0xce>
 8000c5c:	4282      	cmp	r2, r0
 8000c5e:	f200 80f8 	bhi.w	8000e52 <__udivmoddi4+0x2be>
 8000c62:	1a84      	subs	r4, r0, r2
 8000c64:	eb65 0203 	sbc.w	r2, r5, r3
 8000c68:	2001      	movs	r0, #1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d0e2      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	e9c6 4700 	strd	r4, r7, [r6]
 8000c74:	e7df      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c76:	b902      	cbnz	r2, 8000c7a <__udivmoddi4+0xe6>
 8000c78:	deff      	udf	#255	; 0xff
 8000c7a:	fab2 f382 	clz	r3, r2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 8090 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c84:	1a8a      	subs	r2, r1, r2
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f fe8c 	uxth.w	lr, ip
 8000c8e:	2101      	movs	r1, #1
 8000c90:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c94:	fb07 2015 	mls	r0, r7, r5, r2
 8000c98:	0c22      	lsrs	r2, r4, #16
 8000c9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c9e:	fb0e f005 	mul.w	r0, lr, r5
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca6:	eb1c 0202 	adds.w	r2, ip, r2
 8000caa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f200 80cb 	bhi.w	8000e4c <__udivmoddi4+0x2b8>
 8000cb6:	4645      	mov	r5, r8
 8000cb8:	1a12      	subs	r2, r2, r0
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cc0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x14e>
 8000cd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd8:	d202      	bcs.n	8000ce0 <__udivmoddi4+0x14c>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f200 80bb 	bhi.w	8000e56 <__udivmoddi4+0x2c2>
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	eba4 040e 	sub.w	r4, r4, lr
 8000ce6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cea:	e79f      	b.n	8000c2c <__udivmoddi4+0x98>
 8000cec:	f1c1 0720 	rsb	r7, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cfa:	fa05 f401 	lsl.w	r4, r5, r1
 8000cfe:	fa20 f307 	lsr.w	r3, r0, r7
 8000d02:	40fd      	lsrs	r5, r7
 8000d04:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d08:	4323      	orrs	r3, r4
 8000d0a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	fb09 5518 	mls	r5, r9, r8, r5
 8000d16:	0c1c      	lsrs	r4, r3, #16
 8000d18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d1c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d20:	42a5      	cmp	r5, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	fa00 f001 	lsl.w	r0, r0, r1
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d34:	f080 8088 	bcs.w	8000e48 <__udivmoddi4+0x2b4>
 8000d38:	42a5      	cmp	r5, r4
 8000d3a:	f240 8085 	bls.w	8000e48 <__udivmoddi4+0x2b4>
 8000d3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d42:	4464      	add	r4, ip
 8000d44:	1b64      	subs	r4, r4, r5
 8000d46:	b29d      	uxth	r5, r3
 8000d48:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d4c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d54:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d64:	d26c      	bcs.n	8000e40 <__udivmoddi4+0x2ac>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	d96a      	bls.n	8000e40 <__udivmoddi4+0x2ac>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	4464      	add	r4, ip
 8000d6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d72:	fba3 9502 	umull	r9, r5, r3, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	42ac      	cmp	r4, r5
 8000d7c:	46c8      	mov	r8, r9
 8000d7e:	46ae      	mov	lr, r5
 8000d80:	d356      	bcc.n	8000e30 <__udivmoddi4+0x29c>
 8000d82:	d053      	beq.n	8000e2c <__udivmoddi4+0x298>
 8000d84:	b156      	cbz	r6, 8000d9c <__udivmoddi4+0x208>
 8000d86:	ebb0 0208 	subs.w	r2, r0, r8
 8000d8a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d8e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d92:	40ca      	lsrs	r2, r1
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	4317      	orrs	r7, r2
 8000d98:	e9c6 7400 	strd	r7, r4, [r6]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	f1c3 0120 	rsb	r1, r3, #32
 8000da8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dac:	fa20 f201 	lsr.w	r2, r0, r1
 8000db0:	fa25 f101 	lsr.w	r1, r5, r1
 8000db4:	409d      	lsls	r5, r3
 8000db6:	432a      	orrs	r2, r5
 8000db8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc4:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc8:	0c11      	lsrs	r1, r2, #16
 8000dca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dce:	fb00 f50e 	mul.w	r5, r0, lr
 8000dd2:	428d      	cmp	r5, r1
 8000dd4:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x258>
 8000dda:	eb1c 0101 	adds.w	r1, ip, r1
 8000dde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de2:	d22f      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000de4:	428d      	cmp	r5, r1
 8000de6:	d92d      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4461      	add	r1, ip
 8000dec:	1b49      	subs	r1, r1, r5
 8000dee:	b292      	uxth	r2, r2
 8000df0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000df4:	fb07 1115 	mls	r1, r7, r5, r1
 8000df8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dfc:	fb05 f10e 	mul.w	r1, r5, lr
 8000e00:	4291      	cmp	r1, r2
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x282>
 8000e04:	eb1c 0202 	adds.w	r2, ip, r2
 8000e08:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0c:	d216      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000e0e:	4291      	cmp	r1, r2
 8000e10:	d914      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000e12:	3d02      	subs	r5, #2
 8000e14:	4462      	add	r2, ip
 8000e16:	1a52      	subs	r2, r2, r1
 8000e18:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e1c:	e738      	b.n	8000c90 <__udivmoddi4+0xfc>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	4630      	mov	r0, r6
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000e24:	4639      	mov	r1, r7
 8000e26:	e6e6      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e6fb      	b.n	8000c24 <__udivmoddi4+0x90>
 8000e2c:	4548      	cmp	r0, r9
 8000e2e:	d2a9      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e30:	ebb9 0802 	subs.w	r8, r9, r2
 8000e34:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	e7a3      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3c:	4645      	mov	r5, r8
 8000e3e:	e7ea      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e40:	462b      	mov	r3, r5
 8000e42:	e794      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e44:	4640      	mov	r0, r8
 8000e46:	e7d1      	b.n	8000dec <__udivmoddi4+0x258>
 8000e48:	46d0      	mov	r8, sl
 8000e4a:	e77b      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4c:	3d02      	subs	r5, #2
 8000e4e:	4462      	add	r2, ip
 8000e50:	e732      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e70a      	b.n	8000c6c <__udivmoddi4+0xd8>
 8000e56:	4464      	add	r4, ip
 8000e58:	3802      	subs	r0, #2
 8000e5a:	e742      	b.n	8000ce2 <__udivmoddi4+0x14e>

08000e5c <__aeabi_idiv0>:
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <calc_pwm>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float calc_pwm(float val)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	ed87 0a01 	vstr	s0, [r7, #4]
    const float k = 0.13f;
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <calc_pwm+0x80>)
 8000e6c:	60fb      	str	r3, [r7, #12]
    const float x0 = 70.0f;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <calc_pwm+0x84>)
 8000e70:	60bb      	str	r3, [r7, #8]
    return 10000.0f / (1.0f + exp(-k * (val - x0)));
 8000e72:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e76:	eeb1 7a67 	vneg.f32	s14, s15
 8000e7a:	edd7 6a01 	vldr	s13, [r7, #4]
 8000e7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e82:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e8a:	ee17 0a90 	vmov	r0, s15
 8000e8e:	f7ff faff 	bl	8000490 <__aeabi_f2d>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	ec43 2b10 	vmov	d0, r2, r3
 8000e9a:	f004 fa0d 	bl	80052b8 <exp>
 8000e9e:	ec51 0b10 	vmov	r0, r1, d0
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <calc_pwm+0x88>)
 8000ea8:	f7ff f994 	bl	80001d4 <__adddf3>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	a109      	add	r1, pc, #36	; (adr r1, 8000ed8 <calc_pwm+0x78>)
 8000eb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000eb6:	f7ff fc6d 	bl	8000794 <__aeabi_ddiv>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff fdff 	bl	8000ac4 <__aeabi_d2f>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	ee07 3a90 	vmov	s15, r3
}
 8000ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	00000000 	.word	0x00000000
 8000edc:	40c38800 	.word	0x40c38800
 8000ee0:	3e051eb8 	.word	0x3e051eb8
 8000ee4:	428c0000 	.word	0x428c0000
 8000ee8:	3ff00000 	.word	0x3ff00000

08000eec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if (htim == &htim3) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d104      	bne.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000efc:	2120      	movs	r1, #32
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f000 ff43 	bl	8001d8c <HAL_GPIO_TogglePin>
  }
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000078 	.word	0x20000078

08000f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1a:	f000 fbc3 	bl	80016a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1e:	f000 f8d5 	bl	80010cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f22:	f000 f9e9 	bl	80012f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f26:	f000 f9b7 	bl	8001298 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f2a:	f000 f921 	bl	8001170 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000f2e:	4863      	ldr	r0, [pc, #396]	; (80010bc <main+0x1a8>)
 8000f30:	f002 fabe 	bl	80034b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f34:	2100      	movs	r1, #0
 8000f36:	4861      	ldr	r0, [pc, #388]	; (80010bc <main+0x1a8>)
 8000f38:	f002 fb8c 	bl	8003654 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f3c:	2104      	movs	r1, #4
 8000f3e:	485f      	ldr	r0, [pc, #380]	; (80010bc <main+0x1a8>)
 8000f40:	f002 fb88 	bl	8003654 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000f44:	2108      	movs	r1, #8
 8000f46:	485d      	ldr	r0, [pc, #372]	; (80010bc <main+0x1a8>)
 8000f48:	f002 fb84 	bl	8003654 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t counter = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  while (1)
  {
	  float r = 50 * (1.0f + sin(counter / 100.0f));
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f5a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80010c0 <main+0x1ac>
 8000f5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f62:	ee16 0a90 	vmov	r0, s13
 8000f66:	f7ff fa93 	bl	8000490 <__aeabi_f2d>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	ec43 2b10 	vmov	d0, r2, r3
 8000f72:	f004 f9e9 	bl	8005348 <sin>
 8000f76:	ec51 0b10 	vmov	r0, r1, d0
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	4b51      	ldr	r3, [pc, #324]	; (80010c4 <main+0x1b0>)
 8000f80:	f7ff f928 	bl	80001d4 <__adddf3>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	4b4d      	ldr	r3, [pc, #308]	; (80010c8 <main+0x1b4>)
 8000f92:	f7ff fad5 	bl	8000540 <__aeabi_dmul>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f7ff fd91 	bl	8000ac4 <__aeabi_d2f>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	60bb      	str	r3, [r7, #8]
	  float g = 50 * (1.0f + sin(1.5f * counter / 100.0f));
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	ee07 3a90 	vmov	s15, r3
 8000fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fb0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000fb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80010c0 <main+0x1ac>
 8000fbc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fc0:	ee16 0a90 	vmov	r0, s13
 8000fc4:	f7ff fa64 	bl	8000490 <__aeabi_f2d>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	ec43 2b10 	vmov	d0, r2, r3
 8000fd0:	f004 f9ba 	bl	8005348 <sin>
 8000fd4:	ec51 0b10 	vmov	r0, r1, d0
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	4b39      	ldr	r3, [pc, #228]	; (80010c4 <main+0x1b0>)
 8000fde:	f7ff f8f9 	bl	80001d4 <__adddf3>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	4b36      	ldr	r3, [pc, #216]	; (80010c8 <main+0x1b4>)
 8000ff0:	f7ff faa6 	bl	8000540 <__aeabi_dmul>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f7ff fd62 	bl	8000ac4 <__aeabi_d2f>
 8001000:	4603      	mov	r3, r0
 8001002:	607b      	str	r3, [r7, #4]
	  float b = 50 * (1.0f + sin(2.0f * counter / 100.0f));
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	ee07 3a90 	vmov	s15, r3
 800100a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800100e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001012:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80010c0 <main+0x1ac>
 8001016:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800101a:	ee16 0a90 	vmov	r0, s13
 800101e:	f7ff fa37 	bl	8000490 <__aeabi_f2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	ec43 2b10 	vmov	d0, r2, r3
 800102a:	f004 f98d 	bl	8005348 <sin>
 800102e:	ec51 0b10 	vmov	r0, r1, d0
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <main+0x1b0>)
 8001038:	f7ff f8cc 	bl	80001d4 <__adddf3>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <main+0x1b4>)
 800104a:	f7ff fa79 	bl	8000540 <__aeabi_dmul>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fd35 	bl	8000ac4 <__aeabi_d2f>
 800105a:	4603      	mov	r3, r0
 800105c:	603b      	str	r3, [r7, #0]
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, calc_pwm(b));
 800105e:	ed97 0a00 	vldr	s0, [r7]
 8001062:	f7ff fefd 	bl	8000e60 <calc_pwm>
 8001066:	eef0 7a40 	vmov.f32	s15, s0
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <main+0x1a8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001072:	ee17 2a90 	vmov	r2, s15
 8001076:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, calc_pwm(g));
 8001078:	ed97 0a01 	vldr	s0, [r7, #4]
 800107c:	f7ff fef0 	bl	8000e60 <calc_pwm>
 8001080:	eef0 7a40 	vmov.f32	s15, s0
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <main+0x1a8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800108c:	ee17 2a90 	vmov	r2, s15
 8001090:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, calc_pwm(r));
 8001092:	ed97 0a02 	vldr	s0, [r7, #8]
 8001096:	f7ff fee3 	bl	8000e60 <calc_pwm>
 800109a:	eef0 7a40 	vmov.f32	s15, s0
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <main+0x1a8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a6:	ee17 2a90 	vmov	r2, s15
 80010aa:	63da      	str	r2, [r3, #60]	; 0x3c

	  HAL_Delay(10);
 80010ac:	200a      	movs	r0, #10
 80010ae:	f000 fb75 	bl	800179c <HAL_Delay>
	  counter++;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3301      	adds	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
  {
 80010b8:	e74a      	b.n	8000f50 <main+0x3c>
 80010ba:	bf00      	nop
 80010bc:	20000078 	.word	0x20000078
 80010c0:	42c80000 	.word	0x42c80000
 80010c4:	3ff00000 	.word	0x3ff00000
 80010c8:	40490000 	.word	0x40490000

080010cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b096      	sub	sp, #88	; 0x58
 80010d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2244      	movs	r2, #68	; 0x44
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f004 f8b9 	bl	8005252 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	463b      	mov	r3, r7
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010f2:	f000 fe73 	bl	8001ddc <HAL_PWREx_ControlVoltageScaling>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010fc:	f000 f962 	bl	80013c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001100:	2302      	movs	r3, #2
 8001102:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001104:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001108:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800110a:	2310      	movs	r3, #16
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110e:	2302      	movs	r3, #2
 8001110:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001112:	2302      	movs	r3, #2
 8001114:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001116:	2301      	movs	r3, #1
 8001118:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800111a:	230a      	movs	r3, #10
 800111c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800111e:	2307      	movs	r3, #7
 8001120:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001122:	2302      	movs	r3, #2
 8001124:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001126:	2302      	movs	r3, #2
 8001128:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4618      	mov	r0, r3
 8001130:	f000 feaa 	bl	8001e88 <HAL_RCC_OscConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800113a:	f000 f943 	bl	80013c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113e:	230f      	movs	r3, #15
 8001140:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001142:	2303      	movs	r3, #3
 8001144:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001152:	463b      	mov	r3, r7
 8001154:	2104      	movs	r1, #4
 8001156:	4618      	mov	r0, r3
 8001158:	f001 fa72 	bl	8002640 <HAL_RCC_ClockConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001162:	f000 f92f 	bl	80013c4 <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	3758      	adds	r7, #88	; 0x58
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08e      	sub	sp, #56	; 0x38
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001176:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]
 800119e:	615a      	str	r2, [r3, #20]
 80011a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011a2:	4b3b      	ldr	r3, [pc, #236]	; (8001290 <MX_TIM3_Init+0x120>)
 80011a4:	4a3b      	ldr	r2, [pc, #236]	; (8001294 <MX_TIM3_Init+0x124>)
 80011a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80011a8:	4b39      	ldr	r3, [pc, #228]	; (8001290 <MX_TIM3_Init+0x120>)
 80011aa:	224f      	movs	r2, #79	; 0x4f
 80011ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b38      	ldr	r3, [pc, #224]	; (8001290 <MX_TIM3_Init+0x120>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80011b4:	4b36      	ldr	r3, [pc, #216]	; (8001290 <MX_TIM3_Init+0x120>)
 80011b6:	f242 720f 	movw	r2, #9999	; 0x270f
 80011ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b34      	ldr	r3, [pc, #208]	; (8001290 <MX_TIM3_Init+0x120>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c2:	4b33      	ldr	r3, [pc, #204]	; (8001290 <MX_TIM3_Init+0x120>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011c8:	4831      	ldr	r0, [pc, #196]	; (8001290 <MX_TIM3_Init+0x120>)
 80011ca:	f002 f919 	bl	8003400 <HAL_TIM_Base_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011d4:	f000 f8f6 	bl	80013c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e2:	4619      	mov	r1, r3
 80011e4:	482a      	ldr	r0, [pc, #168]	; (8001290 <MX_TIM3_Init+0x120>)
 80011e6:	f002 fd51 	bl	8003c8c <HAL_TIM_ConfigClockSource>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011f0:	f000 f8e8 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011f4:	4826      	ldr	r0, [pc, #152]	; (8001290 <MX_TIM3_Init+0x120>)
 80011f6:	f002 f9cb 	bl	8003590 <HAL_TIM_PWM_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001200:	f000 f8e0 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4619      	mov	r1, r3
 8001212:	481f      	ldr	r0, [pc, #124]	; (8001290 <MX_TIM3_Init+0x120>)
 8001214:	f003 fa5c 	bl	80046d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800121e:	f000 f8d1 	bl	80013c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001222:	2360      	movs	r3, #96	; 0x60
 8001224:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8001226:	2332      	movs	r3, #50	; 0x32
 8001228:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800122a:	2302      	movs	r3, #2
 800122c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001232:	463b      	mov	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	4619      	mov	r1, r3
 8001238:	4815      	ldr	r0, [pc, #84]	; (8001290 <MX_TIM3_Init+0x120>)
 800123a:	f002 fc13 	bl	8003a64 <HAL_TIM_PWM_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001244:	f000 f8be 	bl	80013c4 <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 8001248:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800124c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	2204      	movs	r2, #4
 8001252:	4619      	mov	r1, r3
 8001254:	480e      	ldr	r0, [pc, #56]	; (8001290 <MX_TIM3_Init+0x120>)
 8001256:	f002 fc05 	bl	8003a64 <HAL_TIM_PWM_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8001260:	f000 f8b0 	bl	80013c4 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8001264:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001268:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800126a:	463b      	mov	r3, r7
 800126c:	2208      	movs	r2, #8
 800126e:	4619      	mov	r1, r3
 8001270:	4807      	ldr	r0, [pc, #28]	; (8001290 <MX_TIM3_Init+0x120>)
 8001272:	f002 fbf7 	bl	8003a64 <HAL_TIM_PWM_ConfigChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 800127c:	f000 f8a2 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001280:	4803      	ldr	r0, [pc, #12]	; (8001290 <MX_TIM3_Init+0x120>)
 8001282:	f000 f8ef 	bl	8001464 <HAL_TIM_MspPostInit>

}
 8001286:	bf00      	nop
 8001288:	3738      	adds	r7, #56	; 0x38
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000078 	.word	0x20000078
 8001294:	40000400 	.word	0x40000400

08001298 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 800129e:	4a15      	ldr	r2, [pc, #84]	; (80012f4 <MX_USART2_UART_Init+0x5c>)
 80012a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012be:	220c      	movs	r2, #12
 80012c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012dc:	f003 fa9e 	bl	800481c <HAL_UART_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012e6:	f000 f86d 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200000c4 	.word	0x200000c4
 80012f4:	40004400 	.word	0x40004400

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <MX_GPIO_Init+0xc4>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a2a      	ldr	r2, [pc, #168]	; (80013bc <MX_GPIO_Init+0xc4>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <MX_GPIO_Init+0xc4>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001326:	4b25      	ldr	r3, [pc, #148]	; (80013bc <MX_GPIO_Init+0xc4>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a24      	ldr	r2, [pc, #144]	; (80013bc <MX_GPIO_Init+0xc4>)
 800132c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <MX_GPIO_Init+0xc4>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <MX_GPIO_Init+0xc4>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <MX_GPIO_Init+0xc4>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134a:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <MX_GPIO_Init+0xc4>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <MX_GPIO_Init+0xc4>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a18      	ldr	r2, [pc, #96]	; (80013bc <MX_GPIO_Init+0xc4>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <MX_GPIO_Init+0xc4>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2120      	movs	r1, #32
 8001372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001376:	f000 fcf1 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800137a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001380:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	480b      	ldr	r0, [pc, #44]	; (80013c0 <MX_GPIO_Init+0xc8>)
 8001392:	f000 fb39 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001396:	2320      	movs	r3, #32
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b0:	f000 fb2a 	bl	8001a08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	; 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40021000 	.word	0x40021000
 80013c0:	48000800 	.word	0x48000800

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013cc:	e7fe      	b.n	80013cc <Error_Handler+0x8>
	...

080013d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_MspInit+0x44>)
 80013d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013da:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <HAL_MspInit+0x44>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6613      	str	r3, [r2, #96]	; 0x60
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_MspInit+0x44>)
 80013e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_MspInit+0x44>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_MspInit+0x44>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	6593      	str	r3, [r2, #88]	; 0x58
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_MspInit+0x44>)
 80013fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000

08001418 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0d      	ldr	r2, [pc, #52]	; (800145c <HAL_TIM_Base_MspInit+0x44>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d113      	bne.n	8001452 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <HAL_TIM_Base_MspInit+0x48>)
 800142c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142e:	4a0c      	ldr	r2, [pc, #48]	; (8001460 <HAL_TIM_Base_MspInit+0x48>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6593      	str	r3, [r2, #88]	; 0x58
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_TIM_Base_MspInit+0x48>)
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 9, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2109      	movs	r1, #9
 8001446:	201d      	movs	r0, #29
 8001448:	f000 faa7 	bl	800199a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800144c:	201d      	movs	r0, #29
 800144e:	f000 fac0 	bl	80019d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40000400 	.word	0x40000400
 8001460:	40021000 	.word	0x40021000

08001464 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a1f      	ldr	r2, [pc, #124]	; (8001500 <HAL_TIM_MspPostInit+0x9c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d138      	bne.n	80014f8 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <HAL_TIM_MspPostInit+0xa0>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	4a1e      	ldr	r2, [pc, #120]	; (8001504 <HAL_TIM_MspPostInit+0xa0>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_TIM_MspPostInit+0xa0>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_TIM_MspPostInit+0xa0>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	4a18      	ldr	r2, [pc, #96]	; (8001504 <HAL_TIM_MspPostInit+0xa0>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_TIM_MspPostInit+0xa0>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014b6:	23c0      	movs	r3, #192	; 0xc0
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014c6:	2302      	movs	r3, #2
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d4:	f000 fa98 	bl	8001a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014d8:	2301      	movs	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014e8:	2302      	movs	r3, #2
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <HAL_TIM_MspPostInit+0xa4>)
 80014f4:	f000 fa88 	bl	8001a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40000400 	.word	0x40000400
 8001504:	40021000 	.word	0x40021000
 8001508:	48000400 	.word	0x48000400

0800150c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b0ac      	sub	sp, #176	; 0xb0
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2288      	movs	r2, #136	; 0x88
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f003 fe90 	bl	8005252 <memset>
  if(huart->Instance==USART2)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a21      	ldr	r2, [pc, #132]	; (80015bc <HAL_UART_MspInit+0xb0>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d13b      	bne.n	80015b4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800153c:	2302      	movs	r3, #2
 800153e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001540:	2300      	movs	r3, #0
 8001542:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fa9d 	bl	8002a88 <HAL_RCCEx_PeriphCLKConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001554:	f7ff ff36 	bl	80013c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_UART_MspInit+0xb4>)
 800155a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155c:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <HAL_UART_MspInit+0xb4>)
 800155e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001562:	6593      	str	r3, [r2, #88]	; 0x58
 8001564:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <HAL_UART_MspInit+0xb4>)
 8001566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <HAL_UART_MspInit+0xb4>)
 8001572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001574:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <HAL_UART_MspInit+0xb4>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_UART_MspInit+0xb4>)
 800157e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001588:	230c      	movs	r3, #12
 800158a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a0:	2307      	movs	r3, #7
 80015a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015aa:	4619      	mov	r1, r3
 80015ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b0:	f000 fa2a 	bl	8001a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015b4:	bf00      	nop
 80015b6:	37b0      	adds	r7, #176	; 0xb0
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40004400 	.word	0x40004400
 80015c0:	40021000 	.word	0x40021000

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c8:	e7fe      	b.n	80015c8 <NMI_Handler+0x4>

080015ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <MemManage_Handler+0x4>

080015d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001610:	f000 f8a4 	bl	800175c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <TIM3_IRQHandler+0x10>)
 800161e:	f002 f91f 	bl	8003860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000078 	.word	0x20000078

0800162c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <SystemInit+0x20>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <SystemInit+0x20>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001688 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001654:	f7ff ffea 	bl	800162c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <LoopForever+0x6>)
  ldr r1, =_edata
 800165a:	490d      	ldr	r1, [pc, #52]	; (8001690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <LoopForever+0xe>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001670:	4c0a      	ldr	r4, [pc, #40]	; (800169c <LoopForever+0x16>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167e:	f003 fdf7 	bl	8005270 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001682:	f7ff fc47 	bl	8000f14 <main>

08001686 <LoopForever>:

LoopForever:
    b LoopForever
 8001686:	e7fe      	b.n	8001686 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001688:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001694:	080069c0 	.word	0x080069c0
  ldr r2, =_sbss
 8001698:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800169c:	20000288 	.word	0x20000288

080016a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC1_2_IRQHandler>
	...

080016a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <HAL_Init+0x3c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <HAL_Init+0x3c>)
 80016b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ba:	2003      	movs	r0, #3
 80016bc:	f000 f962 	bl	8001984 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016c0:	2000      	movs	r0, #0
 80016c2:	f000 f80f 	bl	80016e4 <HAL_InitTick>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	71fb      	strb	r3, [r7, #7]
 80016d0:	e001      	b.n	80016d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016d2:	f7ff fe7d 	bl	80013d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016d6:	79fb      	ldrb	r3, [r7, #7]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40022000 	.word	0x40022000

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_InitTick+0x6c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d023      	beq.n	8001740 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_InitTick+0x70>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <HAL_InitTick+0x6c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	fbb3 f3f1 	udiv	r3, r3, r1
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f96d 	bl	80019ee <HAL_SYSTICK_Config>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10f      	bne.n	800173a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d809      	bhi.n	8001734 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f000 f937 	bl	800199a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_InitTick+0x74>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e007      	b.n	8001744 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
 8001738:	e004      	b.n	8001744 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	73fb      	strb	r3, [r7, #15]
 800173e:	e001      	b.n	8001744 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001744:	7bfb      	ldrb	r3, [r7, #15]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000008 	.word	0x20000008
 8001754:	20000000 	.word	0x20000000
 8001758:	20000004 	.word	0x20000004

0800175c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_IncTick+0x20>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_IncTick+0x24>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4413      	add	r3, r2
 800176c:	4a04      	ldr	r2, [pc, #16]	; (8001780 <HAL_IncTick+0x24>)
 800176e:	6013      	str	r3, [r2, #0]
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008
 8001780:	2000014c 	.word	0x2000014c

08001784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return uwTick;
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <HAL_GetTick+0x14>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	2000014c 	.word	0x2000014c

0800179c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a4:	f7ff ffee 	bl	8001784 <HAL_GetTick>
 80017a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b4:	d005      	beq.n	80017c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017b6:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <HAL_Delay+0x44>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017c2:	bf00      	nop
 80017c4:	f7ff ffde 	bl	8001784 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d8f7      	bhi.n	80017c4 <HAL_Delay+0x28>
  {
  }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000008 	.word	0x20000008

080017e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001800:	4013      	ands	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800180c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001816:	4a04      	ldr	r2, [pc, #16]	; (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	60d3      	str	r3, [r2, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <__NVIC_GetPriorityGrouping+0x18>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	f003 0307 	and.w	r3, r3, #7
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	2b00      	cmp	r3, #0
 8001858:	db0b      	blt.n	8001872 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	f003 021f 	and.w	r2, r3, #31
 8001860:	4907      	ldr	r1, [pc, #28]	; (8001880 <__NVIC_EnableIRQ+0x38>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	095b      	lsrs	r3, r3, #5
 8001868:	2001      	movs	r0, #1
 800186a:	fa00 f202 	lsl.w	r2, r0, r2
 800186e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000e100 	.word	0xe000e100

08001884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db0a      	blt.n	80018ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	490c      	ldr	r1, [pc, #48]	; (80018d0 <__NVIC_SetPriority+0x4c>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ac:	e00a      	b.n	80018c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4908      	ldr	r1, [pc, #32]	; (80018d4 <__NVIC_SetPriority+0x50>)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3b04      	subs	r3, #4
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	761a      	strb	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f1c3 0307 	rsb	r3, r3, #7
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	bf28      	it	cs
 80018f6:	2304      	movcs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d902      	bls.n	8001908 <NVIC_EncodePriority+0x30>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3b03      	subs	r3, #3
 8001906:	e000      	b.n	800190a <NVIC_EncodePriority+0x32>
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43d9      	mvns	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	4313      	orrs	r3, r2
         );
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001950:	d301      	bcc.n	8001956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001952:	2301      	movs	r3, #1
 8001954:	e00f      	b.n	8001976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <SysTick_Config+0x40>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195e:	210f      	movs	r1, #15
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f7ff ff8e 	bl	8001884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <SysTick_Config+0x40>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <SysTick_Config+0x40>)
 8001970:	2207      	movs	r2, #7
 8001972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	e000e010 	.word	0xe000e010

08001984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff29 	bl	80017e4 <__NVIC_SetPriorityGrouping>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019ac:	f7ff ff3e 	bl	800182c <__NVIC_GetPriorityGrouping>
 80019b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	6978      	ldr	r0, [r7, #20]
 80019b8:	f7ff ff8e 	bl	80018d8 <NVIC_EncodePriority>
 80019bc:	4602      	mov	r2, r0
 80019be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff5d 	bl	8001884 <__NVIC_SetPriority>
}
 80019ca:	bf00      	nop
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff31 	bl	8001848 <__NVIC_EnableIRQ>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff ffa2 	bl	8001940 <SysTick_Config>
 80019fc:	4603      	mov	r3, r0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a16:	e17f      	b.n	8001d18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 8171 	beq.w	8001d12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d005      	beq.n	8001a48 <HAL_GPIO_Init+0x40>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d130      	bne.n	8001aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a7e:	2201      	movs	r2, #1
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	091b      	lsrs	r3, r3, #4
 8001a94:	f003 0201 	and.w	r2, r3, #1
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d118      	bne.n	8001ae8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001abc:	2201      	movs	r2, #1
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	08db      	lsrs	r3, r3, #3
 8001ad2:	f003 0201 	and.w	r2, r3, #1
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d017      	beq.n	8001b24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d123      	bne.n	8001b78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	08da      	lsrs	r2, r3, #3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3208      	adds	r2, #8
 8001b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	220f      	movs	r2, #15
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	08da      	lsrs	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3208      	adds	r2, #8
 8001b72:	6939      	ldr	r1, [r7, #16]
 8001b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	2203      	movs	r2, #3
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0203 	and.w	r2, r3, #3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80ac 	beq.w	8001d12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	4b5f      	ldr	r3, [pc, #380]	; (8001d38 <HAL_GPIO_Init+0x330>)
 8001bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bbe:	4a5e      	ldr	r2, [pc, #376]	; (8001d38 <HAL_GPIO_Init+0x330>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6613      	str	r3, [r2, #96]	; 0x60
 8001bc6:	4b5c      	ldr	r3, [pc, #368]	; (8001d38 <HAL_GPIO_Init+0x330>)
 8001bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bd2:	4a5a      	ldr	r2, [pc, #360]	; (8001d3c <HAL_GPIO_Init+0x334>)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bde:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	220f      	movs	r2, #15
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bfc:	d025      	beq.n	8001c4a <HAL_GPIO_Init+0x242>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4f      	ldr	r2, [pc, #316]	; (8001d40 <HAL_GPIO_Init+0x338>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01f      	beq.n	8001c46 <HAL_GPIO_Init+0x23e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4e      	ldr	r2, [pc, #312]	; (8001d44 <HAL_GPIO_Init+0x33c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d019      	beq.n	8001c42 <HAL_GPIO_Init+0x23a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4d      	ldr	r2, [pc, #308]	; (8001d48 <HAL_GPIO_Init+0x340>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d013      	beq.n	8001c3e <HAL_GPIO_Init+0x236>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4c      	ldr	r2, [pc, #304]	; (8001d4c <HAL_GPIO_Init+0x344>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00d      	beq.n	8001c3a <HAL_GPIO_Init+0x232>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4b      	ldr	r2, [pc, #300]	; (8001d50 <HAL_GPIO_Init+0x348>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d007      	beq.n	8001c36 <HAL_GPIO_Init+0x22e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4a      	ldr	r2, [pc, #296]	; (8001d54 <HAL_GPIO_Init+0x34c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_GPIO_Init+0x22a>
 8001c2e:	2306      	movs	r3, #6
 8001c30:	e00c      	b.n	8001c4c <HAL_GPIO_Init+0x244>
 8001c32:	2307      	movs	r3, #7
 8001c34:	e00a      	b.n	8001c4c <HAL_GPIO_Init+0x244>
 8001c36:	2305      	movs	r3, #5
 8001c38:	e008      	b.n	8001c4c <HAL_GPIO_Init+0x244>
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x244>
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e004      	b.n	8001c4c <HAL_GPIO_Init+0x244>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e002      	b.n	8001c4c <HAL_GPIO_Init+0x244>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_GPIO_Init+0x244>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	f002 0203 	and.w	r2, r2, #3
 8001c52:	0092      	lsls	r2, r2, #2
 8001c54:	4093      	lsls	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c5c:	4937      	ldr	r1, [pc, #220]	; (8001d3c <HAL_GPIO_Init+0x334>)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	089b      	lsrs	r3, r3, #2
 8001c62:	3302      	adds	r3, #2
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c6a:	4b3b      	ldr	r3, [pc, #236]	; (8001d58 <HAL_GPIO_Init+0x350>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c8e:	4a32      	ldr	r2, [pc, #200]	; (8001d58 <HAL_GPIO_Init+0x350>)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c94:	4b30      	ldr	r3, [pc, #192]	; (8001d58 <HAL_GPIO_Init+0x350>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cb8:	4a27      	ldr	r2, [pc, #156]	; (8001d58 <HAL_GPIO_Init+0x350>)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cbe:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <HAL_GPIO_Init+0x350>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ce2:	4a1d      	ldr	r2, [pc, #116]	; (8001d58 <HAL_GPIO_Init+0x350>)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <HAL_GPIO_Init+0x350>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d0c:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <HAL_GPIO_Init+0x350>)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3301      	adds	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f47f ae78 	bne.w	8001a18 <HAL_GPIO_Init+0x10>
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	371c      	adds	r7, #28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40010000 	.word	0x40010000
 8001d40:	48000400 	.word	0x48000400
 8001d44:	48000800 	.word	0x48000800
 8001d48:	48000c00 	.word	0x48000c00
 8001d4c:	48001000 	.word	0x48001000
 8001d50:	48001400 	.word	0x48001400
 8001d54:	48001800 	.word	0x48001800
 8001d58:	40010400 	.word	0x40010400

08001d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	807b      	strh	r3, [r7, #2]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d6c:	787b      	ldrb	r3, [r7, #1]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d72:	887a      	ldrh	r2, [r7, #2]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d78:	e002      	b.n	8001d80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4013      	ands	r3, r2
 8001da4:	041a      	lsls	r2, r3, #16
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43d9      	mvns	r1, r3
 8001daa:	887b      	ldrh	r3, [r7, #2]
 8001dac:	400b      	ands	r3, r1
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	619a      	str	r2, [r3, #24]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40007000 	.word	0x40007000

08001ddc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dea:	d130      	bne.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dec:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001df8:	d038      	beq.n	8001e6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e02:	4a1e      	ldr	r2, [pc, #120]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2232      	movs	r2, #50	; 0x32
 8001e10:	fb02 f303 	mul.w	r3, r2, r3
 8001e14:	4a1b      	ldr	r2, [pc, #108]	; (8001e84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	0c9b      	lsrs	r3, r3, #18
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e20:	e002      	b.n	8001e28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e34:	d102      	bne.n	8001e3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f2      	bne.n	8001e22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e48:	d110      	bne.n	8001e6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e00f      	b.n	8001e6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e5a:	d007      	beq.n	8001e6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e64:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	20000000 	.word	0x20000000
 8001e84:	431bde83 	.word	0x431bde83

08001e88 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e3ca      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e9a:	4b97      	ldr	r3, [pc, #604]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ea4:	4b94      	ldr	r3, [pc, #592]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 80e4 	beq.w	8002084 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d007      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x4a>
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	2b0c      	cmp	r3, #12
 8001ec6:	f040 808b 	bne.w	8001fe0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	f040 8087 	bne.w	8001fe0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ed2:	4b89      	ldr	r3, [pc, #548]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d005      	beq.n	8001eea <HAL_RCC_OscConfig+0x62>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e3a2      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1a      	ldr	r2, [r3, #32]
 8001eee:	4b82      	ldr	r3, [pc, #520]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d004      	beq.n	8001f04 <HAL_RCC_OscConfig+0x7c>
 8001efa:	4b7f      	ldr	r3, [pc, #508]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f02:	e005      	b.n	8001f10 <HAL_RCC_OscConfig+0x88>
 8001f04:	4b7c      	ldr	r3, [pc, #496]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0a:	091b      	lsrs	r3, r3, #4
 8001f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d223      	bcs.n	8001f5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 fd55 	bl	80029c8 <RCC_SetFlashLatencyFromMSIRange>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e383      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f28:	4b73      	ldr	r3, [pc, #460]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a72      	ldr	r2, [pc, #456]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f2e:	f043 0308 	orr.w	r3, r3, #8
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b70      	ldr	r3, [pc, #448]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	496d      	ldr	r1, [pc, #436]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f46:	4b6c      	ldr	r3, [pc, #432]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	4968      	ldr	r1, [pc, #416]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]
 8001f5a:	e025      	b.n	8001fa8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f5c:	4b66      	ldr	r3, [pc, #408]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a65      	ldr	r2, [pc, #404]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f62:	f043 0308 	orr.w	r3, r3, #8
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	4b63      	ldr	r3, [pc, #396]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4960      	ldr	r1, [pc, #384]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f7a:	4b5f      	ldr	r3, [pc, #380]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	021b      	lsls	r3, r3, #8
 8001f88:	495b      	ldr	r1, [pc, #364]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d109      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fd15 	bl	80029c8 <RCC_SetFlashLatencyFromMSIRange>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e343      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fa8:	f000 fc4a 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b52      	ldr	r3, [pc, #328]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	091b      	lsrs	r3, r3, #4
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	4950      	ldr	r1, [pc, #320]	; (80020fc <HAL_RCC_OscConfig+0x274>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc4:	4a4e      	ldr	r2, [pc, #312]	; (8002100 <HAL_RCC_OscConfig+0x278>)
 8001fc6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fc8:	4b4e      	ldr	r3, [pc, #312]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fb89 	bl	80016e4 <HAL_InitTick>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d052      	beq.n	8002082 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	e327      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d032      	beq.n	800204e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fe8:	4b43      	ldr	r3, [pc, #268]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a42      	ldr	r2, [pc, #264]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff fbc6 	bl	8001784 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ffc:	f7ff fbc2 	bl	8001784 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e310      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800200e:	4b3a      	ldr	r3, [pc, #232]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800201a:	4b37      	ldr	r3, [pc, #220]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a36      	ldr	r2, [pc, #216]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002020:	f043 0308 	orr.w	r3, r3, #8
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b34      	ldr	r3, [pc, #208]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	4931      	ldr	r1, [pc, #196]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002034:	4313      	orrs	r3, r2
 8002036:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002038:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	492c      	ldr	r1, [pc, #176]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
 800204c:	e01a      	b.n	8002084 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800204e:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a29      	ldr	r2, [pc, #164]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800205a:	f7ff fb93 	bl	8001784 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002062:	f7ff fb8f 	bl	8001784 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e2dd      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002074:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f0      	bne.n	8002062 <HAL_RCC_OscConfig+0x1da>
 8002080:	e000      	b.n	8002084 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002082:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d074      	beq.n	800217a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2b08      	cmp	r3, #8
 8002094:	d005      	beq.n	80020a2 <HAL_RCC_OscConfig+0x21a>
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	2b0c      	cmp	r3, #12
 800209a:	d10e      	bne.n	80020ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d10b      	bne.n	80020ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d064      	beq.n	8002178 <HAL_RCC_OscConfig+0x2f0>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d160      	bne.n	8002178 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e2ba      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x24a>
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	e026      	b.n	8002120 <HAL_RCC_OscConfig+0x298>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020da:	d115      	bne.n	8002108 <HAL_RCC_OscConfig+0x280>
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e6:	6013      	str	r3, [r2, #0]
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a02      	ldr	r2, [pc, #8]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	e014      	b.n	8002120 <HAL_RCC_OscConfig+0x298>
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
 80020fc:	08006760 	.word	0x08006760
 8002100:	20000000 	.word	0x20000000
 8002104:	20000004 	.word	0x20000004
 8002108:	4ba0      	ldr	r3, [pc, #640]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a9f      	ldr	r2, [pc, #636]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800210e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b9d      	ldr	r3, [pc, #628]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a9c      	ldr	r2, [pc, #624]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800211a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d013      	beq.n	8002150 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7ff fb2c 	bl	8001784 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002130:	f7ff fb28 	bl	8001784 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	; 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e276      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002142:	4b92      	ldr	r3, [pc, #584]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x2a8>
 800214e:	e014      	b.n	800217a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7ff fb18 	bl	8001784 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002158:	f7ff fb14 	bl	8001784 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	; 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e262      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800216a:	4b88      	ldr	r3, [pc, #544]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x2d0>
 8002176:	e000      	b.n	800217a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d060      	beq.n	8002248 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b04      	cmp	r3, #4
 800218a:	d005      	beq.n	8002198 <HAL_RCC_OscConfig+0x310>
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b0c      	cmp	r3, #12
 8002190:	d119      	bne.n	80021c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d116      	bne.n	80021c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002198:	4b7c      	ldr	r3, [pc, #496]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_OscConfig+0x328>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e23f      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b76      	ldr	r3, [pc, #472]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	061b      	lsls	r3, r3, #24
 80021be:	4973      	ldr	r1, [pc, #460]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021c4:	e040      	b.n	8002248 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d023      	beq.n	8002216 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ce:	4b6f      	ldr	r3, [pc, #444]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a6e      	ldr	r2, [pc, #440]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80021d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021da:	f7ff fad3 	bl	8001784 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e2:	f7ff facf 	bl	8001784 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e21d      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f4:	4b65      	ldr	r3, [pc, #404]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002200:	4b62      	ldr	r3, [pc, #392]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	495f      	ldr	r1, [pc, #380]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
 8002214:	e018      	b.n	8002248 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002216:	4b5d      	ldr	r3, [pc, #372]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a5c      	ldr	r2, [pc, #368]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800221c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7ff faaf 	bl	8001784 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222a:	f7ff faab 	bl	8001784 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e1f9      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800223c:	4b53      	ldr	r3, [pc, #332]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f0      	bne.n	800222a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d03c      	beq.n	80022ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d01c      	beq.n	8002296 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800225c:	4b4b      	ldr	r3, [pc, #300]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800225e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002262:	4a4a      	ldr	r2, [pc, #296]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226c:	f7ff fa8a 	bl	8001784 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002274:	f7ff fa86 	bl	8001784 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e1d4      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002286:	4b41      	ldr	r3, [pc, #260]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ef      	beq.n	8002274 <HAL_RCC_OscConfig+0x3ec>
 8002294:	e01b      	b.n	80022ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002296:	4b3d      	ldr	r3, [pc, #244]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800229c:	4a3b      	ldr	r2, [pc, #236]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800229e:	f023 0301 	bic.w	r3, r3, #1
 80022a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a6:	f7ff fa6d 	bl	8001784 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ae:	f7ff fa69 	bl	8001784 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e1b7      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022c0:	4b32      	ldr	r3, [pc, #200]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80022c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1ef      	bne.n	80022ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80a6 	beq.w	8002428 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022dc:	2300      	movs	r3, #0
 80022de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022e0:	4b2a      	ldr	r3, [pc, #168]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80022e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10d      	bne.n	8002308 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ec:	4b27      	ldr	r3, [pc, #156]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80022ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f0:	4a26      	ldr	r2, [pc, #152]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80022f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f6:	6593      	str	r3, [r2, #88]	; 0x58
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002304:	2301      	movs	r3, #1
 8002306:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002308:	4b21      	ldr	r3, [pc, #132]	; (8002390 <HAL_RCC_OscConfig+0x508>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d118      	bne.n	8002346 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002314:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <HAL_RCC_OscConfig+0x508>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a1d      	ldr	r2, [pc, #116]	; (8002390 <HAL_RCC_OscConfig+0x508>)
 800231a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002320:	f7ff fa30 	bl	8001784 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002328:	f7ff fa2c 	bl	8001784 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e17a      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_RCC_OscConfig+0x508>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d108      	bne.n	8002360 <HAL_RCC_OscConfig+0x4d8>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002354:	4a0d      	ldr	r2, [pc, #52]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800235e:	e029      	b.n	80023b4 <HAL_RCC_OscConfig+0x52c>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b05      	cmp	r3, #5
 8002366:	d115      	bne.n	8002394 <HAL_RCC_OscConfig+0x50c>
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	4a07      	ldr	r2, [pc, #28]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	4a03      	ldr	r2, [pc, #12]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002388:	e014      	b.n	80023b4 <HAL_RCC_OscConfig+0x52c>
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000
 8002390:	40007000 	.word	0x40007000
 8002394:	4b9c      	ldr	r3, [pc, #624]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239a:	4a9b      	ldr	r2, [pc, #620]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023a4:	4b98      	ldr	r3, [pc, #608]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023aa:	4a97      	ldr	r2, [pc, #604]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80023ac:	f023 0304 	bic.w	r3, r3, #4
 80023b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d016      	beq.n	80023ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023bc:	f7ff f9e2 	bl	8001784 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c2:	e00a      	b.n	80023da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c4:	f7ff f9de 	bl	8001784 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e12a      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023da:	4b8b      	ldr	r3, [pc, #556]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0ed      	beq.n	80023c4 <HAL_RCC_OscConfig+0x53c>
 80023e8:	e015      	b.n	8002416 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ea:	f7ff f9cb 	bl	8001784 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023f0:	e00a      	b.n	8002408 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7ff f9c7 	bl	8001784 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e113      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002408:	4b7f      	ldr	r3, [pc, #508]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1ed      	bne.n	80023f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002416:	7ffb      	ldrb	r3, [r7, #31]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d105      	bne.n	8002428 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241c:	4b7a      	ldr	r3, [pc, #488]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002420:	4a79      	ldr	r2, [pc, #484]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 8002422:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002426:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80fe 	beq.w	800262e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	2b02      	cmp	r3, #2
 8002438:	f040 80d0 	bne.w	80025dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800243c:	4b72      	ldr	r3, [pc, #456]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 0203 	and.w	r2, r3, #3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	429a      	cmp	r2, r3
 800244e:	d130      	bne.n	80024b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	3b01      	subs	r3, #1
 800245c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	429a      	cmp	r2, r3
 8002460:	d127      	bne.n	80024b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800246e:	429a      	cmp	r2, r3
 8002470:	d11f      	bne.n	80024b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800247c:	2a07      	cmp	r2, #7
 800247e:	bf14      	ite	ne
 8002480:	2201      	movne	r2, #1
 8002482:	2200      	moveq	r2, #0
 8002484:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002486:	4293      	cmp	r3, r2
 8002488:	d113      	bne.n	80024b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	3b01      	subs	r3, #1
 8002498:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d109      	bne.n	80024b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	085b      	lsrs	r3, r3, #1
 80024aa:	3b01      	subs	r3, #1
 80024ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d06e      	beq.n	8002590 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	2b0c      	cmp	r3, #12
 80024b6:	d069      	beq.n	800258c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024b8:	4b53      	ldr	r3, [pc, #332]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d105      	bne.n	80024d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024c4:	4b50      	ldr	r3, [pc, #320]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0ad      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024d4:	4b4c      	ldr	r3, [pc, #304]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a4b      	ldr	r2, [pc, #300]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80024da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024e0:	f7ff f950 	bl	8001784 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e8:	f7ff f94c 	bl	8001784 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e09a      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024fa:	4b43      	ldr	r3, [pc, #268]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002506:	4b40      	ldr	r3, [pc, #256]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	4b40      	ldr	r3, [pc, #256]	; (800260c <HAL_RCC_OscConfig+0x784>)
 800250c:	4013      	ands	r3, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002516:	3a01      	subs	r2, #1
 8002518:	0112      	lsls	r2, r2, #4
 800251a:	4311      	orrs	r1, r2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002520:	0212      	lsls	r2, r2, #8
 8002522:	4311      	orrs	r1, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002528:	0852      	lsrs	r2, r2, #1
 800252a:	3a01      	subs	r2, #1
 800252c:	0552      	lsls	r2, r2, #21
 800252e:	4311      	orrs	r1, r2
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002534:	0852      	lsrs	r2, r2, #1
 8002536:	3a01      	subs	r2, #1
 8002538:	0652      	lsls	r2, r2, #25
 800253a:	4311      	orrs	r1, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002540:	0912      	lsrs	r2, r2, #4
 8002542:	0452      	lsls	r2, r2, #17
 8002544:	430a      	orrs	r2, r1
 8002546:	4930      	ldr	r1, [pc, #192]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 8002548:	4313      	orrs	r3, r2
 800254a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800254c:	4b2e      	ldr	r3, [pc, #184]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a2d      	ldr	r2, [pc, #180]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 8002552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002556:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002558:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4a2a      	ldr	r2, [pc, #168]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 800255e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002562:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002564:	f7ff f90e 	bl	8001784 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256c:	f7ff f90a 	bl	8001784 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e058      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257e:	4b22      	ldr	r3, [pc, #136]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800258a:	e050      	b.n	800262e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e04f      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002590:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d148      	bne.n	800262e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800259c:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a19      	ldr	r2, [pc, #100]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80025a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025a8:	4b17      	ldr	r3, [pc, #92]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a16      	ldr	r2, [pc, #88]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80025ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025b4:	f7ff f8e6 	bl	8001784 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025bc:	f7ff f8e2 	bl	8001784 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e030      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x734>
 80025da:	e028      	b.n	800262e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2b0c      	cmp	r3, #12
 80025e0:	d023      	beq.n	800262a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a08      	ldr	r2, [pc, #32]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80025e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ee:	f7ff f8c9 	bl	8001784 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f4:	e00c      	b.n	8002610 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f6:	f7ff f8c5 	bl	8001784 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d905      	bls.n	8002610 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e013      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
 8002608:	40021000 	.word	0x40021000
 800260c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_RCC_OscConfig+0x7b0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1ec      	bne.n	80025f6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_RCC_OscConfig+0x7b0>)
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	4905      	ldr	r1, [pc, #20]	; (8002638 <HAL_RCC_OscConfig+0x7b0>)
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_RCC_OscConfig+0x7b4>)
 8002624:	4013      	ands	r3, r2
 8002626:	60cb      	str	r3, [r1, #12]
 8002628:	e001      	b.n	800262e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3720      	adds	r7, #32
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40021000 	.word	0x40021000
 800263c:	feeefffc 	.word	0xfeeefffc

08002640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0e7      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002654:	4b75      	ldr	r3, [pc, #468]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d910      	bls.n	8002684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b72      	ldr	r3, [pc, #456]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 0207 	bic.w	r2, r3, #7
 800266a:	4970      	ldr	r1, [pc, #448]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b6e      	ldr	r3, [pc, #440]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0cf      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d010      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	4b66      	ldr	r3, [pc, #408]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800269c:	429a      	cmp	r2, r3
 800269e:	d908      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a0:	4b63      	ldr	r3, [pc, #396]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	4960      	ldr	r1, [pc, #384]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d04c      	beq.n	8002758 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c6:	4b5a      	ldr	r3, [pc, #360]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d121      	bne.n	8002716 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0a6      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026de:	4b54      	ldr	r3, [pc, #336]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d115      	bne.n	8002716 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e09a      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d107      	bne.n	8002706 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026f6:	4b4e      	ldr	r3, [pc, #312]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e08e      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002706:	4b4a      	ldr	r3, [pc, #296]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e086      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002716:	4b46      	ldr	r3, [pc, #280]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f023 0203 	bic.w	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4943      	ldr	r1, [pc, #268]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002724:	4313      	orrs	r3, r2
 8002726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002728:	f7ff f82c 	bl	8001784 <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	e00a      	b.n	8002746 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002730:	f7ff f828 	bl	8001784 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e06e      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	4b3a      	ldr	r3, [pc, #232]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 020c 	and.w	r2, r3, #12
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	429a      	cmp	r2, r3
 8002756:	d1eb      	bne.n	8002730 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d010      	beq.n	8002786 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	4b31      	ldr	r3, [pc, #196]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002770:	429a      	cmp	r2, r3
 8002772:	d208      	bcs.n	8002786 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002774:	4b2e      	ldr	r3, [pc, #184]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	492b      	ldr	r1, [pc, #172]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002786:	4b29      	ldr	r3, [pc, #164]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d210      	bcs.n	80027b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002794:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 0207 	bic.w	r2, r3, #7
 800279c:	4923      	ldr	r1, [pc, #140]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a4:	4b21      	ldr	r3, [pc, #132]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d001      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e036      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c2:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	4918      	ldr	r1, [pc, #96]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d009      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4910      	ldr	r1, [pc, #64]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027f4:	f000 f824 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80027f8:	4602      	mov	r2, r0
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	490b      	ldr	r1, [pc, #44]	; (8002834 <HAL_RCC_ClockConfig+0x1f4>)
 8002806:	5ccb      	ldrb	r3, [r1, r3]
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
 8002810:	4a09      	ldr	r2, [pc, #36]	; (8002838 <HAL_RCC_ClockConfig+0x1f8>)
 8002812:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_RCC_ClockConfig+0x1fc>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7fe ff63 	bl	80016e4 <HAL_InitTick>
 800281e:	4603      	mov	r3, r0
 8002820:	72fb      	strb	r3, [r7, #11]

  return status;
 8002822:	7afb      	ldrb	r3, [r7, #11]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40022000 	.word	0x40022000
 8002830:	40021000 	.word	0x40021000
 8002834:	08006760 	.word	0x08006760
 8002838:	20000000 	.word	0x20000000
 800283c:	20000004 	.word	0x20000004

08002840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002840:	b480      	push	{r7}
 8002842:	b089      	sub	sp, #36	; 0x24
 8002844:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800284e:	4b3e      	ldr	r3, [pc, #248]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002858:	4b3b      	ldr	r3, [pc, #236]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x34>
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b0c      	cmp	r3, #12
 800286c:	d121      	bne.n	80028b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d11e      	bne.n	80028b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002874:	4b34      	ldr	r3, [pc, #208]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d107      	bne.n	8002890 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002880:	4b31      	ldr	r3, [pc, #196]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 8002882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	e005      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002890:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800289c:	4a2b      	ldr	r2, [pc, #172]	; (800294c <HAL_RCC_GetSysClockFreq+0x10c>)
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10d      	bne.n	80028c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028b0:	e00a      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d102      	bne.n	80028be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028b8:	4b25      	ldr	r3, [pc, #148]	; (8002950 <HAL_RCC_GetSysClockFreq+0x110>)
 80028ba:	61bb      	str	r3, [r7, #24]
 80028bc:	e004      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d101      	bne.n	80028c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028c4:	4b23      	ldr	r3, [pc, #140]	; (8002954 <HAL_RCC_GetSysClockFreq+0x114>)
 80028c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	2b0c      	cmp	r3, #12
 80028cc:	d134      	bne.n	8002938 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ce:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d003      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0xac>
 80028e4:	e005      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028e6:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <HAL_RCC_GetSysClockFreq+0x110>)
 80028e8:	617b      	str	r3, [r7, #20]
      break;
 80028ea:	e005      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_RCC_GetSysClockFreq+0x114>)
 80028ee:	617b      	str	r3, [r7, #20]
      break;
 80028f0:	e002      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	617b      	str	r3, [r7, #20]
      break;
 80028f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028f8:	4b13      	ldr	r3, [pc, #76]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	3301      	adds	r3, #1
 8002904:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	fb03 f202 	mul.w	r2, r3, r2
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	fbb2 f3f3 	udiv	r3, r2, r3
 800291c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800291e:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	0e5b      	lsrs	r3, r3, #25
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	3301      	adds	r3, #1
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002938:	69bb      	ldr	r3, [r7, #24]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3724      	adds	r7, #36	; 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
 800294c:	08006778 	.word	0x08006778
 8002950:	00f42400 	.word	0x00f42400
 8002954:	007a1200 	.word	0x007a1200

08002958 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <HAL_RCC_GetHCLKFreq+0x14>)
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000000 	.word	0x20000000

08002970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002974:	f7ff fff0 	bl	8002958 <HAL_RCC_GetHCLKFreq>
 8002978:	4602      	mov	r2, r0
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_RCC_GetPCLK1Freq+0x24>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	4904      	ldr	r1, [pc, #16]	; (8002998 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002986:	5ccb      	ldrb	r3, [r1, r3]
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002990:	4618      	mov	r0, r3
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000
 8002998:	08006770 	.word	0x08006770

0800299c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029a0:	f7ff ffda 	bl	8002958 <HAL_RCC_GetHCLKFreq>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	0adb      	lsrs	r3, r3, #11
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	4904      	ldr	r1, [pc, #16]	; (80029c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029b2:	5ccb      	ldrb	r3, [r1, r3]
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	08006770 	.word	0x08006770

080029c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029d0:	2300      	movs	r3, #0
 80029d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029d4:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029e0:	f7ff f9ee 	bl	8001dc0 <HAL_PWREx_GetVoltageRange>
 80029e4:	6178      	str	r0, [r7, #20]
 80029e6:	e014      	b.n	8002a12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029e8:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ec:	4a24      	ldr	r2, [pc, #144]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f2:	6593      	str	r3, [r2, #88]	; 0x58
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a00:	f7ff f9de 	bl	8001dc0 <HAL_PWREx_GetVoltageRange>
 8002a04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a06:	4b1e      	ldr	r3, [pc, #120]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0a:	4a1d      	ldr	r2, [pc, #116]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a18:	d10b      	bne.n	8002a32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b80      	cmp	r3, #128	; 0x80
 8002a1e:	d919      	bls.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2ba0      	cmp	r3, #160	; 0xa0
 8002a24:	d902      	bls.n	8002a2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a26:	2302      	movs	r3, #2
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	e013      	b.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	e010      	b.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b80      	cmp	r3, #128	; 0x80
 8002a36:	d902      	bls.n	8002a3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a38:	2303      	movs	r3, #3
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	e00a      	b.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b80      	cmp	r3, #128	; 0x80
 8002a42:	d102      	bne.n	8002a4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a44:	2302      	movs	r3, #2
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	e004      	b.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b70      	cmp	r3, #112	; 0x70
 8002a4e:	d101      	bne.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a50:	2301      	movs	r3, #1
 8002a52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 0207 	bic.w	r2, r3, #7
 8002a5c:	4909      	ldr	r1, [pc, #36]	; (8002a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a64:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d001      	beq.n	8002a76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40022000 	.word	0x40022000

08002a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a90:	2300      	movs	r3, #0
 8002a92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a94:	2300      	movs	r3, #0
 8002a96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d041      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002aac:	d02a      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002aae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ab2:	d824      	bhi.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ab4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ab8:	d008      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002aba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002abe:	d81e      	bhi.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ac4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ac8:	d010      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002aca:	e018      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002acc:	4b86      	ldr	r3, [pc, #536]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4a85      	ldr	r2, [pc, #532]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ad8:	e015      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3304      	adds	r3, #4
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fabb 	bl	800305c <RCCEx_PLLSAI1_Config>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002aea:	e00c      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3320      	adds	r3, #32
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fba6 	bl	8003244 <RCCEx_PLLSAI2_Config>
 8002af8:	4603      	mov	r3, r0
 8002afa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002afc:	e003      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	74fb      	strb	r3, [r7, #19]
      break;
 8002b02:	e000      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b06:	7cfb      	ldrb	r3, [r7, #19]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10b      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b0c:	4b76      	ldr	r3, [pc, #472]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b1a:	4973      	ldr	r1, [pc, #460]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b22:	e001      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d041      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b3c:	d02a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b42:	d824      	bhi.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b48:	d008      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b4e:	d81e      	bhi.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b58:	d010      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b5a:	e018      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b5c:	4b62      	ldr	r3, [pc, #392]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4a61      	ldr	r2, [pc, #388]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b66:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b68:	e015      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fa73 	bl	800305c <RCCEx_PLLSAI1_Config>
 8002b76:	4603      	mov	r3, r0
 8002b78:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b7a:	e00c      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3320      	adds	r3, #32
 8002b80:	2100      	movs	r1, #0
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fb5e 	bl	8003244 <RCCEx_PLLSAI2_Config>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b8c:	e003      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	74fb      	strb	r3, [r7, #19]
      break;
 8002b92:	e000      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b96:	7cfb      	ldrb	r3, [r7, #19]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b9c:	4b52      	ldr	r3, [pc, #328]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002baa:	494f      	ldr	r1, [pc, #316]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bb2:	e001      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80a0 	beq.w	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bca:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00d      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be4:	4a40      	ldr	r2, [pc, #256]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bea:	6593      	str	r3, [r2, #88]	; 0x58
 8002bec:	4b3e      	ldr	r3, [pc, #248]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bfc:	4b3b      	ldr	r3, [pc, #236]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a3a      	ldr	r2, [pc, #232]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c08:	f7fe fdbc 	bl	8001784 <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c0e:	e009      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c10:	f7fe fdb8 	bl	8001784 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d902      	bls.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	74fb      	strb	r3, [r7, #19]
        break;
 8002c22:	e005      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c24:	4b31      	ldr	r3, [pc, #196]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0ef      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c30:	7cfb      	ldrb	r3, [r7, #19]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d15c      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c36:	4b2c      	ldr	r3, [pc, #176]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d01f      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d019      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c54:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c60:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	4a20      	ldr	r2, [pc, #128]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	4a1c      	ldr	r2, [pc, #112]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c80:	4a19      	ldr	r2, [pc, #100]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d016      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c92:	f7fe fd77 	bl	8001784 <HAL_GetTick>
 8002c96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c98:	e00b      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7fe fd73 	bl	8001784 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d902      	bls.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	74fb      	strb	r3, [r7, #19]
            break;
 8002cb0:	e006      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0ec      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cd6:	4904      	ldr	r1, [pc, #16]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cde:	e009      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	74bb      	strb	r3, [r7, #18]
 8002ce4:	e006      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf4:	7c7b      	ldrb	r3, [r7, #17]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d105      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfa:	4b9e      	ldr	r3, [pc, #632]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	4a9d      	ldr	r2, [pc, #628]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d12:	4b98      	ldr	r3, [pc, #608]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d18:	f023 0203 	bic.w	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	4994      	ldr	r1, [pc, #592]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d34:	4b8f      	ldr	r3, [pc, #572]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f023 020c 	bic.w	r2, r3, #12
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	498c      	ldr	r1, [pc, #560]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d56:	4b87      	ldr	r3, [pc, #540]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	4983      	ldr	r1, [pc, #524]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d78:	4b7e      	ldr	r3, [pc, #504]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	497b      	ldr	r1, [pc, #492]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d9a:	4b76      	ldr	r3, [pc, #472]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da8:	4972      	ldr	r1, [pc, #456]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dbc:	4b6d      	ldr	r3, [pc, #436]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dca:	496a      	ldr	r1, [pc, #424]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dde:	4b65      	ldr	r3, [pc, #404]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	4961      	ldr	r1, [pc, #388]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e00:	4b5c      	ldr	r3, [pc, #368]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0e:	4959      	ldr	r1, [pc, #356]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e22:	4b54      	ldr	r3, [pc, #336]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e30:	4950      	ldr	r1, [pc, #320]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e44:	4b4b      	ldr	r3, [pc, #300]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e52:	4948      	ldr	r1, [pc, #288]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e66:	4b43      	ldr	r3, [pc, #268]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e74:	493f      	ldr	r1, [pc, #252]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d028      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e88:	4b3a      	ldr	r3, [pc, #232]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e96:	4937      	ldr	r1, [pc, #220]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ea8:	4b32      	ldr	r3, [pc, #200]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4a31      	ldr	r2, [pc, #196]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eb2:	60d3      	str	r3, [r2, #12]
 8002eb4:	e011      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ebe:	d10c      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f8c8 	bl	800305c <RCCEx_PLLSAI1_Config>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ed6:	7cfb      	ldrb	r3, [r7, #19]
 8002ed8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d028      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ee6:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	491f      	ldr	r1, [pc, #124]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f04:	d106      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f06:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	4a1a      	ldr	r2, [pc, #104]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f10:	60d3      	str	r3, [r2, #12]
 8002f12:	e011      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f1c:	d10c      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3304      	adds	r3, #4
 8002f22:	2101      	movs	r1, #1
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 f899 	bl	800305c <RCCEx_PLLSAI1_Config>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f2e:	7cfb      	ldrb	r3, [r7, #19]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f34:	7cfb      	ldrb	r3, [r7, #19]
 8002f36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d02b      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f52:	4908      	ldr	r1, [pc, #32]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f62:	d109      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	4a02      	ldr	r2, [pc, #8]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f6e:	60d3      	str	r3, [r2, #12]
 8002f70:	e014      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2101      	movs	r1, #1
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 f867 	bl	800305c <RCCEx_PLLSAI1_Config>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f92:	7cfb      	ldrb	r3, [r7, #19]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f98:	7cfb      	ldrb	r3, [r7, #19]
 8002f9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d02f      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fb6:	4928      	ldr	r1, [pc, #160]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fc6:	d10d      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	2102      	movs	r1, #2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f844 	bl	800305c <RCCEx_PLLSAI1_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fd8:	7cfb      	ldrb	r3, [r7, #19]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d014      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fde:	7cfb      	ldrb	r3, [r7, #19]
 8002fe0:	74bb      	strb	r3, [r7, #18]
 8002fe2:	e011      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fec:	d10c      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3320      	adds	r3, #32
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 f925 	bl	8003244 <RCCEx_PLLSAI2_Config>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003004:	7cfb      	ldrb	r3, [r7, #19]
 8003006:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003014:	4b10      	ldr	r3, [pc, #64]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003022:	490d      	ldr	r1, [pc, #52]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003046:	4904      	ldr	r1, [pc, #16]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800304e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40021000 	.word	0x40021000

0800305c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800306a:	4b75      	ldr	r3, [pc, #468]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d018      	beq.n	80030a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003076:	4b72      	ldr	r3, [pc, #456]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0203 	and.w	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d10d      	bne.n	80030a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
       ||
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800308e:	4b6c      	ldr	r3, [pc, #432]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	091b      	lsrs	r3, r3, #4
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
       ||
 800309e:	429a      	cmp	r2, r3
 80030a0:	d047      	beq.n	8003132 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
 80030a6:	e044      	b.n	8003132 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d018      	beq.n	80030e2 <RCCEx_PLLSAI1_Config+0x86>
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d825      	bhi.n	8003100 <RCCEx_PLLSAI1_Config+0xa4>
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d002      	beq.n	80030be <RCCEx_PLLSAI1_Config+0x62>
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d009      	beq.n	80030d0 <RCCEx_PLLSAI1_Config+0x74>
 80030bc:	e020      	b.n	8003100 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030be:	4b60      	ldr	r3, [pc, #384]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d11d      	bne.n	8003106 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ce:	e01a      	b.n	8003106 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030d0:	4b5b      	ldr	r3, [pc, #364]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d116      	bne.n	800310a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e0:	e013      	b.n	800310a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030e2:	4b57      	ldr	r3, [pc, #348]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10f      	bne.n	800310e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030ee:	4b54      	ldr	r3, [pc, #336]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030fe:	e006      	b.n	800310e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      break;
 8003104:	e004      	b.n	8003110 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003106:	bf00      	nop
 8003108:	e002      	b.n	8003110 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800310a:	bf00      	nop
 800310c:	e000      	b.n	8003110 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800310e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10d      	bne.n	8003132 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003116:	4b4a      	ldr	r3, [pc, #296]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6819      	ldr	r1, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	3b01      	subs	r3, #1
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	430b      	orrs	r3, r1
 800312c:	4944      	ldr	r1, [pc, #272]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800312e:	4313      	orrs	r3, r2
 8003130:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d17d      	bne.n	8003234 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003138:	4b41      	ldr	r3, [pc, #260]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a40      	ldr	r2, [pc, #256]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800313e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003144:	f7fe fb1e 	bl	8001784 <HAL_GetTick>
 8003148:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800314a:	e009      	b.n	8003160 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800314c:	f7fe fb1a 	bl	8001784 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d902      	bls.n	8003160 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	73fb      	strb	r3, [r7, #15]
        break;
 800315e:	e005      	b.n	800316c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003160:	4b37      	ldr	r3, [pc, #220]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1ef      	bne.n	800314c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d160      	bne.n	8003234 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d111      	bne.n	800319c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003178:	4b31      	ldr	r3, [pc, #196]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6892      	ldr	r2, [r2, #8]
 8003188:	0211      	lsls	r1, r2, #8
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68d2      	ldr	r2, [r2, #12]
 800318e:	0912      	lsrs	r2, r2, #4
 8003190:	0452      	lsls	r2, r2, #17
 8003192:	430a      	orrs	r2, r1
 8003194:	492a      	ldr	r1, [pc, #168]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003196:	4313      	orrs	r3, r2
 8003198:	610b      	str	r3, [r1, #16]
 800319a:	e027      	b.n	80031ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d112      	bne.n	80031c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031a2:	4b27      	ldr	r3, [pc, #156]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80031aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6892      	ldr	r2, [r2, #8]
 80031b2:	0211      	lsls	r1, r2, #8
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6912      	ldr	r2, [r2, #16]
 80031b8:	0852      	lsrs	r2, r2, #1
 80031ba:	3a01      	subs	r2, #1
 80031bc:	0552      	lsls	r2, r2, #21
 80031be:	430a      	orrs	r2, r1
 80031c0:	491f      	ldr	r1, [pc, #124]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	610b      	str	r3, [r1, #16]
 80031c6:	e011      	b.n	80031ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031c8:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6892      	ldr	r2, [r2, #8]
 80031d8:	0211      	lsls	r1, r2, #8
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6952      	ldr	r2, [r2, #20]
 80031de:	0852      	lsrs	r2, r2, #1
 80031e0:	3a01      	subs	r2, #1
 80031e2:	0652      	lsls	r2, r2, #25
 80031e4:	430a      	orrs	r2, r1
 80031e6:	4916      	ldr	r1, [pc, #88]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031ec:	4b14      	ldr	r3, [pc, #80]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a13      	ldr	r2, [pc, #76]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f8:	f7fe fac4 	bl	8001784 <HAL_GetTick>
 80031fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031fe:	e009      	b.n	8003214 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003200:	f7fe fac0 	bl	8001784 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d902      	bls.n	8003214 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	73fb      	strb	r3, [r7, #15]
          break;
 8003212:	e005      	b.n	8003220 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003214:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0ef      	beq.n	8003200 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	4904      	ldr	r1, [pc, #16]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003230:	4313      	orrs	r3, r2
 8003232:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003234:	7bfb      	ldrb	r3, [r7, #15]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40021000 	.word	0x40021000

08003244 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003252:	4b6a      	ldr	r3, [pc, #424]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d018      	beq.n	8003290 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800325e:	4b67      	ldr	r3, [pc, #412]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f003 0203 	and.w	r2, r3, #3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d10d      	bne.n	800328a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
       ||
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003276:	4b61      	ldr	r3, [pc, #388]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	091b      	lsrs	r3, r3, #4
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
       ||
 8003286:	429a      	cmp	r2, r3
 8003288:	d047      	beq.n	800331a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
 800328e:	e044      	b.n	800331a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b03      	cmp	r3, #3
 8003296:	d018      	beq.n	80032ca <RCCEx_PLLSAI2_Config+0x86>
 8003298:	2b03      	cmp	r3, #3
 800329a:	d825      	bhi.n	80032e8 <RCCEx_PLLSAI2_Config+0xa4>
 800329c:	2b01      	cmp	r3, #1
 800329e:	d002      	beq.n	80032a6 <RCCEx_PLLSAI2_Config+0x62>
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d009      	beq.n	80032b8 <RCCEx_PLLSAI2_Config+0x74>
 80032a4:	e020      	b.n	80032e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032a6:	4b55      	ldr	r3, [pc, #340]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d11d      	bne.n	80032ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032b6:	e01a      	b.n	80032ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032b8:	4b50      	ldr	r3, [pc, #320]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d116      	bne.n	80032f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032c8:	e013      	b.n	80032f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032ca:	4b4c      	ldr	r3, [pc, #304]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10f      	bne.n	80032f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032d6:	4b49      	ldr	r3, [pc, #292]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032e6:	e006      	b.n	80032f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
      break;
 80032ec:	e004      	b.n	80032f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032ee:	bf00      	nop
 80032f0:	e002      	b.n	80032f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032f2:	bf00      	nop
 80032f4:	e000      	b.n	80032f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10d      	bne.n	800331a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032fe:	4b3f      	ldr	r3, [pc, #252]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6819      	ldr	r1, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	3b01      	subs	r3, #1
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	430b      	orrs	r3, r1
 8003314:	4939      	ldr	r1, [pc, #228]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003316:	4313      	orrs	r3, r2
 8003318:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d167      	bne.n	80033f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003320:	4b36      	ldr	r3, [pc, #216]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a35      	ldr	r2, [pc, #212]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800332a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800332c:	f7fe fa2a 	bl	8001784 <HAL_GetTick>
 8003330:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003332:	e009      	b.n	8003348 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003334:	f7fe fa26 	bl	8001784 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d902      	bls.n	8003348 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	73fb      	strb	r3, [r7, #15]
        break;
 8003346:	e005      	b.n	8003354 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003348:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1ef      	bne.n	8003334 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d14a      	bne.n	80033f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d111      	bne.n	8003384 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003360:	4b26      	ldr	r3, [pc, #152]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6892      	ldr	r2, [r2, #8]
 8003370:	0211      	lsls	r1, r2, #8
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	68d2      	ldr	r2, [r2, #12]
 8003376:	0912      	lsrs	r2, r2, #4
 8003378:	0452      	lsls	r2, r2, #17
 800337a:	430a      	orrs	r2, r1
 800337c:	491f      	ldr	r1, [pc, #124]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800337e:	4313      	orrs	r3, r2
 8003380:	614b      	str	r3, [r1, #20]
 8003382:	e011      	b.n	80033a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003384:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800338c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6892      	ldr	r2, [r2, #8]
 8003394:	0211      	lsls	r1, r2, #8
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6912      	ldr	r2, [r2, #16]
 800339a:	0852      	lsrs	r2, r2, #1
 800339c:	3a01      	subs	r2, #1
 800339e:	0652      	lsls	r2, r2, #25
 80033a0:	430a      	orrs	r2, r1
 80033a2:	4916      	ldr	r1, [pc, #88]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033a8:	4b14      	ldr	r3, [pc, #80]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a13      	ldr	r2, [pc, #76]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fe f9e6 	bl	8001784 <HAL_GetTick>
 80033b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033ba:	e009      	b.n	80033d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033bc:	f7fe f9e2 	bl	8001784 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d902      	bls.n	80033d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	73fb      	strb	r3, [r7, #15]
          break;
 80033ce:	e005      	b.n	80033dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033d0:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0ef      	beq.n	80033bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	4904      	ldr	r1, [pc, #16]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40021000 	.word	0x40021000

08003400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e049      	b.n	80034a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fd fff6 	bl	8001418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3304      	adds	r3, #4
 800343c:	4619      	mov	r1, r3
 800343e:	4610      	mov	r0, r2
 8003440:	f000 fd16 	bl	8003e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d001      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e04f      	b.n	8003568 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a23      	ldr	r2, [pc, #140]	; (8003574 <HAL_TIM_Base_Start_IT+0xc4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d01d      	beq.n	8003526 <HAL_TIM_Base_Start_IT+0x76>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f2:	d018      	beq.n	8003526 <HAL_TIM_Base_Start_IT+0x76>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a1f      	ldr	r2, [pc, #124]	; (8003578 <HAL_TIM_Base_Start_IT+0xc8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d013      	beq.n	8003526 <HAL_TIM_Base_Start_IT+0x76>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a1e      	ldr	r2, [pc, #120]	; (800357c <HAL_TIM_Base_Start_IT+0xcc>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00e      	beq.n	8003526 <HAL_TIM_Base_Start_IT+0x76>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1c      	ldr	r2, [pc, #112]	; (8003580 <HAL_TIM_Base_Start_IT+0xd0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d009      	beq.n	8003526 <HAL_TIM_Base_Start_IT+0x76>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1b      	ldr	r2, [pc, #108]	; (8003584 <HAL_TIM_Base_Start_IT+0xd4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d004      	beq.n	8003526 <HAL_TIM_Base_Start_IT+0x76>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a19      	ldr	r2, [pc, #100]	; (8003588 <HAL_TIM_Base_Start_IT+0xd8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d115      	bne.n	8003552 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	4b17      	ldr	r3, [pc, #92]	; (800358c <HAL_TIM_Base_Start_IT+0xdc>)
 800352e:	4013      	ands	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2b06      	cmp	r3, #6
 8003536:	d015      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0xb4>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353e:	d011      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003550:	e008      	b.n	8003564 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0201 	orr.w	r2, r2, #1
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	e000      	b.n	8003566 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003564:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40000400 	.word	0x40000400
 800357c:	40000800 	.word	0x40000800
 8003580:	40000c00 	.word	0x40000c00
 8003584:	40013400 	.word	0x40013400
 8003588:	40014000 	.word	0x40014000
 800358c:	00010007 	.word	0x00010007

08003590 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e049      	b.n	8003636 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f841 	bl	800363e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	4619      	mov	r1, r3
 80035ce:	4610      	mov	r0, r2
 80035d0:	f000 fc4e 	bl	8003e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d109      	bne.n	8003678 <HAL_TIM_PWM_Start+0x24>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	e03c      	b.n	80036f2 <HAL_TIM_PWM_Start+0x9e>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b04      	cmp	r3, #4
 800367c:	d109      	bne.n	8003692 <HAL_TIM_PWM_Start+0x3e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	e02f      	b.n	80036f2 <HAL_TIM_PWM_Start+0x9e>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b08      	cmp	r3, #8
 8003696:	d109      	bne.n	80036ac <HAL_TIM_PWM_Start+0x58>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	e022      	b.n	80036f2 <HAL_TIM_PWM_Start+0x9e>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	d109      	bne.n	80036c6 <HAL_TIM_PWM_Start+0x72>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	bf14      	ite	ne
 80036be:	2301      	movne	r3, #1
 80036c0:	2300      	moveq	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	e015      	b.n	80036f2 <HAL_TIM_PWM_Start+0x9e>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b10      	cmp	r3, #16
 80036ca:	d109      	bne.n	80036e0 <HAL_TIM_PWM_Start+0x8c>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	bf14      	ite	ne
 80036d8:	2301      	movne	r3, #1
 80036da:	2300      	moveq	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	e008      	b.n	80036f2 <HAL_TIM_PWM_Start+0x9e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	bf14      	ite	ne
 80036ec:	2301      	movne	r3, #1
 80036ee:	2300      	moveq	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e09c      	b.n	8003834 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d104      	bne.n	800370a <HAL_TIM_PWM_Start+0xb6>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003708:	e023      	b.n	8003752 <HAL_TIM_PWM_Start+0xfe>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b04      	cmp	r3, #4
 800370e:	d104      	bne.n	800371a <HAL_TIM_PWM_Start+0xc6>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003718:	e01b      	b.n	8003752 <HAL_TIM_PWM_Start+0xfe>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b08      	cmp	r3, #8
 800371e:	d104      	bne.n	800372a <HAL_TIM_PWM_Start+0xd6>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003728:	e013      	b.n	8003752 <HAL_TIM_PWM_Start+0xfe>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b0c      	cmp	r3, #12
 800372e:	d104      	bne.n	800373a <HAL_TIM_PWM_Start+0xe6>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003738:	e00b      	b.n	8003752 <HAL_TIM_PWM_Start+0xfe>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b10      	cmp	r3, #16
 800373e:	d104      	bne.n	800374a <HAL_TIM_PWM_Start+0xf6>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003748:	e003      	b.n	8003752 <HAL_TIM_PWM_Start+0xfe>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2202      	movs	r2, #2
 800374e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2201      	movs	r2, #1
 8003758:	6839      	ldr	r1, [r7, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f000 ff92 	bl	8004684 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a35      	ldr	r2, [pc, #212]	; (800383c <HAL_TIM_PWM_Start+0x1e8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d013      	beq.n	8003792 <HAL_TIM_PWM_Start+0x13e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a34      	ldr	r2, [pc, #208]	; (8003840 <HAL_TIM_PWM_Start+0x1ec>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00e      	beq.n	8003792 <HAL_TIM_PWM_Start+0x13e>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a32      	ldr	r2, [pc, #200]	; (8003844 <HAL_TIM_PWM_Start+0x1f0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d009      	beq.n	8003792 <HAL_TIM_PWM_Start+0x13e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a31      	ldr	r2, [pc, #196]	; (8003848 <HAL_TIM_PWM_Start+0x1f4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d004      	beq.n	8003792 <HAL_TIM_PWM_Start+0x13e>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a2f      	ldr	r2, [pc, #188]	; (800384c <HAL_TIM_PWM_Start+0x1f8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d101      	bne.n	8003796 <HAL_TIM_PWM_Start+0x142>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <HAL_TIM_PWM_Start+0x144>
 8003796:	2300      	movs	r3, #0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a22      	ldr	r2, [pc, #136]	; (800383c <HAL_TIM_PWM_Start+0x1e8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01d      	beq.n	80037f2 <HAL_TIM_PWM_Start+0x19e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037be:	d018      	beq.n	80037f2 <HAL_TIM_PWM_Start+0x19e>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a22      	ldr	r2, [pc, #136]	; (8003850 <HAL_TIM_PWM_Start+0x1fc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d013      	beq.n	80037f2 <HAL_TIM_PWM_Start+0x19e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a21      	ldr	r2, [pc, #132]	; (8003854 <HAL_TIM_PWM_Start+0x200>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00e      	beq.n	80037f2 <HAL_TIM_PWM_Start+0x19e>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1f      	ldr	r2, [pc, #124]	; (8003858 <HAL_TIM_PWM_Start+0x204>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d009      	beq.n	80037f2 <HAL_TIM_PWM_Start+0x19e>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a17      	ldr	r2, [pc, #92]	; (8003840 <HAL_TIM_PWM_Start+0x1ec>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d004      	beq.n	80037f2 <HAL_TIM_PWM_Start+0x19e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a15      	ldr	r2, [pc, #84]	; (8003844 <HAL_TIM_PWM_Start+0x1f0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d115      	bne.n	800381e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	4b18      	ldr	r3, [pc, #96]	; (800385c <HAL_TIM_PWM_Start+0x208>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b06      	cmp	r3, #6
 8003802:	d015      	beq.n	8003830 <HAL_TIM_PWM_Start+0x1dc>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380a:	d011      	beq.n	8003830 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381c:	e008      	b.n	8003830 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f042 0201 	orr.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	e000      	b.n	8003832 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003830:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40012c00 	.word	0x40012c00
 8003840:	40013400 	.word	0x40013400
 8003844:	40014000 	.word	0x40014000
 8003848:	40014400 	.word	0x40014400
 800384c:	40014800 	.word	0x40014800
 8003850:	40000400 	.word	0x40000400
 8003854:	40000800 	.word	0x40000800
 8003858:	40000c00 	.word	0x40000c00
 800385c:	00010007 	.word	0x00010007

08003860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d020      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01b      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0202 	mvn.w	r2, #2
 8003894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fac1 	bl	8003e32 <HAL_TIM_IC_CaptureCallback>
 80038b0:	e005      	b.n	80038be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fab3 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 fac4 	bl	8003e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d020      	beq.n	8003910 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01b      	beq.n	8003910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0204 	mvn.w	r2, #4
 80038e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2202      	movs	r2, #2
 80038e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fa9b 	bl	8003e32 <HAL_TIM_IC_CaptureCallback>
 80038fc:	e005      	b.n	800390a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fa8d 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fa9e 	bl	8003e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d020      	beq.n	800395c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01b      	beq.n	800395c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0208 	mvn.w	r2, #8
 800392c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2204      	movs	r2, #4
 8003932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fa75 	bl	8003e32 <HAL_TIM_IC_CaptureCallback>
 8003948:	e005      	b.n	8003956 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fa67 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fa78 	bl	8003e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	d020      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01b      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0210 	mvn.w	r2, #16
 8003978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2208      	movs	r2, #8
 800397e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fa4f 	bl	8003e32 <HAL_TIM_IC_CaptureCallback>
 8003994:	e005      	b.n	80039a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fa41 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fa52 	bl	8003e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00c      	beq.n	80039cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d007      	beq.n	80039cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0201 	mvn.w	r2, #1
 80039c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fd fa90 	bl	8000eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00c      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d007      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 ff02 	bl	80047f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00c      	beq.n	8003a14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d007      	beq.n	8003a14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fefa 	bl	8004808 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00c      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d007      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fa11 	bl	8003e5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00c      	beq.n	8003a5c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0220 	mvn.w	r2, #32
 8003a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fec2 	bl	80047e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e0ff      	b.n	8003c82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b14      	cmp	r3, #20
 8003a8e:	f200 80f0 	bhi.w	8003c72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a92:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a98:	08003aed 	.word	0x08003aed
 8003a9c:	08003c73 	.word	0x08003c73
 8003aa0:	08003c73 	.word	0x08003c73
 8003aa4:	08003c73 	.word	0x08003c73
 8003aa8:	08003b2d 	.word	0x08003b2d
 8003aac:	08003c73 	.word	0x08003c73
 8003ab0:	08003c73 	.word	0x08003c73
 8003ab4:	08003c73 	.word	0x08003c73
 8003ab8:	08003b6f 	.word	0x08003b6f
 8003abc:	08003c73 	.word	0x08003c73
 8003ac0:	08003c73 	.word	0x08003c73
 8003ac4:	08003c73 	.word	0x08003c73
 8003ac8:	08003baf 	.word	0x08003baf
 8003acc:	08003c73 	.word	0x08003c73
 8003ad0:	08003c73 	.word	0x08003c73
 8003ad4:	08003c73 	.word	0x08003c73
 8003ad8:	08003bf1 	.word	0x08003bf1
 8003adc:	08003c73 	.word	0x08003c73
 8003ae0:	08003c73 	.word	0x08003c73
 8003ae4:	08003c73 	.word	0x08003c73
 8003ae8:	08003c31 	.word	0x08003c31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fa56 	bl	8003fa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0208 	orr.w	r2, r2, #8
 8003b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699a      	ldr	r2, [r3, #24]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0204 	bic.w	r2, r2, #4
 8003b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6999      	ldr	r1, [r3, #24]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	619a      	str	r2, [r3, #24]
      break;
 8003b2a:	e0a5      	b.n	8003c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fac6 	bl	80040c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6999      	ldr	r1, [r3, #24]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	021a      	lsls	r2, r3, #8
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	619a      	str	r2, [r3, #24]
      break;
 8003b6c:	e084      	b.n	8003c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fb2f 	bl	80041d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69da      	ldr	r2, [r3, #28]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0208 	orr.w	r2, r2, #8
 8003b88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69da      	ldr	r2, [r3, #28]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0204 	bic.w	r2, r2, #4
 8003b98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69d9      	ldr	r1, [r3, #28]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	61da      	str	r2, [r3, #28]
      break;
 8003bac:	e064      	b.n	8003c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fb97 	bl	80042e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69da      	ldr	r2, [r3, #28]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69d9      	ldr	r1, [r3, #28]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	021a      	lsls	r2, r3, #8
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	61da      	str	r2, [r3, #28]
      break;
 8003bee:	e043      	b.n	8003c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fbe0 	bl	80043bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0208 	orr.w	r2, r2, #8
 8003c0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0204 	bic.w	r2, r2, #4
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c2e:	e023      	b.n	8003c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fc24 	bl	8004484 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	021a      	lsls	r2, r3, #8
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c70:	e002      	b.n	8003c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	75fb      	strb	r3, [r7, #23]
      break;
 8003c76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop

08003c8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e0b6      	b.n	8003e16 <HAL_TIM_ConfigClockSource+0x18a>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce4:	d03e      	beq.n	8003d64 <HAL_TIM_ConfigClockSource+0xd8>
 8003ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cea:	f200 8087 	bhi.w	8003dfc <HAL_TIM_ConfigClockSource+0x170>
 8003cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf2:	f000 8086 	beq.w	8003e02 <HAL_TIM_ConfigClockSource+0x176>
 8003cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfa:	d87f      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x170>
 8003cfc:	2b70      	cmp	r3, #112	; 0x70
 8003cfe:	d01a      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0xaa>
 8003d00:	2b70      	cmp	r3, #112	; 0x70
 8003d02:	d87b      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x170>
 8003d04:	2b60      	cmp	r3, #96	; 0x60
 8003d06:	d050      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x11e>
 8003d08:	2b60      	cmp	r3, #96	; 0x60
 8003d0a:	d877      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x170>
 8003d0c:	2b50      	cmp	r3, #80	; 0x50
 8003d0e:	d03c      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0xfe>
 8003d10:	2b50      	cmp	r3, #80	; 0x50
 8003d12:	d873      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x170>
 8003d14:	2b40      	cmp	r3, #64	; 0x40
 8003d16:	d058      	beq.n	8003dca <HAL_TIM_ConfigClockSource+0x13e>
 8003d18:	2b40      	cmp	r3, #64	; 0x40
 8003d1a:	d86f      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x170>
 8003d1c:	2b30      	cmp	r3, #48	; 0x30
 8003d1e:	d064      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x15e>
 8003d20:	2b30      	cmp	r3, #48	; 0x30
 8003d22:	d86b      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x170>
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d060      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x15e>
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d867      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x170>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d05c      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x15e>
 8003d30:	2b10      	cmp	r3, #16
 8003d32:	d05a      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x15e>
 8003d34:	e062      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d46:	f000 fc7d 	bl	8004644 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	609a      	str	r2, [r3, #8]
      break;
 8003d62:	e04f      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d74:	f000 fc66 	bl	8004644 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d86:	609a      	str	r2, [r3, #8]
      break;
 8003d88:	e03c      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d96:	461a      	mov	r2, r3
 8003d98:	f000 fbda 	bl	8004550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2150      	movs	r1, #80	; 0x50
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fc33 	bl	800460e <TIM_ITRx_SetConfig>
      break;
 8003da8:	e02c      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003db6:	461a      	mov	r2, r3
 8003db8:	f000 fbf9 	bl	80045ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2160      	movs	r1, #96	; 0x60
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fc23 	bl	800460e <TIM_ITRx_SetConfig>
      break;
 8003dc8:	e01c      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f000 fbba 	bl	8004550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2140      	movs	r1, #64	; 0x40
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fc13 	bl	800460e <TIM_ITRx_SetConfig>
      break;
 8003de8:	e00c      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4619      	mov	r1, r3
 8003df4:	4610      	mov	r0, r2
 8003df6:	f000 fc0a 	bl	800460e <TIM_ITRx_SetConfig>
      break;
 8003dfa:	e003      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003e00:	e000      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003e02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a40      	ldr	r2, [pc, #256]	; (8003f84 <TIM_Base_SetConfig+0x114>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d013      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8e:	d00f      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a3d      	ldr	r2, [pc, #244]	; (8003f88 <TIM_Base_SetConfig+0x118>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00b      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a3c      	ldr	r2, [pc, #240]	; (8003f8c <TIM_Base_SetConfig+0x11c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d007      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a3b      	ldr	r2, [pc, #236]	; (8003f90 <TIM_Base_SetConfig+0x120>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a3a      	ldr	r2, [pc, #232]	; (8003f94 <TIM_Base_SetConfig+0x124>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d108      	bne.n	8003ec2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a2f      	ldr	r2, [pc, #188]	; (8003f84 <TIM_Base_SetConfig+0x114>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d01f      	beq.n	8003f0a <TIM_Base_SetConfig+0x9a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed0:	d01b      	beq.n	8003f0a <TIM_Base_SetConfig+0x9a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a2c      	ldr	r2, [pc, #176]	; (8003f88 <TIM_Base_SetConfig+0x118>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d017      	beq.n	8003f0a <TIM_Base_SetConfig+0x9a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a2b      	ldr	r2, [pc, #172]	; (8003f8c <TIM_Base_SetConfig+0x11c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d013      	beq.n	8003f0a <TIM_Base_SetConfig+0x9a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a2a      	ldr	r2, [pc, #168]	; (8003f90 <TIM_Base_SetConfig+0x120>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00f      	beq.n	8003f0a <TIM_Base_SetConfig+0x9a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a29      	ldr	r2, [pc, #164]	; (8003f94 <TIM_Base_SetConfig+0x124>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00b      	beq.n	8003f0a <TIM_Base_SetConfig+0x9a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a28      	ldr	r2, [pc, #160]	; (8003f98 <TIM_Base_SetConfig+0x128>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d007      	beq.n	8003f0a <TIM_Base_SetConfig+0x9a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a27      	ldr	r2, [pc, #156]	; (8003f9c <TIM_Base_SetConfig+0x12c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d003      	beq.n	8003f0a <TIM_Base_SetConfig+0x9a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a26      	ldr	r2, [pc, #152]	; (8003fa0 <TIM_Base_SetConfig+0x130>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d108      	bne.n	8003f1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a10      	ldr	r2, [pc, #64]	; (8003f84 <TIM_Base_SetConfig+0x114>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00f      	beq.n	8003f68 <TIM_Base_SetConfig+0xf8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a12      	ldr	r2, [pc, #72]	; (8003f94 <TIM_Base_SetConfig+0x124>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00b      	beq.n	8003f68 <TIM_Base_SetConfig+0xf8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a11      	ldr	r2, [pc, #68]	; (8003f98 <TIM_Base_SetConfig+0x128>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d007      	beq.n	8003f68 <TIM_Base_SetConfig+0xf8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a10      	ldr	r2, [pc, #64]	; (8003f9c <TIM_Base_SetConfig+0x12c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d003      	beq.n	8003f68 <TIM_Base_SetConfig+0xf8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a0f      	ldr	r2, [pc, #60]	; (8003fa0 <TIM_Base_SetConfig+0x130>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d103      	bne.n	8003f70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	615a      	str	r2, [r3, #20]
}
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40012c00 	.word	0x40012c00
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40000800 	.word	0x40000800
 8003f90:	40000c00 	.word	0x40000c00
 8003f94:	40013400 	.word	0x40013400
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40014400 	.word	0x40014400
 8003fa0:	40014800 	.word	0x40014800

08003fa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f023 0201 	bic.w	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0303 	bic.w	r3, r3, #3
 8003fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f023 0302 	bic.w	r3, r3, #2
 8003ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a2c      	ldr	r2, [pc, #176]	; (80040b0 <TIM_OC1_SetConfig+0x10c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00f      	beq.n	8004024 <TIM_OC1_SetConfig+0x80>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a2b      	ldr	r2, [pc, #172]	; (80040b4 <TIM_OC1_SetConfig+0x110>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00b      	beq.n	8004024 <TIM_OC1_SetConfig+0x80>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a2a      	ldr	r2, [pc, #168]	; (80040b8 <TIM_OC1_SetConfig+0x114>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d007      	beq.n	8004024 <TIM_OC1_SetConfig+0x80>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a29      	ldr	r2, [pc, #164]	; (80040bc <TIM_OC1_SetConfig+0x118>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_OC1_SetConfig+0x80>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a28      	ldr	r2, [pc, #160]	; (80040c0 <TIM_OC1_SetConfig+0x11c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d10c      	bne.n	800403e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f023 0308 	bic.w	r3, r3, #8
 800402a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f023 0304 	bic.w	r3, r3, #4
 800403c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a1b      	ldr	r2, [pc, #108]	; (80040b0 <TIM_OC1_SetConfig+0x10c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00f      	beq.n	8004066 <TIM_OC1_SetConfig+0xc2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a1a      	ldr	r2, [pc, #104]	; (80040b4 <TIM_OC1_SetConfig+0x110>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00b      	beq.n	8004066 <TIM_OC1_SetConfig+0xc2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a19      	ldr	r2, [pc, #100]	; (80040b8 <TIM_OC1_SetConfig+0x114>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d007      	beq.n	8004066 <TIM_OC1_SetConfig+0xc2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a18      	ldr	r2, [pc, #96]	; (80040bc <TIM_OC1_SetConfig+0x118>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d003      	beq.n	8004066 <TIM_OC1_SetConfig+0xc2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a17      	ldr	r2, [pc, #92]	; (80040c0 <TIM_OC1_SetConfig+0x11c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d111      	bne.n	800408a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800406c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	621a      	str	r2, [r3, #32]
}
 80040a4:	bf00      	nop
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	40012c00 	.word	0x40012c00
 80040b4:	40013400 	.word	0x40013400
 80040b8:	40014000 	.word	0x40014000
 80040bc:	40014400 	.word	0x40014400
 80040c0:	40014800 	.word	0x40014800

080040c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	f023 0210 	bic.w	r2, r3, #16
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	021b      	lsls	r3, r3, #8
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f023 0320 	bic.w	r3, r3, #32
 8004112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a28      	ldr	r2, [pc, #160]	; (80041c4 <TIM_OC2_SetConfig+0x100>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d003      	beq.n	8004130 <TIM_OC2_SetConfig+0x6c>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a27      	ldr	r2, [pc, #156]	; (80041c8 <TIM_OC2_SetConfig+0x104>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d10d      	bne.n	800414c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800414a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a1d      	ldr	r2, [pc, #116]	; (80041c4 <TIM_OC2_SetConfig+0x100>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00f      	beq.n	8004174 <TIM_OC2_SetConfig+0xb0>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a1c      	ldr	r2, [pc, #112]	; (80041c8 <TIM_OC2_SetConfig+0x104>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00b      	beq.n	8004174 <TIM_OC2_SetConfig+0xb0>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a1b      	ldr	r2, [pc, #108]	; (80041cc <TIM_OC2_SetConfig+0x108>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d007      	beq.n	8004174 <TIM_OC2_SetConfig+0xb0>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a1a      	ldr	r2, [pc, #104]	; (80041d0 <TIM_OC2_SetConfig+0x10c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d003      	beq.n	8004174 <TIM_OC2_SetConfig+0xb0>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a19      	ldr	r2, [pc, #100]	; (80041d4 <TIM_OC2_SetConfig+0x110>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d113      	bne.n	800419c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800417a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004182:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	621a      	str	r2, [r3, #32]
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40012c00 	.word	0x40012c00
 80041c8:	40013400 	.word	0x40013400
 80041cc:	40014000 	.word	0x40014000
 80041d0:	40014400 	.word	0x40014400
 80041d4:	40014800 	.word	0x40014800

080041d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0303 	bic.w	r3, r3, #3
 8004212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a27      	ldr	r2, [pc, #156]	; (80042d4 <TIM_OC3_SetConfig+0xfc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d003      	beq.n	8004242 <TIM_OC3_SetConfig+0x6a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a26      	ldr	r2, [pc, #152]	; (80042d8 <TIM_OC3_SetConfig+0x100>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d10d      	bne.n	800425e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800425c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a1c      	ldr	r2, [pc, #112]	; (80042d4 <TIM_OC3_SetConfig+0xfc>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00f      	beq.n	8004286 <TIM_OC3_SetConfig+0xae>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a1b      	ldr	r2, [pc, #108]	; (80042d8 <TIM_OC3_SetConfig+0x100>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00b      	beq.n	8004286 <TIM_OC3_SetConfig+0xae>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a1a      	ldr	r2, [pc, #104]	; (80042dc <TIM_OC3_SetConfig+0x104>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d007      	beq.n	8004286 <TIM_OC3_SetConfig+0xae>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <TIM_OC3_SetConfig+0x108>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d003      	beq.n	8004286 <TIM_OC3_SetConfig+0xae>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a18      	ldr	r2, [pc, #96]	; (80042e4 <TIM_OC3_SetConfig+0x10c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d113      	bne.n	80042ae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800428c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	621a      	str	r2, [r3, #32]
}
 80042c8:	bf00      	nop
 80042ca:	371c      	adds	r7, #28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	40012c00 	.word	0x40012c00
 80042d8:	40013400 	.word	0x40013400
 80042dc:	40014000 	.word	0x40014000
 80042e0:	40014400 	.word	0x40014400
 80042e4:	40014800 	.word	0x40014800

080042e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	031b      	lsls	r3, r3, #12
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a18      	ldr	r2, [pc, #96]	; (80043a8 <TIM_OC4_SetConfig+0xc0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00f      	beq.n	800436c <TIM_OC4_SetConfig+0x84>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a17      	ldr	r2, [pc, #92]	; (80043ac <TIM_OC4_SetConfig+0xc4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00b      	beq.n	800436c <TIM_OC4_SetConfig+0x84>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a16      	ldr	r2, [pc, #88]	; (80043b0 <TIM_OC4_SetConfig+0xc8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <TIM_OC4_SetConfig+0x84>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a15      	ldr	r2, [pc, #84]	; (80043b4 <TIM_OC4_SetConfig+0xcc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_OC4_SetConfig+0x84>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a14      	ldr	r2, [pc, #80]	; (80043b8 <TIM_OC4_SetConfig+0xd0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d109      	bne.n	8004380 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004372:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	019b      	lsls	r3, r3, #6
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	621a      	str	r2, [r3, #32]
}
 800439a:	bf00      	nop
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40012c00 	.word	0x40012c00
 80043ac:	40013400 	.word	0x40013400
 80043b0:	40014000 	.word	0x40014000
 80043b4:	40014400 	.word	0x40014400
 80043b8:	40014800 	.word	0x40014800

080043bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004400:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	041b      	lsls	r3, r3, #16
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a17      	ldr	r2, [pc, #92]	; (8004470 <TIM_OC5_SetConfig+0xb4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00f      	beq.n	8004436 <TIM_OC5_SetConfig+0x7a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a16      	ldr	r2, [pc, #88]	; (8004474 <TIM_OC5_SetConfig+0xb8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00b      	beq.n	8004436 <TIM_OC5_SetConfig+0x7a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a15      	ldr	r2, [pc, #84]	; (8004478 <TIM_OC5_SetConfig+0xbc>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d007      	beq.n	8004436 <TIM_OC5_SetConfig+0x7a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a14      	ldr	r2, [pc, #80]	; (800447c <TIM_OC5_SetConfig+0xc0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d003      	beq.n	8004436 <TIM_OC5_SetConfig+0x7a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a13      	ldr	r2, [pc, #76]	; (8004480 <TIM_OC5_SetConfig+0xc4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d109      	bne.n	800444a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	621a      	str	r2, [r3, #32]
}
 8004464:	bf00      	nop
 8004466:	371c      	adds	r7, #28
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	40012c00 	.word	0x40012c00
 8004474:	40013400 	.word	0x40013400
 8004478:	40014000 	.word	0x40014000
 800447c:	40014400 	.word	0x40014400
 8004480:	40014800 	.word	0x40014800

08004484 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	021b      	lsls	r3, r3, #8
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	051b      	lsls	r3, r3, #20
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a18      	ldr	r2, [pc, #96]	; (800453c <TIM_OC6_SetConfig+0xb8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00f      	beq.n	8004500 <TIM_OC6_SetConfig+0x7c>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a17      	ldr	r2, [pc, #92]	; (8004540 <TIM_OC6_SetConfig+0xbc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d00b      	beq.n	8004500 <TIM_OC6_SetConfig+0x7c>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a16      	ldr	r2, [pc, #88]	; (8004544 <TIM_OC6_SetConfig+0xc0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d007      	beq.n	8004500 <TIM_OC6_SetConfig+0x7c>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a15      	ldr	r2, [pc, #84]	; (8004548 <TIM_OC6_SetConfig+0xc4>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d003      	beq.n	8004500 <TIM_OC6_SetConfig+0x7c>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a14      	ldr	r2, [pc, #80]	; (800454c <TIM_OC6_SetConfig+0xc8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d109      	bne.n	8004514 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004506:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	029b      	lsls	r3, r3, #10
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	621a      	str	r2, [r3, #32]
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40012c00 	.word	0x40012c00
 8004540:	40013400 	.word	0x40013400
 8004544:	40014000 	.word	0x40014000
 8004548:	40014400 	.word	0x40014400
 800454c:	40014800 	.word	0x40014800

08004550 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	f023 0201 	bic.w	r2, r3, #1
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800457a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f023 030a 	bic.w	r3, r3, #10
 800458c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	621a      	str	r2, [r3, #32]
}
 80045a2:	bf00      	nop
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b087      	sub	sp, #28
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f023 0210 	bic.w	r2, r3, #16
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	031b      	lsls	r3, r3, #12
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	621a      	str	r2, [r3, #32]
}
 8004602:	bf00      	nop
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800460e:	b480      	push	{r7}
 8004610:	b085      	sub	sp, #20
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004624:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	f043 0307 	orr.w	r3, r3, #7
 8004630:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	609a      	str	r2, [r3, #8]
}
 8004638:	bf00      	nop
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800465e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	021a      	lsls	r2, r3, #8
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	431a      	orrs	r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4313      	orrs	r3, r2
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	609a      	str	r2, [r3, #8]
}
 8004678:	bf00      	nop
 800467a:	371c      	adds	r7, #28
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	2201      	movs	r2, #1
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a1a      	ldr	r2, [r3, #32]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	43db      	mvns	r3, r3
 80046a6:	401a      	ands	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a1a      	ldr	r2, [r3, #32]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 031f 	and.w	r3, r3, #31
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	fa01 f303 	lsl.w	r3, r1, r3
 80046bc:	431a      	orrs	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	621a      	str	r2, [r3, #32]
}
 80046c2:	bf00      	nop
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
	...

080046d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e068      	b.n	80047ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2e      	ldr	r2, [pc, #184]	; (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2d      	ldr	r2, [pc, #180]	; (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d108      	bne.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004722:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004734:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4313      	orrs	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a1e      	ldr	r2, [pc, #120]	; (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d01d      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475a:	d018      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a1b      	ldr	r2, [pc, #108]	; (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1a      	ldr	r2, [pc, #104]	; (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00e      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a18      	ldr	r2, [pc, #96]	; (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d009      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a13      	ldr	r2, [pc, #76]	; (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a14      	ldr	r2, [pc, #80]	; (80047dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d10c      	bne.n	80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	4313      	orrs	r3, r2
 800479e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40012c00 	.word	0x40012c00
 80047cc:	40013400 	.word	0x40013400
 80047d0:	40000400 	.word	0x40000400
 80047d4:	40000800 	.word	0x40000800
 80047d8:	40000c00 	.word	0x40000c00
 80047dc:	40014000 	.word	0x40014000

080047e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e040      	b.n	80048b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004832:	2b00      	cmp	r3, #0
 8004834:	d106      	bne.n	8004844 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fc fe64 	bl	800150c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2224      	movs	r2, #36	; 0x24
 8004848:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0201 	bic.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fae0 	bl	8004e28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f825 	bl	80048b8 <UART_SetConfig>
 800486e:	4603      	mov	r3, r0
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e01b      	b.n	80048b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fb5f 	bl	8004f6c <UART_CheckIdleState>
 80048ae:	4603      	mov	r3, r0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048bc:	b08a      	sub	sp, #40	; 0x28
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	431a      	orrs	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	4313      	orrs	r3, r2
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	4ba4      	ldr	r3, [pc, #656]	; (8004b78 <UART_SetConfig+0x2c0>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	6812      	ldr	r2, [r2, #0]
 80048ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048f0:	430b      	orrs	r3, r1
 80048f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a99      	ldr	r2, [pc, #612]	; (8004b7c <UART_SetConfig+0x2c4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d004      	beq.n	8004924 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004920:	4313      	orrs	r3, r2
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004934:	430a      	orrs	r2, r1
 8004936:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a90      	ldr	r2, [pc, #576]	; (8004b80 <UART_SetConfig+0x2c8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d126      	bne.n	8004990 <UART_SetConfig+0xd8>
 8004942:	4b90      	ldr	r3, [pc, #576]	; (8004b84 <UART_SetConfig+0x2cc>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004948:	f003 0303 	and.w	r3, r3, #3
 800494c:	2b03      	cmp	r3, #3
 800494e:	d81b      	bhi.n	8004988 <UART_SetConfig+0xd0>
 8004950:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <UART_SetConfig+0xa0>)
 8004952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004956:	bf00      	nop
 8004958:	08004969 	.word	0x08004969
 800495c:	08004979 	.word	0x08004979
 8004960:	08004971 	.word	0x08004971
 8004964:	08004981 	.word	0x08004981
 8004968:	2301      	movs	r3, #1
 800496a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496e:	e116      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004970:	2302      	movs	r3, #2
 8004972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004976:	e112      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004978:	2304      	movs	r3, #4
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497e:	e10e      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004980:	2308      	movs	r3, #8
 8004982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004986:	e10a      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004988:	2310      	movs	r3, #16
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498e:	e106      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a7c      	ldr	r2, [pc, #496]	; (8004b88 <UART_SetConfig+0x2d0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d138      	bne.n	8004a0c <UART_SetConfig+0x154>
 800499a:	4b7a      	ldr	r3, [pc, #488]	; (8004b84 <UART_SetConfig+0x2cc>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	f003 030c 	and.w	r3, r3, #12
 80049a4:	2b0c      	cmp	r3, #12
 80049a6:	d82d      	bhi.n	8004a04 <UART_SetConfig+0x14c>
 80049a8:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <UART_SetConfig+0xf8>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	080049e5 	.word	0x080049e5
 80049b4:	08004a05 	.word	0x08004a05
 80049b8:	08004a05 	.word	0x08004a05
 80049bc:	08004a05 	.word	0x08004a05
 80049c0:	080049f5 	.word	0x080049f5
 80049c4:	08004a05 	.word	0x08004a05
 80049c8:	08004a05 	.word	0x08004a05
 80049cc:	08004a05 	.word	0x08004a05
 80049d0:	080049ed 	.word	0x080049ed
 80049d4:	08004a05 	.word	0x08004a05
 80049d8:	08004a05 	.word	0x08004a05
 80049dc:	08004a05 	.word	0x08004a05
 80049e0:	080049fd 	.word	0x080049fd
 80049e4:	2300      	movs	r3, #0
 80049e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ea:	e0d8      	b.n	8004b9e <UART_SetConfig+0x2e6>
 80049ec:	2302      	movs	r3, #2
 80049ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049f2:	e0d4      	b.n	8004b9e <UART_SetConfig+0x2e6>
 80049f4:	2304      	movs	r3, #4
 80049f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049fa:	e0d0      	b.n	8004b9e <UART_SetConfig+0x2e6>
 80049fc:	2308      	movs	r3, #8
 80049fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a02:	e0cc      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004a04:	2310      	movs	r3, #16
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a0a:	e0c8      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a5e      	ldr	r2, [pc, #376]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d125      	bne.n	8004a62 <UART_SetConfig+0x1aa>
 8004a16:	4b5b      	ldr	r3, [pc, #364]	; (8004b84 <UART_SetConfig+0x2cc>)
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a20:	2b30      	cmp	r3, #48	; 0x30
 8004a22:	d016      	beq.n	8004a52 <UART_SetConfig+0x19a>
 8004a24:	2b30      	cmp	r3, #48	; 0x30
 8004a26:	d818      	bhi.n	8004a5a <UART_SetConfig+0x1a2>
 8004a28:	2b20      	cmp	r3, #32
 8004a2a:	d00a      	beq.n	8004a42 <UART_SetConfig+0x18a>
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d814      	bhi.n	8004a5a <UART_SetConfig+0x1a2>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <UART_SetConfig+0x182>
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d008      	beq.n	8004a4a <UART_SetConfig+0x192>
 8004a38:	e00f      	b.n	8004a5a <UART_SetConfig+0x1a2>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a40:	e0ad      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004a42:	2302      	movs	r3, #2
 8004a44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a48:	e0a9      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004a4a:	2304      	movs	r3, #4
 8004a4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a50:	e0a5      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004a52:	2308      	movs	r3, #8
 8004a54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a58:	e0a1      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004a5a:	2310      	movs	r3, #16
 8004a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a60:	e09d      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a4a      	ldr	r2, [pc, #296]	; (8004b90 <UART_SetConfig+0x2d8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d125      	bne.n	8004ab8 <UART_SetConfig+0x200>
 8004a6c:	4b45      	ldr	r3, [pc, #276]	; (8004b84 <UART_SetConfig+0x2cc>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a76:	2bc0      	cmp	r3, #192	; 0xc0
 8004a78:	d016      	beq.n	8004aa8 <UART_SetConfig+0x1f0>
 8004a7a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a7c:	d818      	bhi.n	8004ab0 <UART_SetConfig+0x1f8>
 8004a7e:	2b80      	cmp	r3, #128	; 0x80
 8004a80:	d00a      	beq.n	8004a98 <UART_SetConfig+0x1e0>
 8004a82:	2b80      	cmp	r3, #128	; 0x80
 8004a84:	d814      	bhi.n	8004ab0 <UART_SetConfig+0x1f8>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <UART_SetConfig+0x1d8>
 8004a8a:	2b40      	cmp	r3, #64	; 0x40
 8004a8c:	d008      	beq.n	8004aa0 <UART_SetConfig+0x1e8>
 8004a8e:	e00f      	b.n	8004ab0 <UART_SetConfig+0x1f8>
 8004a90:	2300      	movs	r3, #0
 8004a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a96:	e082      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a9e:	e07e      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa6:	e07a      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004aa8:	2308      	movs	r3, #8
 8004aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aae:	e076      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab6:	e072      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a35      	ldr	r2, [pc, #212]	; (8004b94 <UART_SetConfig+0x2dc>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d12a      	bne.n	8004b18 <UART_SetConfig+0x260>
 8004ac2:	4b30      	ldr	r3, [pc, #192]	; (8004b84 <UART_SetConfig+0x2cc>)
 8004ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004acc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ad0:	d01a      	beq.n	8004b08 <UART_SetConfig+0x250>
 8004ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ad6:	d81b      	bhi.n	8004b10 <UART_SetConfig+0x258>
 8004ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004adc:	d00c      	beq.n	8004af8 <UART_SetConfig+0x240>
 8004ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ae2:	d815      	bhi.n	8004b10 <UART_SetConfig+0x258>
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <UART_SetConfig+0x238>
 8004ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aec:	d008      	beq.n	8004b00 <UART_SetConfig+0x248>
 8004aee:	e00f      	b.n	8004b10 <UART_SetConfig+0x258>
 8004af0:	2300      	movs	r3, #0
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af6:	e052      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004af8:	2302      	movs	r3, #2
 8004afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afe:	e04e      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004b00:	2304      	movs	r3, #4
 8004b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b06:	e04a      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b0e:	e046      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004b10:	2310      	movs	r3, #16
 8004b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b16:	e042      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a17      	ldr	r2, [pc, #92]	; (8004b7c <UART_SetConfig+0x2c4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d13a      	bne.n	8004b98 <UART_SetConfig+0x2e0>
 8004b22:	4b18      	ldr	r3, [pc, #96]	; (8004b84 <UART_SetConfig+0x2cc>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b30:	d01a      	beq.n	8004b68 <UART_SetConfig+0x2b0>
 8004b32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b36:	d81b      	bhi.n	8004b70 <UART_SetConfig+0x2b8>
 8004b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b3c:	d00c      	beq.n	8004b58 <UART_SetConfig+0x2a0>
 8004b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b42:	d815      	bhi.n	8004b70 <UART_SetConfig+0x2b8>
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <UART_SetConfig+0x298>
 8004b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b4c:	d008      	beq.n	8004b60 <UART_SetConfig+0x2a8>
 8004b4e:	e00f      	b.n	8004b70 <UART_SetConfig+0x2b8>
 8004b50:	2300      	movs	r3, #0
 8004b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b56:	e022      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b5e:	e01e      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004b60:	2304      	movs	r3, #4
 8004b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b66:	e01a      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004b68:	2308      	movs	r3, #8
 8004b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6e:	e016      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004b70:	2310      	movs	r3, #16
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b76:	e012      	b.n	8004b9e <UART_SetConfig+0x2e6>
 8004b78:	efff69f3 	.word	0xefff69f3
 8004b7c:	40008000 	.word	0x40008000
 8004b80:	40013800 	.word	0x40013800
 8004b84:	40021000 	.word	0x40021000
 8004b88:	40004400 	.word	0x40004400
 8004b8c:	40004800 	.word	0x40004800
 8004b90:	40004c00 	.word	0x40004c00
 8004b94:	40005000 	.word	0x40005000
 8004b98:	2310      	movs	r3, #16
 8004b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a9f      	ldr	r2, [pc, #636]	; (8004e20 <UART_SetConfig+0x568>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d17a      	bne.n	8004c9e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d824      	bhi.n	8004bfa <UART_SetConfig+0x342>
 8004bb0:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <UART_SetConfig+0x300>)
 8004bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb6:	bf00      	nop
 8004bb8:	08004bdd 	.word	0x08004bdd
 8004bbc:	08004bfb 	.word	0x08004bfb
 8004bc0:	08004be5 	.word	0x08004be5
 8004bc4:	08004bfb 	.word	0x08004bfb
 8004bc8:	08004beb 	.word	0x08004beb
 8004bcc:	08004bfb 	.word	0x08004bfb
 8004bd0:	08004bfb 	.word	0x08004bfb
 8004bd4:	08004bfb 	.word	0x08004bfb
 8004bd8:	08004bf3 	.word	0x08004bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bdc:	f7fd fec8 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8004be0:	61f8      	str	r0, [r7, #28]
        break;
 8004be2:	e010      	b.n	8004c06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be4:	4b8f      	ldr	r3, [pc, #572]	; (8004e24 <UART_SetConfig+0x56c>)
 8004be6:	61fb      	str	r3, [r7, #28]
        break;
 8004be8:	e00d      	b.n	8004c06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bea:	f7fd fe29 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 8004bee:	61f8      	str	r0, [r7, #28]
        break;
 8004bf0:	e009      	b.n	8004c06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf6:	61fb      	str	r3, [r7, #28]
        break;
 8004bf8:	e005      	b.n	8004c06 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 80fb 	beq.w	8004e04 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	4613      	mov	r3, r2
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	4413      	add	r3, r2
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d305      	bcc.n	8004c2a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d903      	bls.n	8004c32 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c30:	e0e8      	b.n	8004e04 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	2200      	movs	r2, #0
 8004c36:	461c      	mov	r4, r3
 8004c38:	4615      	mov	r5, r2
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	022b      	lsls	r3, r5, #8
 8004c44:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c48:	0222      	lsls	r2, r4, #8
 8004c4a:	68f9      	ldr	r1, [r7, #12]
 8004c4c:	6849      	ldr	r1, [r1, #4]
 8004c4e:	0849      	lsrs	r1, r1, #1
 8004c50:	2000      	movs	r0, #0
 8004c52:	4688      	mov	r8, r1
 8004c54:	4681      	mov	r9, r0
 8004c56:	eb12 0a08 	adds.w	sl, r2, r8
 8004c5a:	eb43 0b09 	adc.w	fp, r3, r9
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	603b      	str	r3, [r7, #0]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c6c:	4650      	mov	r0, sl
 8004c6e:	4659      	mov	r1, fp
 8004c70:	f7fb ff78 	bl	8000b64 <__aeabi_uldivmod>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4613      	mov	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c82:	d308      	bcc.n	8004c96 <UART_SetConfig+0x3de>
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8a:	d204      	bcs.n	8004c96 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	60da      	str	r2, [r3, #12]
 8004c94:	e0b6      	b.n	8004e04 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c9c:	e0b2      	b.n	8004e04 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca6:	d15e      	bne.n	8004d66 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004ca8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d828      	bhi.n	8004d02 <UART_SetConfig+0x44a>
 8004cb0:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <UART_SetConfig+0x400>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004ce5 	.word	0x08004ce5
 8004cc0:	08004ced 	.word	0x08004ced
 8004cc4:	08004d03 	.word	0x08004d03
 8004cc8:	08004cf3 	.word	0x08004cf3
 8004ccc:	08004d03 	.word	0x08004d03
 8004cd0:	08004d03 	.word	0x08004d03
 8004cd4:	08004d03 	.word	0x08004d03
 8004cd8:	08004cfb 	.word	0x08004cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cdc:	f7fd fe48 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8004ce0:	61f8      	str	r0, [r7, #28]
        break;
 8004ce2:	e014      	b.n	8004d0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce4:	f7fd fe5a 	bl	800299c <HAL_RCC_GetPCLK2Freq>
 8004ce8:	61f8      	str	r0, [r7, #28]
        break;
 8004cea:	e010      	b.n	8004d0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cec:	4b4d      	ldr	r3, [pc, #308]	; (8004e24 <UART_SetConfig+0x56c>)
 8004cee:	61fb      	str	r3, [r7, #28]
        break;
 8004cf0:	e00d      	b.n	8004d0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf2:	f7fd fda5 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 8004cf6:	61f8      	str	r0, [r7, #28]
        break;
 8004cf8:	e009      	b.n	8004d0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cfe:	61fb      	str	r3, [r7, #28]
        break;
 8004d00:	e005      	b.n	8004d0e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d077      	beq.n	8004e04 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	005a      	lsls	r2, r3, #1
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	085b      	lsrs	r3, r3, #1
 8004d1e:	441a      	add	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	2b0f      	cmp	r3, #15
 8004d2e:	d916      	bls.n	8004d5e <UART_SetConfig+0x4a6>
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d36:	d212      	bcs.n	8004d5e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f023 030f 	bic.w	r3, r3, #15
 8004d40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	085b      	lsrs	r3, r3, #1
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	8afb      	ldrh	r3, [r7, #22]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	8afa      	ldrh	r2, [r7, #22]
 8004d5a:	60da      	str	r2, [r3, #12]
 8004d5c:	e052      	b.n	8004e04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d64:	e04e      	b.n	8004e04 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d827      	bhi.n	8004dbe <UART_SetConfig+0x506>
 8004d6e:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <UART_SetConfig+0x4bc>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004d99 	.word	0x08004d99
 8004d78:	08004da1 	.word	0x08004da1
 8004d7c:	08004da9 	.word	0x08004da9
 8004d80:	08004dbf 	.word	0x08004dbf
 8004d84:	08004daf 	.word	0x08004daf
 8004d88:	08004dbf 	.word	0x08004dbf
 8004d8c:	08004dbf 	.word	0x08004dbf
 8004d90:	08004dbf 	.word	0x08004dbf
 8004d94:	08004db7 	.word	0x08004db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d98:	f7fd fdea 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8004d9c:	61f8      	str	r0, [r7, #28]
        break;
 8004d9e:	e014      	b.n	8004dca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004da0:	f7fd fdfc 	bl	800299c <HAL_RCC_GetPCLK2Freq>
 8004da4:	61f8      	str	r0, [r7, #28]
        break;
 8004da6:	e010      	b.n	8004dca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004da8:	4b1e      	ldr	r3, [pc, #120]	; (8004e24 <UART_SetConfig+0x56c>)
 8004daa:	61fb      	str	r3, [r7, #28]
        break;
 8004dac:	e00d      	b.n	8004dca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dae:	f7fd fd47 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 8004db2:	61f8      	str	r0, [r7, #28]
        break;
 8004db4:	e009      	b.n	8004dca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dba:	61fb      	str	r3, [r7, #28]
        break;
 8004dbc:	e005      	b.n	8004dca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004dc8:	bf00      	nop
    }

    if (pclk != 0U)
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d019      	beq.n	8004e04 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	085a      	lsrs	r2, r3, #1
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	441a      	add	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	2b0f      	cmp	r3, #15
 8004de8:	d909      	bls.n	8004dfe <UART_SetConfig+0x546>
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df0:	d205      	bcs.n	8004dfe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60da      	str	r2, [r3, #12]
 8004dfc:	e002      	b.n	8004e04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3728      	adds	r7, #40	; 0x28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e1e:	bf00      	nop
 8004e20:	40008000 	.word	0x40008000
 8004e24:	00f42400 	.word	0x00f42400

08004e28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	f003 0310 	and.w	r3, r3, #16
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	f003 0320 	and.w	r3, r3, #32
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01a      	beq.n	8004f3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f26:	d10a      	bne.n	8004f3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	605a      	str	r2, [r3, #4]
  }
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b098      	sub	sp, #96	; 0x60
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f7c:	f7fc fc02 	bl	8001784 <HAL_GetTick>
 8004f80:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d12e      	bne.n	8004fee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f88c 	bl	80050bc <UART_WaitOnFlagUntilTimeout>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d021      	beq.n	8004fee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb2:	e853 3f00 	ldrex	r3, [r3]
 8004fb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fbe:	653b      	str	r3, [r7, #80]	; 0x50
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8004fca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fd0:	e841 2300 	strex	r3, r2, [r1]
 8004fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1e6      	bne.n	8004faa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e062      	b.n	80050b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d149      	bne.n	8005090 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ffc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005004:	2200      	movs	r2, #0
 8005006:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f856 	bl	80050bc <UART_WaitOnFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d03c      	beq.n	8005090 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	623b      	str	r3, [r7, #32]
   return(result);
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800502a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005034:	633b      	str	r3, [r7, #48]	; 0x30
 8005036:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005038:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800503a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800503c:	e841 2300 	strex	r3, r2, [r1]
 8005040:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e6      	bne.n	8005016 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3308      	adds	r3, #8
 800504e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	e853 3f00 	ldrex	r3, [r3]
 8005056:	60fb      	str	r3, [r7, #12]
   return(result);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0301 	bic.w	r3, r3, #1
 800505e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3308      	adds	r3, #8
 8005066:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005068:	61fa      	str	r2, [r7, #28]
 800506a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	69b9      	ldr	r1, [r7, #24]
 800506e:	69fa      	ldr	r2, [r7, #28]
 8005070:	e841 2300 	strex	r3, r2, [r1]
 8005074:	617b      	str	r3, [r7, #20]
   return(result);
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e5      	bne.n	8005048 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e011      	b.n	80050b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2220      	movs	r2, #32
 8005094:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3758      	adds	r7, #88	; 0x58
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	4613      	mov	r3, r2
 80050ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050cc:	e049      	b.n	8005162 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d4:	d045      	beq.n	8005162 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d6:	f7fc fb55 	bl	8001784 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d302      	bcc.n	80050ec <UART_WaitOnFlagUntilTimeout+0x30>
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e048      	b.n	8005182 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0304 	and.w	r3, r3, #4
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d031      	beq.n	8005162 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b08      	cmp	r3, #8
 800510a:	d110      	bne.n	800512e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2208      	movs	r2, #8
 8005112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f838 	bl	800518a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2208      	movs	r2, #8
 800511e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e029      	b.n	8005182 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513c:	d111      	bne.n	8005162 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005146:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f81e 	bl	800518a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e00f      	b.n	8005182 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69da      	ldr	r2, [r3, #28]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4013      	ands	r3, r2
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	429a      	cmp	r2, r3
 8005170:	bf0c      	ite	eq
 8005172:	2301      	moveq	r3, #1
 8005174:	2300      	movne	r3, #0
 8005176:	b2db      	uxtb	r3, r3
 8005178:	461a      	mov	r2, r3
 800517a:	79fb      	ldrb	r3, [r7, #7]
 800517c:	429a      	cmp	r2, r3
 800517e:	d0a6      	beq.n	80050ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800518a:	b480      	push	{r7}
 800518c:	b095      	sub	sp, #84	; 0x54
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519a:	e853 3f00 	ldrex	r3, [r3]
 800519e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	461a      	mov	r2, r3
 80051ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b0:	643b      	str	r3, [r7, #64]	; 0x40
 80051b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051b8:	e841 2300 	strex	r3, r2, [r1]
 80051bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e6      	bne.n	8005192 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3308      	adds	r3, #8
 80051ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	e853 3f00 	ldrex	r3, [r3]
 80051d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f023 0301 	bic.w	r3, r3, #1
 80051da:	64bb      	str	r3, [r7, #72]	; 0x48
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3308      	adds	r3, #8
 80051e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ec:	e841 2300 	strex	r3, r2, [r1]
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e5      	bne.n	80051c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d118      	bne.n	8005232 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	60bb      	str	r3, [r7, #8]
   return(result);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f023 0310 	bic.w	r3, r3, #16
 8005214:	647b      	str	r3, [r7, #68]	; 0x44
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800521e:	61bb      	str	r3, [r7, #24]
 8005220:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	6979      	ldr	r1, [r7, #20]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	613b      	str	r3, [r7, #16]
   return(result);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e6      	bne.n	8005200 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005246:	bf00      	nop
 8005248:	3754      	adds	r7, #84	; 0x54
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <memset>:
 8005252:	4402      	add	r2, r0
 8005254:	4603      	mov	r3, r0
 8005256:	4293      	cmp	r3, r2
 8005258:	d100      	bne.n	800525c <memset+0xa>
 800525a:	4770      	bx	lr
 800525c:	f803 1b01 	strb.w	r1, [r3], #1
 8005260:	e7f9      	b.n	8005256 <memset+0x4>
	...

08005264 <__errno>:
 8005264:	4b01      	ldr	r3, [pc, #4]	; (800526c <__errno+0x8>)
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	20000058 	.word	0x20000058

08005270 <__libc_init_array>:
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	4d0d      	ldr	r5, [pc, #52]	; (80052a8 <__libc_init_array+0x38>)
 8005274:	4c0d      	ldr	r4, [pc, #52]	; (80052ac <__libc_init_array+0x3c>)
 8005276:	1b64      	subs	r4, r4, r5
 8005278:	10a4      	asrs	r4, r4, #2
 800527a:	2600      	movs	r6, #0
 800527c:	42a6      	cmp	r6, r4
 800527e:	d109      	bne.n	8005294 <__libc_init_array+0x24>
 8005280:	4d0b      	ldr	r5, [pc, #44]	; (80052b0 <__libc_init_array+0x40>)
 8005282:	4c0c      	ldr	r4, [pc, #48]	; (80052b4 <__libc_init_array+0x44>)
 8005284:	f001 fa60 	bl	8006748 <_init>
 8005288:	1b64      	subs	r4, r4, r5
 800528a:	10a4      	asrs	r4, r4, #2
 800528c:	2600      	movs	r6, #0
 800528e:	42a6      	cmp	r6, r4
 8005290:	d105      	bne.n	800529e <__libc_init_array+0x2e>
 8005292:	bd70      	pop	{r4, r5, r6, pc}
 8005294:	f855 3b04 	ldr.w	r3, [r5], #4
 8005298:	4798      	blx	r3
 800529a:	3601      	adds	r6, #1
 800529c:	e7ee      	b.n	800527c <__libc_init_array+0xc>
 800529e:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a2:	4798      	blx	r3
 80052a4:	3601      	adds	r6, #1
 80052a6:	e7f2      	b.n	800528e <__libc_init_array+0x1e>
 80052a8:	080069b8 	.word	0x080069b8
 80052ac:	080069b8 	.word	0x080069b8
 80052b0:	080069b8 	.word	0x080069b8
 80052b4:	080069bc 	.word	0x080069bc

080052b8 <exp>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	ed2d 8b02 	vpush	{d8}
 80052be:	ec55 4b10 	vmov	r4, r5, d0
 80052c2:	f000 fa2d 	bl	8005720 <__ieee754_exp>
 80052c6:	eeb0 8a40 	vmov.f32	s16, s0
 80052ca:	eef0 8a60 	vmov.f32	s17, s1
 80052ce:	ec45 4b10 	vmov	d0, r4, r5
 80052d2:	f000 f891 	bl	80053f8 <finite>
 80052d6:	b168      	cbz	r0, 80052f4 <exp+0x3c>
 80052d8:	a317      	add	r3, pc, #92	; (adr r3, 8005338 <exp+0x80>)
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	4620      	mov	r0, r4
 80052e0:	4629      	mov	r1, r5
 80052e2:	f7fb fbbd 	bl	8000a60 <__aeabi_dcmpgt>
 80052e6:	b160      	cbz	r0, 8005302 <exp+0x4a>
 80052e8:	f7ff ffbc 	bl	8005264 <__errno>
 80052ec:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8005328 <exp+0x70>
 80052f0:	2322      	movs	r3, #34	; 0x22
 80052f2:	6003      	str	r3, [r0, #0]
 80052f4:	eeb0 0a48 	vmov.f32	s0, s16
 80052f8:	eef0 0a68 	vmov.f32	s1, s17
 80052fc:	ecbd 8b02 	vpop	{d8}
 8005300:	bd38      	pop	{r3, r4, r5, pc}
 8005302:	a30f      	add	r3, pc, #60	; (adr r3, 8005340 <exp+0x88>)
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	4620      	mov	r0, r4
 800530a:	4629      	mov	r1, r5
 800530c:	f7fb fb8a 	bl	8000a24 <__aeabi_dcmplt>
 8005310:	2800      	cmp	r0, #0
 8005312:	d0ef      	beq.n	80052f4 <exp+0x3c>
 8005314:	f7ff ffa6 	bl	8005264 <__errno>
 8005318:	2322      	movs	r3, #34	; 0x22
 800531a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8005330 <exp+0x78>
 800531e:	6003      	str	r3, [r0, #0]
 8005320:	e7e8      	b.n	80052f4 <exp+0x3c>
 8005322:	bf00      	nop
 8005324:	f3af 8000 	nop.w
 8005328:	00000000 	.word	0x00000000
 800532c:	7ff00000 	.word	0x7ff00000
	...
 8005338:	fefa39ef 	.word	0xfefa39ef
 800533c:	40862e42 	.word	0x40862e42
 8005340:	d52d3051 	.word	0xd52d3051
 8005344:	c0874910 	.word	0xc0874910

08005348 <sin>:
 8005348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800534a:	ec53 2b10 	vmov	r2, r3, d0
 800534e:	4828      	ldr	r0, [pc, #160]	; (80053f0 <sin+0xa8>)
 8005350:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005354:	4281      	cmp	r1, r0
 8005356:	dc07      	bgt.n	8005368 <sin+0x20>
 8005358:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80053e8 <sin+0xa0>
 800535c:	2000      	movs	r0, #0
 800535e:	b005      	add	sp, #20
 8005360:	f85d eb04 	ldr.w	lr, [sp], #4
 8005364:	f000 b91c 	b.w	80055a0 <__kernel_sin>
 8005368:	4822      	ldr	r0, [pc, #136]	; (80053f4 <sin+0xac>)
 800536a:	4281      	cmp	r1, r0
 800536c:	dd09      	ble.n	8005382 <sin+0x3a>
 800536e:	ee10 0a10 	vmov	r0, s0
 8005372:	4619      	mov	r1, r3
 8005374:	f7fa ff2c 	bl	80001d0 <__aeabi_dsub>
 8005378:	ec41 0b10 	vmov	d0, r0, r1
 800537c:	b005      	add	sp, #20
 800537e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005382:	4668      	mov	r0, sp
 8005384:	f000 fb50 	bl	8005a28 <__ieee754_rem_pio2>
 8005388:	f000 0003 	and.w	r0, r0, #3
 800538c:	2801      	cmp	r0, #1
 800538e:	d00c      	beq.n	80053aa <sin+0x62>
 8005390:	2802      	cmp	r0, #2
 8005392:	d011      	beq.n	80053b8 <sin+0x70>
 8005394:	b9f0      	cbnz	r0, 80053d4 <sin+0x8c>
 8005396:	ed9d 1b02 	vldr	d1, [sp, #8]
 800539a:	ed9d 0b00 	vldr	d0, [sp]
 800539e:	2001      	movs	r0, #1
 80053a0:	f000 f8fe 	bl	80055a0 <__kernel_sin>
 80053a4:	ec51 0b10 	vmov	r0, r1, d0
 80053a8:	e7e6      	b.n	8005378 <sin+0x30>
 80053aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80053ae:	ed9d 0b00 	vldr	d0, [sp]
 80053b2:	f000 f82d 	bl	8005410 <__kernel_cos>
 80053b6:	e7f5      	b.n	80053a4 <sin+0x5c>
 80053b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80053bc:	ed9d 0b00 	vldr	d0, [sp]
 80053c0:	2001      	movs	r0, #1
 80053c2:	f000 f8ed 	bl	80055a0 <__kernel_sin>
 80053c6:	ec53 2b10 	vmov	r2, r3, d0
 80053ca:	ee10 0a10 	vmov	r0, s0
 80053ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80053d2:	e7d1      	b.n	8005378 <sin+0x30>
 80053d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80053d8:	ed9d 0b00 	vldr	d0, [sp]
 80053dc:	f000 f818 	bl	8005410 <__kernel_cos>
 80053e0:	e7f1      	b.n	80053c6 <sin+0x7e>
 80053e2:	bf00      	nop
 80053e4:	f3af 8000 	nop.w
	...
 80053f0:	3fe921fb 	.word	0x3fe921fb
 80053f4:	7fefffff 	.word	0x7fefffff

080053f8 <finite>:
 80053f8:	b082      	sub	sp, #8
 80053fa:	ed8d 0b00 	vstr	d0, [sp]
 80053fe:	9801      	ldr	r0, [sp, #4]
 8005400:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005404:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005408:	0fc0      	lsrs	r0, r0, #31
 800540a:	b002      	add	sp, #8
 800540c:	4770      	bx	lr
	...

08005410 <__kernel_cos>:
 8005410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005414:	ec57 6b10 	vmov	r6, r7, d0
 8005418:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800541c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005420:	ed8d 1b00 	vstr	d1, [sp]
 8005424:	da07      	bge.n	8005436 <__kernel_cos+0x26>
 8005426:	ee10 0a10 	vmov	r0, s0
 800542a:	4639      	mov	r1, r7
 800542c:	f7fb fb22 	bl	8000a74 <__aeabi_d2iz>
 8005430:	2800      	cmp	r0, #0
 8005432:	f000 8088 	beq.w	8005546 <__kernel_cos+0x136>
 8005436:	4632      	mov	r2, r6
 8005438:	463b      	mov	r3, r7
 800543a:	4630      	mov	r0, r6
 800543c:	4639      	mov	r1, r7
 800543e:	f7fb f87f 	bl	8000540 <__aeabi_dmul>
 8005442:	4b51      	ldr	r3, [pc, #324]	; (8005588 <__kernel_cos+0x178>)
 8005444:	2200      	movs	r2, #0
 8005446:	4604      	mov	r4, r0
 8005448:	460d      	mov	r5, r1
 800544a:	f7fb f879 	bl	8000540 <__aeabi_dmul>
 800544e:	a340      	add	r3, pc, #256	; (adr r3, 8005550 <__kernel_cos+0x140>)
 8005450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005454:	4682      	mov	sl, r0
 8005456:	468b      	mov	fp, r1
 8005458:	4620      	mov	r0, r4
 800545a:	4629      	mov	r1, r5
 800545c:	f7fb f870 	bl	8000540 <__aeabi_dmul>
 8005460:	a33d      	add	r3, pc, #244	; (adr r3, 8005558 <__kernel_cos+0x148>)
 8005462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005466:	f7fa feb5 	bl	80001d4 <__adddf3>
 800546a:	4622      	mov	r2, r4
 800546c:	462b      	mov	r3, r5
 800546e:	f7fb f867 	bl	8000540 <__aeabi_dmul>
 8005472:	a33b      	add	r3, pc, #236	; (adr r3, 8005560 <__kernel_cos+0x150>)
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	f7fa feaa 	bl	80001d0 <__aeabi_dsub>
 800547c:	4622      	mov	r2, r4
 800547e:	462b      	mov	r3, r5
 8005480:	f7fb f85e 	bl	8000540 <__aeabi_dmul>
 8005484:	a338      	add	r3, pc, #224	; (adr r3, 8005568 <__kernel_cos+0x158>)
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	f7fa fea3 	bl	80001d4 <__adddf3>
 800548e:	4622      	mov	r2, r4
 8005490:	462b      	mov	r3, r5
 8005492:	f7fb f855 	bl	8000540 <__aeabi_dmul>
 8005496:	a336      	add	r3, pc, #216	; (adr r3, 8005570 <__kernel_cos+0x160>)
 8005498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549c:	f7fa fe98 	bl	80001d0 <__aeabi_dsub>
 80054a0:	4622      	mov	r2, r4
 80054a2:	462b      	mov	r3, r5
 80054a4:	f7fb f84c 	bl	8000540 <__aeabi_dmul>
 80054a8:	a333      	add	r3, pc, #204	; (adr r3, 8005578 <__kernel_cos+0x168>)
 80054aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ae:	f7fa fe91 	bl	80001d4 <__adddf3>
 80054b2:	4622      	mov	r2, r4
 80054b4:	462b      	mov	r3, r5
 80054b6:	f7fb f843 	bl	8000540 <__aeabi_dmul>
 80054ba:	4622      	mov	r2, r4
 80054bc:	462b      	mov	r3, r5
 80054be:	f7fb f83f 	bl	8000540 <__aeabi_dmul>
 80054c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054c6:	4604      	mov	r4, r0
 80054c8:	460d      	mov	r5, r1
 80054ca:	4630      	mov	r0, r6
 80054cc:	4639      	mov	r1, r7
 80054ce:	f7fb f837 	bl	8000540 <__aeabi_dmul>
 80054d2:	460b      	mov	r3, r1
 80054d4:	4602      	mov	r2, r0
 80054d6:	4629      	mov	r1, r5
 80054d8:	4620      	mov	r0, r4
 80054da:	f7fa fe79 	bl	80001d0 <__aeabi_dsub>
 80054de:	4b2b      	ldr	r3, [pc, #172]	; (800558c <__kernel_cos+0x17c>)
 80054e0:	4598      	cmp	r8, r3
 80054e2:	4606      	mov	r6, r0
 80054e4:	460f      	mov	r7, r1
 80054e6:	dc10      	bgt.n	800550a <__kernel_cos+0xfa>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4650      	mov	r0, sl
 80054ee:	4659      	mov	r1, fp
 80054f0:	f7fa fe6e 	bl	80001d0 <__aeabi_dsub>
 80054f4:	460b      	mov	r3, r1
 80054f6:	4926      	ldr	r1, [pc, #152]	; (8005590 <__kernel_cos+0x180>)
 80054f8:	4602      	mov	r2, r0
 80054fa:	2000      	movs	r0, #0
 80054fc:	f7fa fe68 	bl	80001d0 <__aeabi_dsub>
 8005500:	ec41 0b10 	vmov	d0, r0, r1
 8005504:	b003      	add	sp, #12
 8005506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800550a:	4b22      	ldr	r3, [pc, #136]	; (8005594 <__kernel_cos+0x184>)
 800550c:	4920      	ldr	r1, [pc, #128]	; (8005590 <__kernel_cos+0x180>)
 800550e:	4598      	cmp	r8, r3
 8005510:	bfcc      	ite	gt
 8005512:	4d21      	ldrgt	r5, [pc, #132]	; (8005598 <__kernel_cos+0x188>)
 8005514:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005518:	2400      	movs	r4, #0
 800551a:	4622      	mov	r2, r4
 800551c:	462b      	mov	r3, r5
 800551e:	2000      	movs	r0, #0
 8005520:	f7fa fe56 	bl	80001d0 <__aeabi_dsub>
 8005524:	4622      	mov	r2, r4
 8005526:	4680      	mov	r8, r0
 8005528:	4689      	mov	r9, r1
 800552a:	462b      	mov	r3, r5
 800552c:	4650      	mov	r0, sl
 800552e:	4659      	mov	r1, fp
 8005530:	f7fa fe4e 	bl	80001d0 <__aeabi_dsub>
 8005534:	4632      	mov	r2, r6
 8005536:	463b      	mov	r3, r7
 8005538:	f7fa fe4a 	bl	80001d0 <__aeabi_dsub>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4640      	mov	r0, r8
 8005542:	4649      	mov	r1, r9
 8005544:	e7da      	b.n	80054fc <__kernel_cos+0xec>
 8005546:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005580 <__kernel_cos+0x170>
 800554a:	e7db      	b.n	8005504 <__kernel_cos+0xf4>
 800554c:	f3af 8000 	nop.w
 8005550:	be8838d4 	.word	0xbe8838d4
 8005554:	bda8fae9 	.word	0xbda8fae9
 8005558:	bdb4b1c4 	.word	0xbdb4b1c4
 800555c:	3e21ee9e 	.word	0x3e21ee9e
 8005560:	809c52ad 	.word	0x809c52ad
 8005564:	3e927e4f 	.word	0x3e927e4f
 8005568:	19cb1590 	.word	0x19cb1590
 800556c:	3efa01a0 	.word	0x3efa01a0
 8005570:	16c15177 	.word	0x16c15177
 8005574:	3f56c16c 	.word	0x3f56c16c
 8005578:	5555554c 	.word	0x5555554c
 800557c:	3fa55555 	.word	0x3fa55555
 8005580:	00000000 	.word	0x00000000
 8005584:	3ff00000 	.word	0x3ff00000
 8005588:	3fe00000 	.word	0x3fe00000
 800558c:	3fd33332 	.word	0x3fd33332
 8005590:	3ff00000 	.word	0x3ff00000
 8005594:	3fe90000 	.word	0x3fe90000
 8005598:	3fd20000 	.word	0x3fd20000
 800559c:	00000000 	.word	0x00000000

080055a0 <__kernel_sin>:
 80055a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a4:	ed2d 8b04 	vpush	{d8-d9}
 80055a8:	eeb0 8a41 	vmov.f32	s16, s2
 80055ac:	eef0 8a61 	vmov.f32	s17, s3
 80055b0:	ec55 4b10 	vmov	r4, r5, d0
 80055b4:	b083      	sub	sp, #12
 80055b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80055ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80055be:	9001      	str	r0, [sp, #4]
 80055c0:	da06      	bge.n	80055d0 <__kernel_sin+0x30>
 80055c2:	ee10 0a10 	vmov	r0, s0
 80055c6:	4629      	mov	r1, r5
 80055c8:	f7fb fa54 	bl	8000a74 <__aeabi_d2iz>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d051      	beq.n	8005674 <__kernel_sin+0xd4>
 80055d0:	4622      	mov	r2, r4
 80055d2:	462b      	mov	r3, r5
 80055d4:	4620      	mov	r0, r4
 80055d6:	4629      	mov	r1, r5
 80055d8:	f7fa ffb2 	bl	8000540 <__aeabi_dmul>
 80055dc:	4682      	mov	sl, r0
 80055de:	468b      	mov	fp, r1
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4620      	mov	r0, r4
 80055e6:	4629      	mov	r1, r5
 80055e8:	f7fa ffaa 	bl	8000540 <__aeabi_dmul>
 80055ec:	a341      	add	r3, pc, #260	; (adr r3, 80056f4 <__kernel_sin+0x154>)
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	4680      	mov	r8, r0
 80055f4:	4689      	mov	r9, r1
 80055f6:	4650      	mov	r0, sl
 80055f8:	4659      	mov	r1, fp
 80055fa:	f7fa ffa1 	bl	8000540 <__aeabi_dmul>
 80055fe:	a33f      	add	r3, pc, #252	; (adr r3, 80056fc <__kernel_sin+0x15c>)
 8005600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005604:	f7fa fde4 	bl	80001d0 <__aeabi_dsub>
 8005608:	4652      	mov	r2, sl
 800560a:	465b      	mov	r3, fp
 800560c:	f7fa ff98 	bl	8000540 <__aeabi_dmul>
 8005610:	a33c      	add	r3, pc, #240	; (adr r3, 8005704 <__kernel_sin+0x164>)
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	f7fa fddd 	bl	80001d4 <__adddf3>
 800561a:	4652      	mov	r2, sl
 800561c:	465b      	mov	r3, fp
 800561e:	f7fa ff8f 	bl	8000540 <__aeabi_dmul>
 8005622:	a33a      	add	r3, pc, #232	; (adr r3, 800570c <__kernel_sin+0x16c>)
 8005624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005628:	f7fa fdd2 	bl	80001d0 <__aeabi_dsub>
 800562c:	4652      	mov	r2, sl
 800562e:	465b      	mov	r3, fp
 8005630:	f7fa ff86 	bl	8000540 <__aeabi_dmul>
 8005634:	a337      	add	r3, pc, #220	; (adr r3, 8005714 <__kernel_sin+0x174>)
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	f7fa fdcb 	bl	80001d4 <__adddf3>
 800563e:	9b01      	ldr	r3, [sp, #4]
 8005640:	4606      	mov	r6, r0
 8005642:	460f      	mov	r7, r1
 8005644:	b9eb      	cbnz	r3, 8005682 <__kernel_sin+0xe2>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4650      	mov	r0, sl
 800564c:	4659      	mov	r1, fp
 800564e:	f7fa ff77 	bl	8000540 <__aeabi_dmul>
 8005652:	a325      	add	r3, pc, #148	; (adr r3, 80056e8 <__kernel_sin+0x148>)
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f7fa fdba 	bl	80001d0 <__aeabi_dsub>
 800565c:	4642      	mov	r2, r8
 800565e:	464b      	mov	r3, r9
 8005660:	f7fa ff6e 	bl	8000540 <__aeabi_dmul>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	4620      	mov	r0, r4
 800566a:	4629      	mov	r1, r5
 800566c:	f7fa fdb2 	bl	80001d4 <__adddf3>
 8005670:	4604      	mov	r4, r0
 8005672:	460d      	mov	r5, r1
 8005674:	ec45 4b10 	vmov	d0, r4, r5
 8005678:	b003      	add	sp, #12
 800567a:	ecbd 8b04 	vpop	{d8-d9}
 800567e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005682:	4b1b      	ldr	r3, [pc, #108]	; (80056f0 <__kernel_sin+0x150>)
 8005684:	ec51 0b18 	vmov	r0, r1, d8
 8005688:	2200      	movs	r2, #0
 800568a:	f7fa ff59 	bl	8000540 <__aeabi_dmul>
 800568e:	4632      	mov	r2, r6
 8005690:	ec41 0b19 	vmov	d9, r0, r1
 8005694:	463b      	mov	r3, r7
 8005696:	4640      	mov	r0, r8
 8005698:	4649      	mov	r1, r9
 800569a:	f7fa ff51 	bl	8000540 <__aeabi_dmul>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	ec51 0b19 	vmov	r0, r1, d9
 80056a6:	f7fa fd93 	bl	80001d0 <__aeabi_dsub>
 80056aa:	4652      	mov	r2, sl
 80056ac:	465b      	mov	r3, fp
 80056ae:	f7fa ff47 	bl	8000540 <__aeabi_dmul>
 80056b2:	ec53 2b18 	vmov	r2, r3, d8
 80056b6:	f7fa fd8b 	bl	80001d0 <__aeabi_dsub>
 80056ba:	a30b      	add	r3, pc, #44	; (adr r3, 80056e8 <__kernel_sin+0x148>)
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	4606      	mov	r6, r0
 80056c2:	460f      	mov	r7, r1
 80056c4:	4640      	mov	r0, r8
 80056c6:	4649      	mov	r1, r9
 80056c8:	f7fa ff3a 	bl	8000540 <__aeabi_dmul>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4630      	mov	r0, r6
 80056d2:	4639      	mov	r1, r7
 80056d4:	f7fa fd7e 	bl	80001d4 <__adddf3>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4620      	mov	r0, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	f7fa fd76 	bl	80001d0 <__aeabi_dsub>
 80056e4:	e7c4      	b.n	8005670 <__kernel_sin+0xd0>
 80056e6:	bf00      	nop
 80056e8:	55555549 	.word	0x55555549
 80056ec:	3fc55555 	.word	0x3fc55555
 80056f0:	3fe00000 	.word	0x3fe00000
 80056f4:	5acfd57c 	.word	0x5acfd57c
 80056f8:	3de5d93a 	.word	0x3de5d93a
 80056fc:	8a2b9ceb 	.word	0x8a2b9ceb
 8005700:	3e5ae5e6 	.word	0x3e5ae5e6
 8005704:	57b1fe7d 	.word	0x57b1fe7d
 8005708:	3ec71de3 	.word	0x3ec71de3
 800570c:	19c161d5 	.word	0x19c161d5
 8005710:	3f2a01a0 	.word	0x3f2a01a0
 8005714:	1110f8a6 	.word	0x1110f8a6
 8005718:	3f811111 	.word	0x3f811111
 800571c:	00000000 	.word	0x00000000

08005720 <__ieee754_exp>:
 8005720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005724:	ec55 4b10 	vmov	r4, r5, d0
 8005728:	49b5      	ldr	r1, [pc, #724]	; (8005a00 <__ieee754_exp+0x2e0>)
 800572a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800572e:	428a      	cmp	r2, r1
 8005730:	ed2d 8b04 	vpush	{d8-d9}
 8005734:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8005738:	d93b      	bls.n	80057b2 <__ieee754_exp+0x92>
 800573a:	49b2      	ldr	r1, [pc, #712]	; (8005a04 <__ieee754_exp+0x2e4>)
 800573c:	428a      	cmp	r2, r1
 800573e:	d916      	bls.n	800576e <__ieee754_exp+0x4e>
 8005740:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005744:	4323      	orrs	r3, r4
 8005746:	ee10 2a10 	vmov	r2, s0
 800574a:	d007      	beq.n	800575c <__ieee754_exp+0x3c>
 800574c:	462b      	mov	r3, r5
 800574e:	4620      	mov	r0, r4
 8005750:	4629      	mov	r1, r5
 8005752:	f7fa fd3f 	bl	80001d4 <__adddf3>
 8005756:	4604      	mov	r4, r0
 8005758:	460d      	mov	r5, r1
 800575a:	e002      	b.n	8005762 <__ieee754_exp+0x42>
 800575c:	b10e      	cbz	r6, 8005762 <__ieee754_exp+0x42>
 800575e:	2400      	movs	r4, #0
 8005760:	2500      	movs	r5, #0
 8005762:	ecbd 8b04 	vpop	{d8-d9}
 8005766:	ec45 4b10 	vmov	d0, r4, r5
 800576a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576e:	a38e      	add	r3, pc, #568	; (adr r3, 80059a8 <__ieee754_exp+0x288>)
 8005770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005774:	ee10 0a10 	vmov	r0, s0
 8005778:	4629      	mov	r1, r5
 800577a:	f7fb f971 	bl	8000a60 <__aeabi_dcmpgt>
 800577e:	4607      	mov	r7, r0
 8005780:	b130      	cbz	r0, 8005790 <__ieee754_exp+0x70>
 8005782:	ecbd 8b04 	vpop	{d8-d9}
 8005786:	2000      	movs	r0, #0
 8005788:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800578c:	f000 bb82 	b.w	8005e94 <__math_oflow>
 8005790:	a387      	add	r3, pc, #540	; (adr r3, 80059b0 <__ieee754_exp+0x290>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	4620      	mov	r0, r4
 8005798:	4629      	mov	r1, r5
 800579a:	f7fb f943 	bl	8000a24 <__aeabi_dcmplt>
 800579e:	2800      	cmp	r0, #0
 80057a0:	f000 808b 	beq.w	80058ba <__ieee754_exp+0x19a>
 80057a4:	ecbd 8b04 	vpop	{d8-d9}
 80057a8:	4638      	mov	r0, r7
 80057aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057ae:	f000 bb68 	b.w	8005e82 <__math_uflow>
 80057b2:	4b95      	ldr	r3, [pc, #596]	; (8005a08 <__ieee754_exp+0x2e8>)
 80057b4:	429a      	cmp	r2, r3
 80057b6:	f240 80ac 	bls.w	8005912 <__ieee754_exp+0x1f2>
 80057ba:	4b94      	ldr	r3, [pc, #592]	; (8005a0c <__ieee754_exp+0x2ec>)
 80057bc:	429a      	cmp	r2, r3
 80057be:	d87c      	bhi.n	80058ba <__ieee754_exp+0x19a>
 80057c0:	4b93      	ldr	r3, [pc, #588]	; (8005a10 <__ieee754_exp+0x2f0>)
 80057c2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	ee10 0a10 	vmov	r0, s0
 80057ce:	4629      	mov	r1, r5
 80057d0:	f7fa fcfe 	bl	80001d0 <__aeabi_dsub>
 80057d4:	4b8f      	ldr	r3, [pc, #572]	; (8005a14 <__ieee754_exp+0x2f4>)
 80057d6:	00f7      	lsls	r7, r6, #3
 80057d8:	443b      	add	r3, r7
 80057da:	ed93 7b00 	vldr	d7, [r3]
 80057de:	f1c6 0a01 	rsb	sl, r6, #1
 80057e2:	4680      	mov	r8, r0
 80057e4:	4689      	mov	r9, r1
 80057e6:	ebaa 0a06 	sub.w	sl, sl, r6
 80057ea:	eeb0 8a47 	vmov.f32	s16, s14
 80057ee:	eef0 8a67 	vmov.f32	s17, s15
 80057f2:	ec53 2b18 	vmov	r2, r3, d8
 80057f6:	4640      	mov	r0, r8
 80057f8:	4649      	mov	r1, r9
 80057fa:	f7fa fce9 	bl	80001d0 <__aeabi_dsub>
 80057fe:	4604      	mov	r4, r0
 8005800:	460d      	mov	r5, r1
 8005802:	4622      	mov	r2, r4
 8005804:	462b      	mov	r3, r5
 8005806:	4620      	mov	r0, r4
 8005808:	4629      	mov	r1, r5
 800580a:	f7fa fe99 	bl	8000540 <__aeabi_dmul>
 800580e:	a36a      	add	r3, pc, #424	; (adr r3, 80059b8 <__ieee754_exp+0x298>)
 8005810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005814:	4606      	mov	r6, r0
 8005816:	460f      	mov	r7, r1
 8005818:	f7fa fe92 	bl	8000540 <__aeabi_dmul>
 800581c:	a368      	add	r3, pc, #416	; (adr r3, 80059c0 <__ieee754_exp+0x2a0>)
 800581e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005822:	f7fa fcd5 	bl	80001d0 <__aeabi_dsub>
 8005826:	4632      	mov	r2, r6
 8005828:	463b      	mov	r3, r7
 800582a:	f7fa fe89 	bl	8000540 <__aeabi_dmul>
 800582e:	a366      	add	r3, pc, #408	; (adr r3, 80059c8 <__ieee754_exp+0x2a8>)
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	f7fa fcce 	bl	80001d4 <__adddf3>
 8005838:	4632      	mov	r2, r6
 800583a:	463b      	mov	r3, r7
 800583c:	f7fa fe80 	bl	8000540 <__aeabi_dmul>
 8005840:	a363      	add	r3, pc, #396	; (adr r3, 80059d0 <__ieee754_exp+0x2b0>)
 8005842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005846:	f7fa fcc3 	bl	80001d0 <__aeabi_dsub>
 800584a:	4632      	mov	r2, r6
 800584c:	463b      	mov	r3, r7
 800584e:	f7fa fe77 	bl	8000540 <__aeabi_dmul>
 8005852:	a361      	add	r3, pc, #388	; (adr r3, 80059d8 <__ieee754_exp+0x2b8>)
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	f7fa fcbc 	bl	80001d4 <__adddf3>
 800585c:	4632      	mov	r2, r6
 800585e:	463b      	mov	r3, r7
 8005860:	f7fa fe6e 	bl	8000540 <__aeabi_dmul>
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	4620      	mov	r0, r4
 800586a:	4629      	mov	r1, r5
 800586c:	f7fa fcb0 	bl	80001d0 <__aeabi_dsub>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4606      	mov	r6, r0
 8005876:	460f      	mov	r7, r1
 8005878:	4620      	mov	r0, r4
 800587a:	4629      	mov	r1, r5
 800587c:	f7fa fe60 	bl	8000540 <__aeabi_dmul>
 8005880:	ec41 0b19 	vmov	d9, r0, r1
 8005884:	f1ba 0f00 	cmp.w	sl, #0
 8005888:	d15d      	bne.n	8005946 <__ieee754_exp+0x226>
 800588a:	2200      	movs	r2, #0
 800588c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005890:	4630      	mov	r0, r6
 8005892:	4639      	mov	r1, r7
 8005894:	f7fa fc9c 	bl	80001d0 <__aeabi_dsub>
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	ec51 0b19 	vmov	r0, r1, d9
 80058a0:	f7fa ff78 	bl	8000794 <__aeabi_ddiv>
 80058a4:	4622      	mov	r2, r4
 80058a6:	462b      	mov	r3, r5
 80058a8:	f7fa fc92 	bl	80001d0 <__aeabi_dsub>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	2000      	movs	r0, #0
 80058b2:	4959      	ldr	r1, [pc, #356]	; (8005a18 <__ieee754_exp+0x2f8>)
 80058b4:	f7fa fc8c 	bl	80001d0 <__aeabi_dsub>
 80058b8:	e74d      	b.n	8005756 <__ieee754_exp+0x36>
 80058ba:	4b58      	ldr	r3, [pc, #352]	; (8005a1c <__ieee754_exp+0x2fc>)
 80058bc:	4620      	mov	r0, r4
 80058be:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80058c2:	4629      	mov	r1, r5
 80058c4:	a346      	add	r3, pc, #280	; (adr r3, 80059e0 <__ieee754_exp+0x2c0>)
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	f7fa fe39 	bl	8000540 <__aeabi_dmul>
 80058ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80058d2:	f7fa fc7f 	bl	80001d4 <__adddf3>
 80058d6:	f7fb f8cd 	bl	8000a74 <__aeabi_d2iz>
 80058da:	4682      	mov	sl, r0
 80058dc:	f7fa fdc6 	bl	800046c <__aeabi_i2d>
 80058e0:	a341      	add	r3, pc, #260	; (adr r3, 80059e8 <__ieee754_exp+0x2c8>)
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	4606      	mov	r6, r0
 80058e8:	460f      	mov	r7, r1
 80058ea:	f7fa fe29 	bl	8000540 <__aeabi_dmul>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	4620      	mov	r0, r4
 80058f4:	4629      	mov	r1, r5
 80058f6:	f7fa fc6b 	bl	80001d0 <__aeabi_dsub>
 80058fa:	a33d      	add	r3, pc, #244	; (adr r3, 80059f0 <__ieee754_exp+0x2d0>)
 80058fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005900:	4680      	mov	r8, r0
 8005902:	4689      	mov	r9, r1
 8005904:	4630      	mov	r0, r6
 8005906:	4639      	mov	r1, r7
 8005908:	f7fa fe1a 	bl	8000540 <__aeabi_dmul>
 800590c:	ec41 0b18 	vmov	d8, r0, r1
 8005910:	e76f      	b.n	80057f2 <__ieee754_exp+0xd2>
 8005912:	4b43      	ldr	r3, [pc, #268]	; (8005a20 <__ieee754_exp+0x300>)
 8005914:	429a      	cmp	r2, r3
 8005916:	d811      	bhi.n	800593c <__ieee754_exp+0x21c>
 8005918:	a337      	add	r3, pc, #220	; (adr r3, 80059f8 <__ieee754_exp+0x2d8>)
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	ee10 0a10 	vmov	r0, s0
 8005922:	4629      	mov	r1, r5
 8005924:	f7fa fc56 	bl	80001d4 <__adddf3>
 8005928:	4b3b      	ldr	r3, [pc, #236]	; (8005a18 <__ieee754_exp+0x2f8>)
 800592a:	2200      	movs	r2, #0
 800592c:	f7fb f898 	bl	8000a60 <__aeabi_dcmpgt>
 8005930:	b138      	cbz	r0, 8005942 <__ieee754_exp+0x222>
 8005932:	4b39      	ldr	r3, [pc, #228]	; (8005a18 <__ieee754_exp+0x2f8>)
 8005934:	2200      	movs	r2, #0
 8005936:	4620      	mov	r0, r4
 8005938:	4629      	mov	r1, r5
 800593a:	e70a      	b.n	8005752 <__ieee754_exp+0x32>
 800593c:	f04f 0a00 	mov.w	sl, #0
 8005940:	e75f      	b.n	8005802 <__ieee754_exp+0xe2>
 8005942:	4682      	mov	sl, r0
 8005944:	e75d      	b.n	8005802 <__ieee754_exp+0xe2>
 8005946:	4632      	mov	r2, r6
 8005948:	463b      	mov	r3, r7
 800594a:	2000      	movs	r0, #0
 800594c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005950:	f7fa fc3e 	bl	80001d0 <__aeabi_dsub>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	ec51 0b19 	vmov	r0, r1, d9
 800595c:	f7fa ff1a 	bl	8000794 <__aeabi_ddiv>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	ec51 0b18 	vmov	r0, r1, d8
 8005968:	f7fa fc32 	bl	80001d0 <__aeabi_dsub>
 800596c:	4642      	mov	r2, r8
 800596e:	464b      	mov	r3, r9
 8005970:	f7fa fc2e 	bl	80001d0 <__aeabi_dsub>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	2000      	movs	r0, #0
 800597a:	4927      	ldr	r1, [pc, #156]	; (8005a18 <__ieee754_exp+0x2f8>)
 800597c:	f7fa fc28 	bl	80001d0 <__aeabi_dsub>
 8005980:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8005984:	4592      	cmp	sl, r2
 8005986:	db02      	blt.n	800598e <__ieee754_exp+0x26e>
 8005988:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800598c:	e6e3      	b.n	8005756 <__ieee754_exp+0x36>
 800598e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8005992:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8005996:	2200      	movs	r2, #0
 8005998:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800599c:	f7fa fdd0 	bl	8000540 <__aeabi_dmul>
 80059a0:	e6d9      	b.n	8005756 <__ieee754_exp+0x36>
 80059a2:	bf00      	nop
 80059a4:	f3af 8000 	nop.w
 80059a8:	fefa39ef 	.word	0xfefa39ef
 80059ac:	40862e42 	.word	0x40862e42
 80059b0:	d52d3051 	.word	0xd52d3051
 80059b4:	c0874910 	.word	0xc0874910
 80059b8:	72bea4d0 	.word	0x72bea4d0
 80059bc:	3e663769 	.word	0x3e663769
 80059c0:	c5d26bf1 	.word	0xc5d26bf1
 80059c4:	3ebbbd41 	.word	0x3ebbbd41
 80059c8:	af25de2c 	.word	0xaf25de2c
 80059cc:	3f11566a 	.word	0x3f11566a
 80059d0:	16bebd93 	.word	0x16bebd93
 80059d4:	3f66c16c 	.word	0x3f66c16c
 80059d8:	5555553e 	.word	0x5555553e
 80059dc:	3fc55555 	.word	0x3fc55555
 80059e0:	652b82fe 	.word	0x652b82fe
 80059e4:	3ff71547 	.word	0x3ff71547
 80059e8:	fee00000 	.word	0xfee00000
 80059ec:	3fe62e42 	.word	0x3fe62e42
 80059f0:	35793c76 	.word	0x35793c76
 80059f4:	3dea39ef 	.word	0x3dea39ef
 80059f8:	8800759c 	.word	0x8800759c
 80059fc:	7e37e43c 	.word	0x7e37e43c
 8005a00:	40862e41 	.word	0x40862e41
 8005a04:	7fefffff 	.word	0x7fefffff
 8005a08:	3fd62e42 	.word	0x3fd62e42
 8005a0c:	3ff0a2b1 	.word	0x3ff0a2b1
 8005a10:	080067b8 	.word	0x080067b8
 8005a14:	080067c8 	.word	0x080067c8
 8005a18:	3ff00000 	.word	0x3ff00000
 8005a1c:	080067a8 	.word	0x080067a8
 8005a20:	3defffff 	.word	0x3defffff
 8005a24:	00000000 	.word	0x00000000

08005a28 <__ieee754_rem_pio2>:
 8005a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	ed2d 8b02 	vpush	{d8}
 8005a30:	ec55 4b10 	vmov	r4, r5, d0
 8005a34:	4bca      	ldr	r3, [pc, #808]	; (8005d60 <__ieee754_rem_pio2+0x338>)
 8005a36:	b08b      	sub	sp, #44	; 0x2c
 8005a38:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005a3c:	4598      	cmp	r8, r3
 8005a3e:	4682      	mov	sl, r0
 8005a40:	9502      	str	r5, [sp, #8]
 8005a42:	dc08      	bgt.n	8005a56 <__ieee754_rem_pio2+0x2e>
 8005a44:	2200      	movs	r2, #0
 8005a46:	2300      	movs	r3, #0
 8005a48:	ed80 0b00 	vstr	d0, [r0]
 8005a4c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005a50:	f04f 0b00 	mov.w	fp, #0
 8005a54:	e028      	b.n	8005aa8 <__ieee754_rem_pio2+0x80>
 8005a56:	4bc3      	ldr	r3, [pc, #780]	; (8005d64 <__ieee754_rem_pio2+0x33c>)
 8005a58:	4598      	cmp	r8, r3
 8005a5a:	dc78      	bgt.n	8005b4e <__ieee754_rem_pio2+0x126>
 8005a5c:	9b02      	ldr	r3, [sp, #8]
 8005a5e:	4ec2      	ldr	r6, [pc, #776]	; (8005d68 <__ieee754_rem_pio2+0x340>)
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	ee10 0a10 	vmov	r0, s0
 8005a66:	a3b0      	add	r3, pc, #704	; (adr r3, 8005d28 <__ieee754_rem_pio2+0x300>)
 8005a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	dd39      	ble.n	8005ae4 <__ieee754_rem_pio2+0xbc>
 8005a70:	f7fa fbae 	bl	80001d0 <__aeabi_dsub>
 8005a74:	45b0      	cmp	r8, r6
 8005a76:	4604      	mov	r4, r0
 8005a78:	460d      	mov	r5, r1
 8005a7a:	d01b      	beq.n	8005ab4 <__ieee754_rem_pio2+0x8c>
 8005a7c:	a3ac      	add	r3, pc, #688	; (adr r3, 8005d30 <__ieee754_rem_pio2+0x308>)
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	f7fa fba5 	bl	80001d0 <__aeabi_dsub>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	e9ca 2300 	strd	r2, r3, [sl]
 8005a8e:	4620      	mov	r0, r4
 8005a90:	4629      	mov	r1, r5
 8005a92:	f7fa fb9d 	bl	80001d0 <__aeabi_dsub>
 8005a96:	a3a6      	add	r3, pc, #664	; (adr r3, 8005d30 <__ieee754_rem_pio2+0x308>)
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	f7fa fb98 	bl	80001d0 <__aeabi_dsub>
 8005aa0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005aa4:	f04f 0b01 	mov.w	fp, #1
 8005aa8:	4658      	mov	r0, fp
 8005aaa:	b00b      	add	sp, #44	; 0x2c
 8005aac:	ecbd 8b02 	vpop	{d8}
 8005ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab4:	a3a0      	add	r3, pc, #640	; (adr r3, 8005d38 <__ieee754_rem_pio2+0x310>)
 8005ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aba:	f7fa fb89 	bl	80001d0 <__aeabi_dsub>
 8005abe:	a3a0      	add	r3, pc, #640	; (adr r3, 8005d40 <__ieee754_rem_pio2+0x318>)
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	460d      	mov	r5, r1
 8005ac8:	f7fa fb82 	bl	80001d0 <__aeabi_dsub>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	e9ca 2300 	strd	r2, r3, [sl]
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	f7fa fb7a 	bl	80001d0 <__aeabi_dsub>
 8005adc:	a398      	add	r3, pc, #608	; (adr r3, 8005d40 <__ieee754_rem_pio2+0x318>)
 8005ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae2:	e7db      	b.n	8005a9c <__ieee754_rem_pio2+0x74>
 8005ae4:	f7fa fb76 	bl	80001d4 <__adddf3>
 8005ae8:	45b0      	cmp	r8, r6
 8005aea:	4604      	mov	r4, r0
 8005aec:	460d      	mov	r5, r1
 8005aee:	d016      	beq.n	8005b1e <__ieee754_rem_pio2+0xf6>
 8005af0:	a38f      	add	r3, pc, #572	; (adr r3, 8005d30 <__ieee754_rem_pio2+0x308>)
 8005af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af6:	f7fa fb6d 	bl	80001d4 <__adddf3>
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	e9ca 2300 	strd	r2, r3, [sl]
 8005b02:	4620      	mov	r0, r4
 8005b04:	4629      	mov	r1, r5
 8005b06:	f7fa fb63 	bl	80001d0 <__aeabi_dsub>
 8005b0a:	a389      	add	r3, pc, #548	; (adr r3, 8005d30 <__ieee754_rem_pio2+0x308>)
 8005b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b10:	f7fa fb60 	bl	80001d4 <__adddf3>
 8005b14:	f04f 3bff 	mov.w	fp, #4294967295
 8005b18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005b1c:	e7c4      	b.n	8005aa8 <__ieee754_rem_pio2+0x80>
 8005b1e:	a386      	add	r3, pc, #536	; (adr r3, 8005d38 <__ieee754_rem_pio2+0x310>)
 8005b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b24:	f7fa fb56 	bl	80001d4 <__adddf3>
 8005b28:	a385      	add	r3, pc, #532	; (adr r3, 8005d40 <__ieee754_rem_pio2+0x318>)
 8005b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2e:	4604      	mov	r4, r0
 8005b30:	460d      	mov	r5, r1
 8005b32:	f7fa fb4f 	bl	80001d4 <__adddf3>
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	e9ca 2300 	strd	r2, r3, [sl]
 8005b3e:	4620      	mov	r0, r4
 8005b40:	4629      	mov	r1, r5
 8005b42:	f7fa fb45 	bl	80001d0 <__aeabi_dsub>
 8005b46:	a37e      	add	r3, pc, #504	; (adr r3, 8005d40 <__ieee754_rem_pio2+0x318>)
 8005b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4c:	e7e0      	b.n	8005b10 <__ieee754_rem_pio2+0xe8>
 8005b4e:	4b87      	ldr	r3, [pc, #540]	; (8005d6c <__ieee754_rem_pio2+0x344>)
 8005b50:	4598      	cmp	r8, r3
 8005b52:	f300 80d8 	bgt.w	8005d06 <__ieee754_rem_pio2+0x2de>
 8005b56:	f000 f96d 	bl	8005e34 <fabs>
 8005b5a:	ec55 4b10 	vmov	r4, r5, d0
 8005b5e:	ee10 0a10 	vmov	r0, s0
 8005b62:	a379      	add	r3, pc, #484	; (adr r3, 8005d48 <__ieee754_rem_pio2+0x320>)
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	4629      	mov	r1, r5
 8005b6a:	f7fa fce9 	bl	8000540 <__aeabi_dmul>
 8005b6e:	4b80      	ldr	r3, [pc, #512]	; (8005d70 <__ieee754_rem_pio2+0x348>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	f7fa fb2f 	bl	80001d4 <__adddf3>
 8005b76:	f7fa ff7d 	bl	8000a74 <__aeabi_d2iz>
 8005b7a:	4683      	mov	fp, r0
 8005b7c:	f7fa fc76 	bl	800046c <__aeabi_i2d>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	ec43 2b18 	vmov	d8, r2, r3
 8005b88:	a367      	add	r3, pc, #412	; (adr r3, 8005d28 <__ieee754_rem_pio2+0x300>)
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f7fa fcd7 	bl	8000540 <__aeabi_dmul>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4620      	mov	r0, r4
 8005b98:	4629      	mov	r1, r5
 8005b9a:	f7fa fb19 	bl	80001d0 <__aeabi_dsub>
 8005b9e:	a364      	add	r3, pc, #400	; (adr r3, 8005d30 <__ieee754_rem_pio2+0x308>)
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	460f      	mov	r7, r1
 8005ba8:	ec51 0b18 	vmov	r0, r1, d8
 8005bac:	f7fa fcc8 	bl	8000540 <__aeabi_dmul>
 8005bb0:	f1bb 0f1f 	cmp.w	fp, #31
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	460d      	mov	r5, r1
 8005bb8:	dc0d      	bgt.n	8005bd6 <__ieee754_rem_pio2+0x1ae>
 8005bba:	4b6e      	ldr	r3, [pc, #440]	; (8005d74 <__ieee754_rem_pio2+0x34c>)
 8005bbc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc4:	4543      	cmp	r3, r8
 8005bc6:	d006      	beq.n	8005bd6 <__ieee754_rem_pio2+0x1ae>
 8005bc8:	4622      	mov	r2, r4
 8005bca:	462b      	mov	r3, r5
 8005bcc:	4630      	mov	r0, r6
 8005bce:	4639      	mov	r1, r7
 8005bd0:	f7fa fafe 	bl	80001d0 <__aeabi_dsub>
 8005bd4:	e00e      	b.n	8005bf4 <__ieee754_rem_pio2+0x1cc>
 8005bd6:	462b      	mov	r3, r5
 8005bd8:	4622      	mov	r2, r4
 8005bda:	4630      	mov	r0, r6
 8005bdc:	4639      	mov	r1, r7
 8005bde:	f7fa faf7 	bl	80001d0 <__aeabi_dsub>
 8005be2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005be6:	9303      	str	r3, [sp, #12]
 8005be8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005bec:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005bf0:	2b10      	cmp	r3, #16
 8005bf2:	dc02      	bgt.n	8005bfa <__ieee754_rem_pio2+0x1d2>
 8005bf4:	e9ca 0100 	strd	r0, r1, [sl]
 8005bf8:	e039      	b.n	8005c6e <__ieee754_rem_pio2+0x246>
 8005bfa:	a34f      	add	r3, pc, #316	; (adr r3, 8005d38 <__ieee754_rem_pio2+0x310>)
 8005bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c00:	ec51 0b18 	vmov	r0, r1, d8
 8005c04:	f7fa fc9c 	bl	8000540 <__aeabi_dmul>
 8005c08:	4604      	mov	r4, r0
 8005c0a:	460d      	mov	r5, r1
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4630      	mov	r0, r6
 8005c12:	4639      	mov	r1, r7
 8005c14:	f7fa fadc 	bl	80001d0 <__aeabi_dsub>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4680      	mov	r8, r0
 8005c1e:	4689      	mov	r9, r1
 8005c20:	4630      	mov	r0, r6
 8005c22:	4639      	mov	r1, r7
 8005c24:	f7fa fad4 	bl	80001d0 <__aeabi_dsub>
 8005c28:	4622      	mov	r2, r4
 8005c2a:	462b      	mov	r3, r5
 8005c2c:	f7fa fad0 	bl	80001d0 <__aeabi_dsub>
 8005c30:	a343      	add	r3, pc, #268	; (adr r3, 8005d40 <__ieee754_rem_pio2+0x318>)
 8005c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c36:	4604      	mov	r4, r0
 8005c38:	460d      	mov	r5, r1
 8005c3a:	ec51 0b18 	vmov	r0, r1, d8
 8005c3e:	f7fa fc7f 	bl	8000540 <__aeabi_dmul>
 8005c42:	4622      	mov	r2, r4
 8005c44:	462b      	mov	r3, r5
 8005c46:	f7fa fac3 	bl	80001d0 <__aeabi_dsub>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4604      	mov	r4, r0
 8005c50:	460d      	mov	r5, r1
 8005c52:	4640      	mov	r0, r8
 8005c54:	4649      	mov	r1, r9
 8005c56:	f7fa fabb 	bl	80001d0 <__aeabi_dsub>
 8005c5a:	9a03      	ldr	r2, [sp, #12]
 8005c5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b31      	cmp	r3, #49	; 0x31
 8005c64:	dc24      	bgt.n	8005cb0 <__ieee754_rem_pio2+0x288>
 8005c66:	e9ca 0100 	strd	r0, r1, [sl]
 8005c6a:	4646      	mov	r6, r8
 8005c6c:	464f      	mov	r7, r9
 8005c6e:	e9da 8900 	ldrd	r8, r9, [sl]
 8005c72:	4630      	mov	r0, r6
 8005c74:	4642      	mov	r2, r8
 8005c76:	464b      	mov	r3, r9
 8005c78:	4639      	mov	r1, r7
 8005c7a:	f7fa faa9 	bl	80001d0 <__aeabi_dsub>
 8005c7e:	462b      	mov	r3, r5
 8005c80:	4622      	mov	r2, r4
 8005c82:	f7fa faa5 	bl	80001d0 <__aeabi_dsub>
 8005c86:	9b02      	ldr	r3, [sp, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005c8e:	f6bf af0b 	bge.w	8005aa8 <__ieee754_rem_pio2+0x80>
 8005c92:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005c96:	f8ca 3004 	str.w	r3, [sl, #4]
 8005c9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c9e:	f8ca 8000 	str.w	r8, [sl]
 8005ca2:	f8ca 0008 	str.w	r0, [sl, #8]
 8005ca6:	f8ca 300c 	str.w	r3, [sl, #12]
 8005caa:	f1cb 0b00 	rsb	fp, fp, #0
 8005cae:	e6fb      	b.n	8005aa8 <__ieee754_rem_pio2+0x80>
 8005cb0:	a327      	add	r3, pc, #156	; (adr r3, 8005d50 <__ieee754_rem_pio2+0x328>)
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	ec51 0b18 	vmov	r0, r1, d8
 8005cba:	f7fa fc41 	bl	8000540 <__aeabi_dmul>
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	460d      	mov	r5, r1
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4640      	mov	r0, r8
 8005cc8:	4649      	mov	r1, r9
 8005cca:	f7fa fa81 	bl	80001d0 <__aeabi_dsub>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	460f      	mov	r7, r1
 8005cd6:	4640      	mov	r0, r8
 8005cd8:	4649      	mov	r1, r9
 8005cda:	f7fa fa79 	bl	80001d0 <__aeabi_dsub>
 8005cde:	4622      	mov	r2, r4
 8005ce0:	462b      	mov	r3, r5
 8005ce2:	f7fa fa75 	bl	80001d0 <__aeabi_dsub>
 8005ce6:	a31c      	add	r3, pc, #112	; (adr r3, 8005d58 <__ieee754_rem_pio2+0x330>)
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	4604      	mov	r4, r0
 8005cee:	460d      	mov	r5, r1
 8005cf0:	ec51 0b18 	vmov	r0, r1, d8
 8005cf4:	f7fa fc24 	bl	8000540 <__aeabi_dmul>
 8005cf8:	4622      	mov	r2, r4
 8005cfa:	462b      	mov	r3, r5
 8005cfc:	f7fa fa68 	bl	80001d0 <__aeabi_dsub>
 8005d00:	4604      	mov	r4, r0
 8005d02:	460d      	mov	r5, r1
 8005d04:	e760      	b.n	8005bc8 <__ieee754_rem_pio2+0x1a0>
 8005d06:	4b1c      	ldr	r3, [pc, #112]	; (8005d78 <__ieee754_rem_pio2+0x350>)
 8005d08:	4598      	cmp	r8, r3
 8005d0a:	dd37      	ble.n	8005d7c <__ieee754_rem_pio2+0x354>
 8005d0c:	ee10 2a10 	vmov	r2, s0
 8005d10:	462b      	mov	r3, r5
 8005d12:	4620      	mov	r0, r4
 8005d14:	4629      	mov	r1, r5
 8005d16:	f7fa fa5b 	bl	80001d0 <__aeabi_dsub>
 8005d1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005d1e:	e9ca 0100 	strd	r0, r1, [sl]
 8005d22:	e695      	b.n	8005a50 <__ieee754_rem_pio2+0x28>
 8005d24:	f3af 8000 	nop.w
 8005d28:	54400000 	.word	0x54400000
 8005d2c:	3ff921fb 	.word	0x3ff921fb
 8005d30:	1a626331 	.word	0x1a626331
 8005d34:	3dd0b461 	.word	0x3dd0b461
 8005d38:	1a600000 	.word	0x1a600000
 8005d3c:	3dd0b461 	.word	0x3dd0b461
 8005d40:	2e037073 	.word	0x2e037073
 8005d44:	3ba3198a 	.word	0x3ba3198a
 8005d48:	6dc9c883 	.word	0x6dc9c883
 8005d4c:	3fe45f30 	.word	0x3fe45f30
 8005d50:	2e000000 	.word	0x2e000000
 8005d54:	3ba3198a 	.word	0x3ba3198a
 8005d58:	252049c1 	.word	0x252049c1
 8005d5c:	397b839a 	.word	0x397b839a
 8005d60:	3fe921fb 	.word	0x3fe921fb
 8005d64:	4002d97b 	.word	0x4002d97b
 8005d68:	3ff921fb 	.word	0x3ff921fb
 8005d6c:	413921fb 	.word	0x413921fb
 8005d70:	3fe00000 	.word	0x3fe00000
 8005d74:	080067d8 	.word	0x080067d8
 8005d78:	7fefffff 	.word	0x7fefffff
 8005d7c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8005d80:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8005d84:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8005d88:	4620      	mov	r0, r4
 8005d8a:	460d      	mov	r5, r1
 8005d8c:	f7fa fe72 	bl	8000a74 <__aeabi_d2iz>
 8005d90:	f7fa fb6c 	bl	800046c <__aeabi_i2d>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4620      	mov	r0, r4
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005da0:	f7fa fa16 	bl	80001d0 <__aeabi_dsub>
 8005da4:	4b21      	ldr	r3, [pc, #132]	; (8005e2c <__ieee754_rem_pio2+0x404>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	f7fa fbca 	bl	8000540 <__aeabi_dmul>
 8005dac:	460d      	mov	r5, r1
 8005dae:	4604      	mov	r4, r0
 8005db0:	f7fa fe60 	bl	8000a74 <__aeabi_d2iz>
 8005db4:	f7fa fb5a 	bl	800046c <__aeabi_i2d>
 8005db8:	4602      	mov	r2, r0
 8005dba:	460b      	mov	r3, r1
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	4629      	mov	r1, r5
 8005dc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005dc4:	f7fa fa04 	bl	80001d0 <__aeabi_dsub>
 8005dc8:	4b18      	ldr	r3, [pc, #96]	; (8005e2c <__ieee754_rem_pio2+0x404>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f7fa fbb8 	bl	8000540 <__aeabi_dmul>
 8005dd0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005dd4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8005dd8:	2703      	movs	r7, #3
 8005dda:	2400      	movs	r4, #0
 8005ddc:	2500      	movs	r5, #0
 8005dde:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8005de2:	4622      	mov	r2, r4
 8005de4:	462b      	mov	r3, r5
 8005de6:	46b9      	mov	r9, r7
 8005de8:	3f01      	subs	r7, #1
 8005dea:	f7fa fe11 	bl	8000a10 <__aeabi_dcmpeq>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d1f5      	bne.n	8005dde <__ieee754_rem_pio2+0x3b6>
 8005df2:	4b0f      	ldr	r3, [pc, #60]	; (8005e30 <__ieee754_rem_pio2+0x408>)
 8005df4:	9301      	str	r3, [sp, #4]
 8005df6:	2302      	movs	r3, #2
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	4632      	mov	r2, r6
 8005dfc:	464b      	mov	r3, r9
 8005dfe:	4651      	mov	r1, sl
 8005e00:	a804      	add	r0, sp, #16
 8005e02:	f000 f851 	bl	8005ea8 <__kernel_rem_pio2>
 8005e06:	9b02      	ldr	r3, [sp, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	4683      	mov	fp, r0
 8005e0c:	f6bf ae4c 	bge.w	8005aa8 <__ieee754_rem_pio2+0x80>
 8005e10:	e9da 2100 	ldrd	r2, r1, [sl]
 8005e14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e18:	e9ca 2300 	strd	r2, r3, [sl]
 8005e1c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005e20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e24:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005e28:	e73f      	b.n	8005caa <__ieee754_rem_pio2+0x282>
 8005e2a:	bf00      	nop
 8005e2c:	41700000 	.word	0x41700000
 8005e30:	08006858 	.word	0x08006858

08005e34 <fabs>:
 8005e34:	ec51 0b10 	vmov	r0, r1, d0
 8005e38:	ee10 2a10 	vmov	r2, s0
 8005e3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e40:	ec43 2b10 	vmov	d0, r2, r3
 8005e44:	4770      	bx	lr

08005e46 <with_errno>:
 8005e46:	b570      	push	{r4, r5, r6, lr}
 8005e48:	4604      	mov	r4, r0
 8005e4a:	460d      	mov	r5, r1
 8005e4c:	4616      	mov	r6, r2
 8005e4e:	f7ff fa09 	bl	8005264 <__errno>
 8005e52:	4629      	mov	r1, r5
 8005e54:	6006      	str	r6, [r0, #0]
 8005e56:	4620      	mov	r0, r4
 8005e58:	bd70      	pop	{r4, r5, r6, pc}

08005e5a <xflow>:
 8005e5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e5c:	4614      	mov	r4, r2
 8005e5e:	461d      	mov	r5, r3
 8005e60:	b108      	cbz	r0, 8005e66 <xflow+0xc>
 8005e62:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e66:	e9cd 2300 	strd	r2, r3, [sp]
 8005e6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e6e:	4620      	mov	r0, r4
 8005e70:	4629      	mov	r1, r5
 8005e72:	f7fa fb65 	bl	8000540 <__aeabi_dmul>
 8005e76:	2222      	movs	r2, #34	; 0x22
 8005e78:	b003      	add	sp, #12
 8005e7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e7e:	f7ff bfe2 	b.w	8005e46 <with_errno>

08005e82 <__math_uflow>:
 8005e82:	b508      	push	{r3, lr}
 8005e84:	2200      	movs	r2, #0
 8005e86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005e8a:	f7ff ffe6 	bl	8005e5a <xflow>
 8005e8e:	ec41 0b10 	vmov	d0, r0, r1
 8005e92:	bd08      	pop	{r3, pc}

08005e94 <__math_oflow>:
 8005e94:	b508      	push	{r3, lr}
 8005e96:	2200      	movs	r2, #0
 8005e98:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005e9c:	f7ff ffdd 	bl	8005e5a <xflow>
 8005ea0:	ec41 0b10 	vmov	d0, r0, r1
 8005ea4:	bd08      	pop	{r3, pc}
	...

08005ea8 <__kernel_rem_pio2>:
 8005ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eac:	ed2d 8b02 	vpush	{d8}
 8005eb0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005eb4:	f112 0f14 	cmn.w	r2, #20
 8005eb8:	9306      	str	r3, [sp, #24]
 8005eba:	9104      	str	r1, [sp, #16]
 8005ebc:	4bc2      	ldr	r3, [pc, #776]	; (80061c8 <__kernel_rem_pio2+0x320>)
 8005ebe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005ec0:	9009      	str	r0, [sp, #36]	; 0x24
 8005ec2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	9b06      	ldr	r3, [sp, #24]
 8005eca:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ece:	bfa8      	it	ge
 8005ed0:	1ed4      	subge	r4, r2, #3
 8005ed2:	9305      	str	r3, [sp, #20]
 8005ed4:	bfb2      	itee	lt
 8005ed6:	2400      	movlt	r4, #0
 8005ed8:	2318      	movge	r3, #24
 8005eda:	fb94 f4f3 	sdivge	r4, r4, r3
 8005ede:	f06f 0317 	mvn.w	r3, #23
 8005ee2:	fb04 3303 	mla	r3, r4, r3, r3
 8005ee6:	eb03 0a02 	add.w	sl, r3, r2
 8005eea:	9b00      	ldr	r3, [sp, #0]
 8005eec:	9a05      	ldr	r2, [sp, #20]
 8005eee:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80061b8 <__kernel_rem_pio2+0x310>
 8005ef2:	eb03 0802 	add.w	r8, r3, r2
 8005ef6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005ef8:	1aa7      	subs	r7, r4, r2
 8005efa:	ae20      	add	r6, sp, #128	; 0x80
 8005efc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005f00:	2500      	movs	r5, #0
 8005f02:	4545      	cmp	r5, r8
 8005f04:	dd13      	ble.n	8005f2e <__kernel_rem_pio2+0x86>
 8005f06:	9b06      	ldr	r3, [sp, #24]
 8005f08:	aa20      	add	r2, sp, #128	; 0x80
 8005f0a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005f0e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005f12:	f04f 0800 	mov.w	r8, #0
 8005f16:	9b00      	ldr	r3, [sp, #0]
 8005f18:	4598      	cmp	r8, r3
 8005f1a:	dc31      	bgt.n	8005f80 <__kernel_rem_pio2+0xd8>
 8005f1c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80061b8 <__kernel_rem_pio2+0x310>
 8005f20:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005f24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005f28:	462f      	mov	r7, r5
 8005f2a:	2600      	movs	r6, #0
 8005f2c:	e01b      	b.n	8005f66 <__kernel_rem_pio2+0xbe>
 8005f2e:	42ef      	cmn	r7, r5
 8005f30:	d407      	bmi.n	8005f42 <__kernel_rem_pio2+0x9a>
 8005f32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005f36:	f7fa fa99 	bl	800046c <__aeabi_i2d>
 8005f3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005f3e:	3501      	adds	r5, #1
 8005f40:	e7df      	b.n	8005f02 <__kernel_rem_pio2+0x5a>
 8005f42:	ec51 0b18 	vmov	r0, r1, d8
 8005f46:	e7f8      	b.n	8005f3a <__kernel_rem_pio2+0x92>
 8005f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f4c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005f50:	f7fa faf6 	bl	8000540 <__aeabi_dmul>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f5c:	f7fa f93a 	bl	80001d4 <__adddf3>
 8005f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f64:	3601      	adds	r6, #1
 8005f66:	9b05      	ldr	r3, [sp, #20]
 8005f68:	429e      	cmp	r6, r3
 8005f6a:	f1a7 0708 	sub.w	r7, r7, #8
 8005f6e:	ddeb      	ble.n	8005f48 <__kernel_rem_pio2+0xa0>
 8005f70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f74:	f108 0801 	add.w	r8, r8, #1
 8005f78:	ecab 7b02 	vstmia	fp!, {d7}
 8005f7c:	3508      	adds	r5, #8
 8005f7e:	e7ca      	b.n	8005f16 <__kernel_rem_pio2+0x6e>
 8005f80:	9b00      	ldr	r3, [sp, #0]
 8005f82:	aa0c      	add	r2, sp, #48	; 0x30
 8005f84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005f88:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f8a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005f8c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005f90:	9c00      	ldr	r4, [sp, #0]
 8005f92:	930a      	str	r3, [sp, #40]	; 0x28
 8005f94:	00e3      	lsls	r3, r4, #3
 8005f96:	9308      	str	r3, [sp, #32]
 8005f98:	ab98      	add	r3, sp, #608	; 0x260
 8005f9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f9e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005fa2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8005fa6:	ab70      	add	r3, sp, #448	; 0x1c0
 8005fa8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8005fac:	46c3      	mov	fp, r8
 8005fae:	46a1      	mov	r9, r4
 8005fb0:	f1b9 0f00 	cmp.w	r9, #0
 8005fb4:	f1a5 0508 	sub.w	r5, r5, #8
 8005fb8:	dc77      	bgt.n	80060aa <__kernel_rem_pio2+0x202>
 8005fba:	ec47 6b10 	vmov	d0, r6, r7
 8005fbe:	4650      	mov	r0, sl
 8005fc0:	f000 fac2 	bl	8006548 <scalbn>
 8005fc4:	ec57 6b10 	vmov	r6, r7, d0
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005fce:	ee10 0a10 	vmov	r0, s0
 8005fd2:	4639      	mov	r1, r7
 8005fd4:	f7fa fab4 	bl	8000540 <__aeabi_dmul>
 8005fd8:	ec41 0b10 	vmov	d0, r0, r1
 8005fdc:	f000 fb34 	bl	8006648 <floor>
 8005fe0:	4b7a      	ldr	r3, [pc, #488]	; (80061cc <__kernel_rem_pio2+0x324>)
 8005fe2:	ec51 0b10 	vmov	r0, r1, d0
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f7fa faaa 	bl	8000540 <__aeabi_dmul>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	4639      	mov	r1, r7
 8005ff4:	f7fa f8ec 	bl	80001d0 <__aeabi_dsub>
 8005ff8:	460f      	mov	r7, r1
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	f7fa fd3a 	bl	8000a74 <__aeabi_d2iz>
 8006000:	9002      	str	r0, [sp, #8]
 8006002:	f7fa fa33 	bl	800046c <__aeabi_i2d>
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	4630      	mov	r0, r6
 800600c:	4639      	mov	r1, r7
 800600e:	f7fa f8df 	bl	80001d0 <__aeabi_dsub>
 8006012:	f1ba 0f00 	cmp.w	sl, #0
 8006016:	4606      	mov	r6, r0
 8006018:	460f      	mov	r7, r1
 800601a:	dd6d      	ble.n	80060f8 <__kernel_rem_pio2+0x250>
 800601c:	1e61      	subs	r1, r4, #1
 800601e:	ab0c      	add	r3, sp, #48	; 0x30
 8006020:	9d02      	ldr	r5, [sp, #8]
 8006022:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006026:	f1ca 0018 	rsb	r0, sl, #24
 800602a:	fa43 f200 	asr.w	r2, r3, r0
 800602e:	4415      	add	r5, r2
 8006030:	4082      	lsls	r2, r0
 8006032:	1a9b      	subs	r3, r3, r2
 8006034:	aa0c      	add	r2, sp, #48	; 0x30
 8006036:	9502      	str	r5, [sp, #8]
 8006038:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800603c:	f1ca 0217 	rsb	r2, sl, #23
 8006040:	fa43 fb02 	asr.w	fp, r3, r2
 8006044:	f1bb 0f00 	cmp.w	fp, #0
 8006048:	dd65      	ble.n	8006116 <__kernel_rem_pio2+0x26e>
 800604a:	9b02      	ldr	r3, [sp, #8]
 800604c:	2200      	movs	r2, #0
 800604e:	3301      	adds	r3, #1
 8006050:	9302      	str	r3, [sp, #8]
 8006052:	4615      	mov	r5, r2
 8006054:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006058:	4294      	cmp	r4, r2
 800605a:	f300 809f 	bgt.w	800619c <__kernel_rem_pio2+0x2f4>
 800605e:	f1ba 0f00 	cmp.w	sl, #0
 8006062:	dd07      	ble.n	8006074 <__kernel_rem_pio2+0x1cc>
 8006064:	f1ba 0f01 	cmp.w	sl, #1
 8006068:	f000 80c1 	beq.w	80061ee <__kernel_rem_pio2+0x346>
 800606c:	f1ba 0f02 	cmp.w	sl, #2
 8006070:	f000 80c7 	beq.w	8006202 <__kernel_rem_pio2+0x35a>
 8006074:	f1bb 0f02 	cmp.w	fp, #2
 8006078:	d14d      	bne.n	8006116 <__kernel_rem_pio2+0x26e>
 800607a:	4632      	mov	r2, r6
 800607c:	463b      	mov	r3, r7
 800607e:	4954      	ldr	r1, [pc, #336]	; (80061d0 <__kernel_rem_pio2+0x328>)
 8006080:	2000      	movs	r0, #0
 8006082:	f7fa f8a5 	bl	80001d0 <__aeabi_dsub>
 8006086:	4606      	mov	r6, r0
 8006088:	460f      	mov	r7, r1
 800608a:	2d00      	cmp	r5, #0
 800608c:	d043      	beq.n	8006116 <__kernel_rem_pio2+0x26e>
 800608e:	4650      	mov	r0, sl
 8006090:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80061c0 <__kernel_rem_pio2+0x318>
 8006094:	f000 fa58 	bl	8006548 <scalbn>
 8006098:	4630      	mov	r0, r6
 800609a:	4639      	mov	r1, r7
 800609c:	ec53 2b10 	vmov	r2, r3, d0
 80060a0:	f7fa f896 	bl	80001d0 <__aeabi_dsub>
 80060a4:	4606      	mov	r6, r0
 80060a6:	460f      	mov	r7, r1
 80060a8:	e035      	b.n	8006116 <__kernel_rem_pio2+0x26e>
 80060aa:	4b4a      	ldr	r3, [pc, #296]	; (80061d4 <__kernel_rem_pio2+0x32c>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	4630      	mov	r0, r6
 80060b0:	4639      	mov	r1, r7
 80060b2:	f7fa fa45 	bl	8000540 <__aeabi_dmul>
 80060b6:	f7fa fcdd 	bl	8000a74 <__aeabi_d2iz>
 80060ba:	f7fa f9d7 	bl	800046c <__aeabi_i2d>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	ec43 2b18 	vmov	d8, r2, r3
 80060c6:	4b44      	ldr	r3, [pc, #272]	; (80061d8 <__kernel_rem_pio2+0x330>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	f7fa fa39 	bl	8000540 <__aeabi_dmul>
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	4630      	mov	r0, r6
 80060d4:	4639      	mov	r1, r7
 80060d6:	f7fa f87b 	bl	80001d0 <__aeabi_dsub>
 80060da:	f7fa fccb 	bl	8000a74 <__aeabi_d2iz>
 80060de:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060e2:	f84b 0b04 	str.w	r0, [fp], #4
 80060e6:	ec51 0b18 	vmov	r0, r1, d8
 80060ea:	f7fa f873 	bl	80001d4 <__adddf3>
 80060ee:	f109 39ff 	add.w	r9, r9, #4294967295
 80060f2:	4606      	mov	r6, r0
 80060f4:	460f      	mov	r7, r1
 80060f6:	e75b      	b.n	8005fb0 <__kernel_rem_pio2+0x108>
 80060f8:	d106      	bne.n	8006108 <__kernel_rem_pio2+0x260>
 80060fa:	1e63      	subs	r3, r4, #1
 80060fc:	aa0c      	add	r2, sp, #48	; 0x30
 80060fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006102:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8006106:	e79d      	b.n	8006044 <__kernel_rem_pio2+0x19c>
 8006108:	4b34      	ldr	r3, [pc, #208]	; (80061dc <__kernel_rem_pio2+0x334>)
 800610a:	2200      	movs	r2, #0
 800610c:	f7fa fc9e 	bl	8000a4c <__aeabi_dcmpge>
 8006110:	2800      	cmp	r0, #0
 8006112:	d140      	bne.n	8006196 <__kernel_rem_pio2+0x2ee>
 8006114:	4683      	mov	fp, r0
 8006116:	2200      	movs	r2, #0
 8006118:	2300      	movs	r3, #0
 800611a:	4630      	mov	r0, r6
 800611c:	4639      	mov	r1, r7
 800611e:	f7fa fc77 	bl	8000a10 <__aeabi_dcmpeq>
 8006122:	2800      	cmp	r0, #0
 8006124:	f000 80c1 	beq.w	80062aa <__kernel_rem_pio2+0x402>
 8006128:	1e65      	subs	r5, r4, #1
 800612a:	462b      	mov	r3, r5
 800612c:	2200      	movs	r2, #0
 800612e:	9900      	ldr	r1, [sp, #0]
 8006130:	428b      	cmp	r3, r1
 8006132:	da6d      	bge.n	8006210 <__kernel_rem_pio2+0x368>
 8006134:	2a00      	cmp	r2, #0
 8006136:	f000 808a 	beq.w	800624e <__kernel_rem_pio2+0x3a6>
 800613a:	ab0c      	add	r3, sp, #48	; 0x30
 800613c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006140:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 80ae 	beq.w	80062a6 <__kernel_rem_pio2+0x3fe>
 800614a:	4650      	mov	r0, sl
 800614c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80061c0 <__kernel_rem_pio2+0x318>
 8006150:	f000 f9fa 	bl	8006548 <scalbn>
 8006154:	1c6b      	adds	r3, r5, #1
 8006156:	00da      	lsls	r2, r3, #3
 8006158:	9205      	str	r2, [sp, #20]
 800615a:	ec57 6b10 	vmov	r6, r7, d0
 800615e:	aa70      	add	r2, sp, #448	; 0x1c0
 8006160:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80061d4 <__kernel_rem_pio2+0x32c>
 8006164:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8006168:	462c      	mov	r4, r5
 800616a:	f04f 0800 	mov.w	r8, #0
 800616e:	2c00      	cmp	r4, #0
 8006170:	f280 80d4 	bge.w	800631c <__kernel_rem_pio2+0x474>
 8006174:	462c      	mov	r4, r5
 8006176:	2c00      	cmp	r4, #0
 8006178:	f2c0 8102 	blt.w	8006380 <__kernel_rem_pio2+0x4d8>
 800617c:	4b18      	ldr	r3, [pc, #96]	; (80061e0 <__kernel_rem_pio2+0x338>)
 800617e:	461e      	mov	r6, r3
 8006180:	ab70      	add	r3, sp, #448	; 0x1c0
 8006182:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8006186:	1b2b      	subs	r3, r5, r4
 8006188:	f04f 0900 	mov.w	r9, #0
 800618c:	f04f 0a00 	mov.w	sl, #0
 8006190:	2700      	movs	r7, #0
 8006192:	9306      	str	r3, [sp, #24]
 8006194:	e0e6      	b.n	8006364 <__kernel_rem_pio2+0x4bc>
 8006196:	f04f 0b02 	mov.w	fp, #2
 800619a:	e756      	b.n	800604a <__kernel_rem_pio2+0x1a2>
 800619c:	f8d8 3000 	ldr.w	r3, [r8]
 80061a0:	bb05      	cbnz	r5, 80061e4 <__kernel_rem_pio2+0x33c>
 80061a2:	b123      	cbz	r3, 80061ae <__kernel_rem_pio2+0x306>
 80061a4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80061a8:	f8c8 3000 	str.w	r3, [r8]
 80061ac:	2301      	movs	r3, #1
 80061ae:	3201      	adds	r2, #1
 80061b0:	f108 0804 	add.w	r8, r8, #4
 80061b4:	461d      	mov	r5, r3
 80061b6:	e74f      	b.n	8006058 <__kernel_rem_pio2+0x1b0>
	...
 80061c4:	3ff00000 	.word	0x3ff00000
 80061c8:	080069a0 	.word	0x080069a0
 80061cc:	40200000 	.word	0x40200000
 80061d0:	3ff00000 	.word	0x3ff00000
 80061d4:	3e700000 	.word	0x3e700000
 80061d8:	41700000 	.word	0x41700000
 80061dc:	3fe00000 	.word	0x3fe00000
 80061e0:	08006960 	.word	0x08006960
 80061e4:	1acb      	subs	r3, r1, r3
 80061e6:	f8c8 3000 	str.w	r3, [r8]
 80061ea:	462b      	mov	r3, r5
 80061ec:	e7df      	b.n	80061ae <__kernel_rem_pio2+0x306>
 80061ee:	1e62      	subs	r2, r4, #1
 80061f0:	ab0c      	add	r3, sp, #48	; 0x30
 80061f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80061fa:	a90c      	add	r1, sp, #48	; 0x30
 80061fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006200:	e738      	b.n	8006074 <__kernel_rem_pio2+0x1cc>
 8006202:	1e62      	subs	r2, r4, #1
 8006204:	ab0c      	add	r3, sp, #48	; 0x30
 8006206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800620e:	e7f4      	b.n	80061fa <__kernel_rem_pio2+0x352>
 8006210:	a90c      	add	r1, sp, #48	; 0x30
 8006212:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006216:	3b01      	subs	r3, #1
 8006218:	430a      	orrs	r2, r1
 800621a:	e788      	b.n	800612e <__kernel_rem_pio2+0x286>
 800621c:	3301      	adds	r3, #1
 800621e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006222:	2900      	cmp	r1, #0
 8006224:	d0fa      	beq.n	800621c <__kernel_rem_pio2+0x374>
 8006226:	9a08      	ldr	r2, [sp, #32]
 8006228:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800622c:	446a      	add	r2, sp
 800622e:	3a98      	subs	r2, #152	; 0x98
 8006230:	9208      	str	r2, [sp, #32]
 8006232:	9a06      	ldr	r2, [sp, #24]
 8006234:	a920      	add	r1, sp, #128	; 0x80
 8006236:	18a2      	adds	r2, r4, r2
 8006238:	18e3      	adds	r3, r4, r3
 800623a:	f104 0801 	add.w	r8, r4, #1
 800623e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8006242:	9302      	str	r3, [sp, #8]
 8006244:	9b02      	ldr	r3, [sp, #8]
 8006246:	4543      	cmp	r3, r8
 8006248:	da04      	bge.n	8006254 <__kernel_rem_pio2+0x3ac>
 800624a:	461c      	mov	r4, r3
 800624c:	e6a2      	b.n	8005f94 <__kernel_rem_pio2+0xec>
 800624e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006250:	2301      	movs	r3, #1
 8006252:	e7e4      	b.n	800621e <__kernel_rem_pio2+0x376>
 8006254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006256:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800625a:	f7fa f907 	bl	800046c <__aeabi_i2d>
 800625e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006264:	46ab      	mov	fp, r5
 8006266:	461c      	mov	r4, r3
 8006268:	f04f 0900 	mov.w	r9, #0
 800626c:	2600      	movs	r6, #0
 800626e:	2700      	movs	r7, #0
 8006270:	9b05      	ldr	r3, [sp, #20]
 8006272:	4599      	cmp	r9, r3
 8006274:	dd06      	ble.n	8006284 <__kernel_rem_pio2+0x3dc>
 8006276:	9b08      	ldr	r3, [sp, #32]
 8006278:	e8e3 6702 	strd	r6, r7, [r3], #8
 800627c:	f108 0801 	add.w	r8, r8, #1
 8006280:	9308      	str	r3, [sp, #32]
 8006282:	e7df      	b.n	8006244 <__kernel_rem_pio2+0x39c>
 8006284:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006288:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800628c:	f7fa f958 	bl	8000540 <__aeabi_dmul>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4630      	mov	r0, r6
 8006296:	4639      	mov	r1, r7
 8006298:	f7f9 ff9c 	bl	80001d4 <__adddf3>
 800629c:	f109 0901 	add.w	r9, r9, #1
 80062a0:	4606      	mov	r6, r0
 80062a2:	460f      	mov	r7, r1
 80062a4:	e7e4      	b.n	8006270 <__kernel_rem_pio2+0x3c8>
 80062a6:	3d01      	subs	r5, #1
 80062a8:	e747      	b.n	800613a <__kernel_rem_pio2+0x292>
 80062aa:	ec47 6b10 	vmov	d0, r6, r7
 80062ae:	f1ca 0000 	rsb	r0, sl, #0
 80062b2:	f000 f949 	bl	8006548 <scalbn>
 80062b6:	ec57 6b10 	vmov	r6, r7, d0
 80062ba:	4ba0      	ldr	r3, [pc, #640]	; (800653c <__kernel_rem_pio2+0x694>)
 80062bc:	ee10 0a10 	vmov	r0, s0
 80062c0:	2200      	movs	r2, #0
 80062c2:	4639      	mov	r1, r7
 80062c4:	f7fa fbc2 	bl	8000a4c <__aeabi_dcmpge>
 80062c8:	b1f8      	cbz	r0, 800630a <__kernel_rem_pio2+0x462>
 80062ca:	4b9d      	ldr	r3, [pc, #628]	; (8006540 <__kernel_rem_pio2+0x698>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	4630      	mov	r0, r6
 80062d0:	4639      	mov	r1, r7
 80062d2:	f7fa f935 	bl	8000540 <__aeabi_dmul>
 80062d6:	f7fa fbcd 	bl	8000a74 <__aeabi_d2iz>
 80062da:	4680      	mov	r8, r0
 80062dc:	f7fa f8c6 	bl	800046c <__aeabi_i2d>
 80062e0:	4b96      	ldr	r3, [pc, #600]	; (800653c <__kernel_rem_pio2+0x694>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	f7fa f92c 	bl	8000540 <__aeabi_dmul>
 80062e8:	460b      	mov	r3, r1
 80062ea:	4602      	mov	r2, r0
 80062ec:	4639      	mov	r1, r7
 80062ee:	4630      	mov	r0, r6
 80062f0:	f7f9 ff6e 	bl	80001d0 <__aeabi_dsub>
 80062f4:	f7fa fbbe 	bl	8000a74 <__aeabi_d2iz>
 80062f8:	1c65      	adds	r5, r4, #1
 80062fa:	ab0c      	add	r3, sp, #48	; 0x30
 80062fc:	f10a 0a18 	add.w	sl, sl, #24
 8006300:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006304:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006308:	e71f      	b.n	800614a <__kernel_rem_pio2+0x2a2>
 800630a:	4630      	mov	r0, r6
 800630c:	4639      	mov	r1, r7
 800630e:	f7fa fbb1 	bl	8000a74 <__aeabi_d2iz>
 8006312:	ab0c      	add	r3, sp, #48	; 0x30
 8006314:	4625      	mov	r5, r4
 8006316:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800631a:	e716      	b.n	800614a <__kernel_rem_pio2+0x2a2>
 800631c:	ab0c      	add	r3, sp, #48	; 0x30
 800631e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006322:	f7fa f8a3 	bl	800046c <__aeabi_i2d>
 8006326:	4632      	mov	r2, r6
 8006328:	463b      	mov	r3, r7
 800632a:	f7fa f909 	bl	8000540 <__aeabi_dmul>
 800632e:	4642      	mov	r2, r8
 8006330:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006334:	464b      	mov	r3, r9
 8006336:	4630      	mov	r0, r6
 8006338:	4639      	mov	r1, r7
 800633a:	f7fa f901 	bl	8000540 <__aeabi_dmul>
 800633e:	3c01      	subs	r4, #1
 8006340:	4606      	mov	r6, r0
 8006342:	460f      	mov	r7, r1
 8006344:	e713      	b.n	800616e <__kernel_rem_pio2+0x2c6>
 8006346:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800634a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800634e:	f7fa f8f7 	bl	8000540 <__aeabi_dmul>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	4648      	mov	r0, r9
 8006358:	4651      	mov	r1, sl
 800635a:	f7f9 ff3b 	bl	80001d4 <__adddf3>
 800635e:	3701      	adds	r7, #1
 8006360:	4681      	mov	r9, r0
 8006362:	468a      	mov	sl, r1
 8006364:	9b00      	ldr	r3, [sp, #0]
 8006366:	429f      	cmp	r7, r3
 8006368:	dc02      	bgt.n	8006370 <__kernel_rem_pio2+0x4c8>
 800636a:	9b06      	ldr	r3, [sp, #24]
 800636c:	429f      	cmp	r7, r3
 800636e:	ddea      	ble.n	8006346 <__kernel_rem_pio2+0x49e>
 8006370:	9a06      	ldr	r2, [sp, #24]
 8006372:	ab48      	add	r3, sp, #288	; 0x120
 8006374:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8006378:	e9c6 9a00 	strd	r9, sl, [r6]
 800637c:	3c01      	subs	r4, #1
 800637e:	e6fa      	b.n	8006176 <__kernel_rem_pio2+0x2ce>
 8006380:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006382:	2b02      	cmp	r3, #2
 8006384:	dc0b      	bgt.n	800639e <__kernel_rem_pio2+0x4f6>
 8006386:	2b00      	cmp	r3, #0
 8006388:	dc39      	bgt.n	80063fe <__kernel_rem_pio2+0x556>
 800638a:	d05d      	beq.n	8006448 <__kernel_rem_pio2+0x5a0>
 800638c:	9b02      	ldr	r3, [sp, #8]
 800638e:	f003 0007 	and.w	r0, r3, #7
 8006392:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006396:	ecbd 8b02 	vpop	{d8}
 800639a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80063a0:	2b03      	cmp	r3, #3
 80063a2:	d1f3      	bne.n	800638c <__kernel_rem_pio2+0x4e4>
 80063a4:	9b05      	ldr	r3, [sp, #20]
 80063a6:	9500      	str	r5, [sp, #0]
 80063a8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80063ac:	eb0d 0403 	add.w	r4, sp, r3
 80063b0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80063b4:	46a2      	mov	sl, r4
 80063b6:	9b00      	ldr	r3, [sp, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f1aa 0a08 	sub.w	sl, sl, #8
 80063be:	dc69      	bgt.n	8006494 <__kernel_rem_pio2+0x5ec>
 80063c0:	46aa      	mov	sl, r5
 80063c2:	f1ba 0f01 	cmp.w	sl, #1
 80063c6:	f1a4 0408 	sub.w	r4, r4, #8
 80063ca:	f300 8083 	bgt.w	80064d4 <__kernel_rem_pio2+0x62c>
 80063ce:	9c05      	ldr	r4, [sp, #20]
 80063d0:	ab48      	add	r3, sp, #288	; 0x120
 80063d2:	441c      	add	r4, r3
 80063d4:	2000      	movs	r0, #0
 80063d6:	2100      	movs	r1, #0
 80063d8:	2d01      	cmp	r5, #1
 80063da:	f300 809a 	bgt.w	8006512 <__kernel_rem_pio2+0x66a>
 80063de:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80063e2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80063e6:	f1bb 0f00 	cmp.w	fp, #0
 80063ea:	f040 8098 	bne.w	800651e <__kernel_rem_pio2+0x676>
 80063ee:	9b04      	ldr	r3, [sp, #16]
 80063f0:	e9c3 7800 	strd	r7, r8, [r3]
 80063f4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80063f8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80063fc:	e7c6      	b.n	800638c <__kernel_rem_pio2+0x4e4>
 80063fe:	9e05      	ldr	r6, [sp, #20]
 8006400:	ab48      	add	r3, sp, #288	; 0x120
 8006402:	441e      	add	r6, r3
 8006404:	462c      	mov	r4, r5
 8006406:	2000      	movs	r0, #0
 8006408:	2100      	movs	r1, #0
 800640a:	2c00      	cmp	r4, #0
 800640c:	da33      	bge.n	8006476 <__kernel_rem_pio2+0x5ce>
 800640e:	f1bb 0f00 	cmp.w	fp, #0
 8006412:	d036      	beq.n	8006482 <__kernel_rem_pio2+0x5da>
 8006414:	4602      	mov	r2, r0
 8006416:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800641a:	9c04      	ldr	r4, [sp, #16]
 800641c:	e9c4 2300 	strd	r2, r3, [r4]
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006428:	f7f9 fed2 	bl	80001d0 <__aeabi_dsub>
 800642c:	ae4a      	add	r6, sp, #296	; 0x128
 800642e:	2401      	movs	r4, #1
 8006430:	42a5      	cmp	r5, r4
 8006432:	da29      	bge.n	8006488 <__kernel_rem_pio2+0x5e0>
 8006434:	f1bb 0f00 	cmp.w	fp, #0
 8006438:	d002      	beq.n	8006440 <__kernel_rem_pio2+0x598>
 800643a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800643e:	4619      	mov	r1, r3
 8006440:	9b04      	ldr	r3, [sp, #16]
 8006442:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006446:	e7a1      	b.n	800638c <__kernel_rem_pio2+0x4e4>
 8006448:	9c05      	ldr	r4, [sp, #20]
 800644a:	ab48      	add	r3, sp, #288	; 0x120
 800644c:	441c      	add	r4, r3
 800644e:	2000      	movs	r0, #0
 8006450:	2100      	movs	r1, #0
 8006452:	2d00      	cmp	r5, #0
 8006454:	da09      	bge.n	800646a <__kernel_rem_pio2+0x5c2>
 8006456:	f1bb 0f00 	cmp.w	fp, #0
 800645a:	d002      	beq.n	8006462 <__kernel_rem_pio2+0x5ba>
 800645c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006460:	4619      	mov	r1, r3
 8006462:	9b04      	ldr	r3, [sp, #16]
 8006464:	e9c3 0100 	strd	r0, r1, [r3]
 8006468:	e790      	b.n	800638c <__kernel_rem_pio2+0x4e4>
 800646a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800646e:	f7f9 feb1 	bl	80001d4 <__adddf3>
 8006472:	3d01      	subs	r5, #1
 8006474:	e7ed      	b.n	8006452 <__kernel_rem_pio2+0x5aa>
 8006476:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800647a:	f7f9 feab 	bl	80001d4 <__adddf3>
 800647e:	3c01      	subs	r4, #1
 8006480:	e7c3      	b.n	800640a <__kernel_rem_pio2+0x562>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	e7c8      	b.n	800641a <__kernel_rem_pio2+0x572>
 8006488:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800648c:	f7f9 fea2 	bl	80001d4 <__adddf3>
 8006490:	3401      	adds	r4, #1
 8006492:	e7cd      	b.n	8006430 <__kernel_rem_pio2+0x588>
 8006494:	e9da 8900 	ldrd	r8, r9, [sl]
 8006498:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800649c:	9b00      	ldr	r3, [sp, #0]
 800649e:	3b01      	subs	r3, #1
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	4632      	mov	r2, r6
 80064a4:	463b      	mov	r3, r7
 80064a6:	4640      	mov	r0, r8
 80064a8:	4649      	mov	r1, r9
 80064aa:	f7f9 fe93 	bl	80001d4 <__adddf3>
 80064ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	4640      	mov	r0, r8
 80064b8:	4649      	mov	r1, r9
 80064ba:	f7f9 fe89 	bl	80001d0 <__aeabi_dsub>
 80064be:	4632      	mov	r2, r6
 80064c0:	463b      	mov	r3, r7
 80064c2:	f7f9 fe87 	bl	80001d4 <__adddf3>
 80064c6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80064ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80064ce:	ed8a 7b00 	vstr	d7, [sl]
 80064d2:	e770      	b.n	80063b6 <__kernel_rem_pio2+0x50e>
 80064d4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80064d8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80064dc:	4640      	mov	r0, r8
 80064de:	4632      	mov	r2, r6
 80064e0:	463b      	mov	r3, r7
 80064e2:	4649      	mov	r1, r9
 80064e4:	f7f9 fe76 	bl	80001d4 <__adddf3>
 80064e8:	e9cd 0100 	strd	r0, r1, [sp]
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4640      	mov	r0, r8
 80064f2:	4649      	mov	r1, r9
 80064f4:	f7f9 fe6c 	bl	80001d0 <__aeabi_dsub>
 80064f8:	4632      	mov	r2, r6
 80064fa:	463b      	mov	r3, r7
 80064fc:	f7f9 fe6a 	bl	80001d4 <__adddf3>
 8006500:	ed9d 7b00 	vldr	d7, [sp]
 8006504:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006508:	ed84 7b00 	vstr	d7, [r4]
 800650c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006510:	e757      	b.n	80063c2 <__kernel_rem_pio2+0x51a>
 8006512:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006516:	f7f9 fe5d 	bl	80001d4 <__adddf3>
 800651a:	3d01      	subs	r5, #1
 800651c:	e75c      	b.n	80063d8 <__kernel_rem_pio2+0x530>
 800651e:	9b04      	ldr	r3, [sp, #16]
 8006520:	9a04      	ldr	r2, [sp, #16]
 8006522:	601f      	str	r7, [r3, #0]
 8006524:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006528:	605c      	str	r4, [r3, #4]
 800652a:	609d      	str	r5, [r3, #8]
 800652c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006530:	60d3      	str	r3, [r2, #12]
 8006532:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006536:	6110      	str	r0, [r2, #16]
 8006538:	6153      	str	r3, [r2, #20]
 800653a:	e727      	b.n	800638c <__kernel_rem_pio2+0x4e4>
 800653c:	41700000 	.word	0x41700000
 8006540:	3e700000 	.word	0x3e700000
 8006544:	00000000 	.word	0x00000000

08006548 <scalbn>:
 8006548:	b570      	push	{r4, r5, r6, lr}
 800654a:	ec55 4b10 	vmov	r4, r5, d0
 800654e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006552:	4606      	mov	r6, r0
 8006554:	462b      	mov	r3, r5
 8006556:	b999      	cbnz	r1, 8006580 <scalbn+0x38>
 8006558:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800655c:	4323      	orrs	r3, r4
 800655e:	d03f      	beq.n	80065e0 <scalbn+0x98>
 8006560:	4b35      	ldr	r3, [pc, #212]	; (8006638 <scalbn+0xf0>)
 8006562:	4629      	mov	r1, r5
 8006564:	ee10 0a10 	vmov	r0, s0
 8006568:	2200      	movs	r2, #0
 800656a:	f7f9 ffe9 	bl	8000540 <__aeabi_dmul>
 800656e:	4b33      	ldr	r3, [pc, #204]	; (800663c <scalbn+0xf4>)
 8006570:	429e      	cmp	r6, r3
 8006572:	4604      	mov	r4, r0
 8006574:	460d      	mov	r5, r1
 8006576:	da10      	bge.n	800659a <scalbn+0x52>
 8006578:	a327      	add	r3, pc, #156	; (adr r3, 8006618 <scalbn+0xd0>)
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	e01f      	b.n	80065c0 <scalbn+0x78>
 8006580:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006584:	4291      	cmp	r1, r2
 8006586:	d10c      	bne.n	80065a2 <scalbn+0x5a>
 8006588:	ee10 2a10 	vmov	r2, s0
 800658c:	4620      	mov	r0, r4
 800658e:	4629      	mov	r1, r5
 8006590:	f7f9 fe20 	bl	80001d4 <__adddf3>
 8006594:	4604      	mov	r4, r0
 8006596:	460d      	mov	r5, r1
 8006598:	e022      	b.n	80065e0 <scalbn+0x98>
 800659a:	460b      	mov	r3, r1
 800659c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80065a0:	3936      	subs	r1, #54	; 0x36
 80065a2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80065a6:	4296      	cmp	r6, r2
 80065a8:	dd0d      	ble.n	80065c6 <scalbn+0x7e>
 80065aa:	2d00      	cmp	r5, #0
 80065ac:	a11c      	add	r1, pc, #112	; (adr r1, 8006620 <scalbn+0xd8>)
 80065ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065b2:	da02      	bge.n	80065ba <scalbn+0x72>
 80065b4:	a11c      	add	r1, pc, #112	; (adr r1, 8006628 <scalbn+0xe0>)
 80065b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065ba:	a319      	add	r3, pc, #100	; (adr r3, 8006620 <scalbn+0xd8>)
 80065bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c0:	f7f9 ffbe 	bl	8000540 <__aeabi_dmul>
 80065c4:	e7e6      	b.n	8006594 <scalbn+0x4c>
 80065c6:	1872      	adds	r2, r6, r1
 80065c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80065cc:	428a      	cmp	r2, r1
 80065ce:	dcec      	bgt.n	80065aa <scalbn+0x62>
 80065d0:	2a00      	cmp	r2, #0
 80065d2:	dd08      	ble.n	80065e6 <scalbn+0x9e>
 80065d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80065d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80065dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80065e0:	ec45 4b10 	vmov	d0, r4, r5
 80065e4:	bd70      	pop	{r4, r5, r6, pc}
 80065e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80065ea:	da08      	bge.n	80065fe <scalbn+0xb6>
 80065ec:	2d00      	cmp	r5, #0
 80065ee:	a10a      	add	r1, pc, #40	; (adr r1, 8006618 <scalbn+0xd0>)
 80065f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065f4:	dac0      	bge.n	8006578 <scalbn+0x30>
 80065f6:	a10e      	add	r1, pc, #56	; (adr r1, 8006630 <scalbn+0xe8>)
 80065f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065fc:	e7bc      	b.n	8006578 <scalbn+0x30>
 80065fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006602:	3236      	adds	r2, #54	; 0x36
 8006604:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006608:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800660c:	4620      	mov	r0, r4
 800660e:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <scalbn+0xf8>)
 8006610:	2200      	movs	r2, #0
 8006612:	e7d5      	b.n	80065c0 <scalbn+0x78>
 8006614:	f3af 8000 	nop.w
 8006618:	c2f8f359 	.word	0xc2f8f359
 800661c:	01a56e1f 	.word	0x01a56e1f
 8006620:	8800759c 	.word	0x8800759c
 8006624:	7e37e43c 	.word	0x7e37e43c
 8006628:	8800759c 	.word	0x8800759c
 800662c:	fe37e43c 	.word	0xfe37e43c
 8006630:	c2f8f359 	.word	0xc2f8f359
 8006634:	81a56e1f 	.word	0x81a56e1f
 8006638:	43500000 	.word	0x43500000
 800663c:	ffff3cb0 	.word	0xffff3cb0
 8006640:	3c900000 	.word	0x3c900000
 8006644:	00000000 	.word	0x00000000

08006648 <floor>:
 8006648:	ec51 0b10 	vmov	r0, r1, d0
 800664c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006654:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006658:	2e13      	cmp	r6, #19
 800665a:	ee10 5a10 	vmov	r5, s0
 800665e:	ee10 8a10 	vmov	r8, s0
 8006662:	460c      	mov	r4, r1
 8006664:	dc31      	bgt.n	80066ca <floor+0x82>
 8006666:	2e00      	cmp	r6, #0
 8006668:	da14      	bge.n	8006694 <floor+0x4c>
 800666a:	a333      	add	r3, pc, #204	; (adr r3, 8006738 <floor+0xf0>)
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	f7f9 fdb0 	bl	80001d4 <__adddf3>
 8006674:	2200      	movs	r2, #0
 8006676:	2300      	movs	r3, #0
 8006678:	f7fa f9f2 	bl	8000a60 <__aeabi_dcmpgt>
 800667c:	b138      	cbz	r0, 800668e <floor+0x46>
 800667e:	2c00      	cmp	r4, #0
 8006680:	da53      	bge.n	800672a <floor+0xe2>
 8006682:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006686:	4325      	orrs	r5, r4
 8006688:	d052      	beq.n	8006730 <floor+0xe8>
 800668a:	4c2d      	ldr	r4, [pc, #180]	; (8006740 <floor+0xf8>)
 800668c:	2500      	movs	r5, #0
 800668e:	4621      	mov	r1, r4
 8006690:	4628      	mov	r0, r5
 8006692:	e024      	b.n	80066de <floor+0x96>
 8006694:	4f2b      	ldr	r7, [pc, #172]	; (8006744 <floor+0xfc>)
 8006696:	4137      	asrs	r7, r6
 8006698:	ea01 0307 	and.w	r3, r1, r7
 800669c:	4303      	orrs	r3, r0
 800669e:	d01e      	beq.n	80066de <floor+0x96>
 80066a0:	a325      	add	r3, pc, #148	; (adr r3, 8006738 <floor+0xf0>)
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	f7f9 fd95 	bl	80001d4 <__adddf3>
 80066aa:	2200      	movs	r2, #0
 80066ac:	2300      	movs	r3, #0
 80066ae:	f7fa f9d7 	bl	8000a60 <__aeabi_dcmpgt>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d0eb      	beq.n	800668e <floor+0x46>
 80066b6:	2c00      	cmp	r4, #0
 80066b8:	bfbe      	ittt	lt
 80066ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80066be:	4133      	asrlt	r3, r6
 80066c0:	18e4      	addlt	r4, r4, r3
 80066c2:	ea24 0407 	bic.w	r4, r4, r7
 80066c6:	2500      	movs	r5, #0
 80066c8:	e7e1      	b.n	800668e <floor+0x46>
 80066ca:	2e33      	cmp	r6, #51	; 0x33
 80066cc:	dd0b      	ble.n	80066e6 <floor+0x9e>
 80066ce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80066d2:	d104      	bne.n	80066de <floor+0x96>
 80066d4:	ee10 2a10 	vmov	r2, s0
 80066d8:	460b      	mov	r3, r1
 80066da:	f7f9 fd7b 	bl	80001d4 <__adddf3>
 80066de:	ec41 0b10 	vmov	d0, r0, r1
 80066e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80066ea:	f04f 37ff 	mov.w	r7, #4294967295
 80066ee:	40df      	lsrs	r7, r3
 80066f0:	4238      	tst	r0, r7
 80066f2:	d0f4      	beq.n	80066de <floor+0x96>
 80066f4:	a310      	add	r3, pc, #64	; (adr r3, 8006738 <floor+0xf0>)
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	f7f9 fd6b 	bl	80001d4 <__adddf3>
 80066fe:	2200      	movs	r2, #0
 8006700:	2300      	movs	r3, #0
 8006702:	f7fa f9ad 	bl	8000a60 <__aeabi_dcmpgt>
 8006706:	2800      	cmp	r0, #0
 8006708:	d0c1      	beq.n	800668e <floor+0x46>
 800670a:	2c00      	cmp	r4, #0
 800670c:	da0a      	bge.n	8006724 <floor+0xdc>
 800670e:	2e14      	cmp	r6, #20
 8006710:	d101      	bne.n	8006716 <floor+0xce>
 8006712:	3401      	adds	r4, #1
 8006714:	e006      	b.n	8006724 <floor+0xdc>
 8006716:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800671a:	2301      	movs	r3, #1
 800671c:	40b3      	lsls	r3, r6
 800671e:	441d      	add	r5, r3
 8006720:	45a8      	cmp	r8, r5
 8006722:	d8f6      	bhi.n	8006712 <floor+0xca>
 8006724:	ea25 0507 	bic.w	r5, r5, r7
 8006728:	e7b1      	b.n	800668e <floor+0x46>
 800672a:	2500      	movs	r5, #0
 800672c:	462c      	mov	r4, r5
 800672e:	e7ae      	b.n	800668e <floor+0x46>
 8006730:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006734:	e7ab      	b.n	800668e <floor+0x46>
 8006736:	bf00      	nop
 8006738:	8800759c 	.word	0x8800759c
 800673c:	7e37e43c 	.word	0x7e37e43c
 8006740:	bff00000 	.word	0xbff00000
 8006744:	000fffff 	.word	0x000fffff

08006748 <_init>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	bf00      	nop
 800674c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674e:	bc08      	pop	{r3}
 8006750:	469e      	mov	lr, r3
 8006752:	4770      	bx	lr

08006754 <_fini>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	bf00      	nop
 8006758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675a:	bc08      	pop	{r3}
 800675c:	469e      	mov	lr, r3
 800675e:	4770      	bx	lr
